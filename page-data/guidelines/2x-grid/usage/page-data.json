{"componentChunkName":"component---src-pages-guidelines-2-x-grid-usage-mdx","path":"/guidelines/2x-grid/usage/","result":{"pageContext":{"frontmatter":{"title":"2x Grid","description":"The grid is the framework for all the visual elements and typography at IBM. It’s fundamental to everything we design.","tabs":["Overview","Usage","Code"]},"relativePagePath":"/guidelines/2x-grid/usage.mdx","titleType":"prepend","MdxNode":{"id":"71fd38c6-c921-5dfc-9f87-35f6d0d5676c","children":[],"parent":"28c63c03-c088-51e8-80b9-3be0734404d3","internal":{"content":"---\ntitle: 2x Grid\ndescription:\n  The grid is the framework for all the visual elements and typography at IBM.\n  It’s fundamental to everything we design.\ntabs: ['Overview', 'Usage', 'Code']\n---\n\nimport { IbmSecurity } from '@carbon/icons-react';\nimport { gridTable } from './Grid.module.scss';\n\n<PageDescription>\n\nYou’ve learned the grid fundamentals, now let’s put them together. A good layout\nrequires careful planning and use of composition, which relies on principles\nsuch as hierarchy, scale, proportion, contrast, harmony, rhythm, repetition, and\nmany more.\n\n</PageDescription>\n\n<InlineNotification>\n\nNote: Although Carbon is open source, much of our Pattern Asset Library (PAL)\ncontent is gated—so many of the links below can only be accessed by IBM\nemployees.\n\n</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>UI galleries</AnchorLink>\n  <AnchorLink>Fit for purpose</AnchorLink>\n  <AnchorLink>Content hierarchy</AnchorLink>\n  <AnchorLink>Continuity and contrast</AnchorLink>\n  <AnchorLink>Grid influencers</AnchorLink>\n  <AnchorLink>Style models</AnchorLink>\n  <AnchorLink>Gutter modes</AnchorLink>\n  <AnchorLink>Mixing gutter modes</AnchorLink>\n  <AnchorLink>Using grids in Figma</AnchorLink>\n</AnchorLinks>\n\n## UI galleries\n\nFor years, Carbon users have been asking for a gallery of product UI screens for\nreference and inspiration. There are several ongoing initiatives to catalog\nscreens and we’ll continue to add to this list as more come online.\n\n<Row className=\"resource-card-group\">\n  <Column colLg={4} colMd={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"UI screens (IBMers only)\"\n    title=\"Security\"\n    href=\"https://pages.github.ibm.com/security/security-design/department/tools-and-resources/visual-libraries/libraries/\"\n    >\n\n<IbmSecurity size={32} />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n## Fit for purpose\n\nOn every page there is a story that ends with a desired action–one that enables\na user to achieve a goal or reach an outcome. Proper layouts pull everything\ntogether to help users form a mental model of the story, identify relevant\ncontent, and pursue their objective.\n\nAlways start with the content and user goals. Consider the purpose of the\ncontent and the best type of experience to help the user reach their objective.\nFor instance, are you building a long-form reading experience or a multi-step,\ntask-based experience? Each type of experience and purpose will require a\ndifferent layout.\n\n## Content hierarchy\n\nHierarchy helps users (viewer, reader, audience) navigate complex concepts\nwithout getting confused or lost, and ultimately find what they are looking for.\nThoughtful application of type styles, components, and patterns will allow\ncontent to be communicated and prioritized in different ways. Pay attention also\nto the size and proximity of content pieces within a component and between\ncomponents.\n\n### Basic scaffolding\n\nIn the Overview section, we talked a bit about common screen regions—like the UI\nShell, the content area and dialogs. Now we also need to address several common\nlayout patterns within the content area in IBM products.\n\nThese repeatable structures lower the cognitive burden for users, by reinforcing\nkey alignments throughout the UI. Below are some examples of structural layout\nmodules that are used widely across products. For more detailed documentation\nabout structural layout modules, check out\n[IBM Product Layouts](https://pages.github.ibm.com/cdai-design/pal/layouts/library/)\non the Carbon for IBM Products PAL.\n\n![Grid scaffolding illustration](images/usage/01_basic_scaffolding.png)\n\n<Caption>\n  Although gutter width depends on the product, here are some common examples of\n  how product designers use a consistent leadspace size with the 2x Grid to\n  create four-column layout patterns that repeat throughout their products.\n</Caption>\n\n### Four columns\n\nThe four column layout is the backbone of most IBM experiences—not just the\nIBM.com pages. Software users also like more breathing room as they enter a\nproduct, along with consistent typographic alignments, as they navigate deeper.\nAs a result, IBM product UIs rely heavily on the four column structure to ease\nusers into denser content.\n\nEven though there are examples of two- and three-column arrangements in the\ndiagrams above, the type within them often still sits on four columns.\n\n![four column ui example](images/usage/02_four_column_UI.png)\n\n### Denser layouts\n\nYou can see the four column arrangement in denser layouts too. The leadspace\npattern also remains the same, giving users a familiar anchor. However the\ncontent has become a lot denser as other column configurations begin to emerge\non the fluid 2x grid. The fixed grid also comes into play here in the data\nvisualizations, where content is so dense that fixed spacers (i.e. the\n[mini unit grid](/guidelines/2x-grid/overview/#mini-unit)) need to be used\nrather than fluid columns.\n\n![denser layout example](images/usage/03_denser_layout_UI.png)\n\n### Layout modules and micro layouts\n\nAlthough Carbon React does not have coded layout modules in its library, the\n[Carbon for IBM Products library](https://v1-ibm-products.carbondesignsystem.com/?path=/story/overview-getting-started--page)\n_(IBMers only)_ does. These modules are helpful for reference, however they are\nstill in the process of being migrated to Carbon v11.\n\nLayout modules are coded combinations of components, spacing tokens, icons, and\ntype styles packaged as a single grid-aware, unit. The layout-module framework\nenables designers to build page layouts with greater rigor, quality, and\nconsistency. They are designed to work in tandem with other modules and Carbon\ncomponents so that they can be quickly arranged into layouts with the confidence\nthat they are consistent with all of our other pages.\n\nThese modules along with the overarching page scaffolding above, provide a great\nexample of how product designers should mix and match repeatable layout patterns\nat both the large and small scales throughout an experience.\n\n![layout modules example](images/usage/04_layout_modules.png)\n\n### Using odd column configurations\n\nThe 2x grid starts with 16 columns and encourages designers to divide by two as\ntheir content becomes more dense. However, many legacy products used a twelve\ncolumn grid and in turn, display content in groups of three instead of groups of\nfour.\n\nAlthough we highly recommend refactoring these UIs to take full advantage of the\nthe 2x grid, we realize that certain products will choose to keep their three\ncolumn scaffolding. So it’s important to note that this configuration can still\nbe achieved with the 2x grid package.\n\n![odd columns example](images/usage/05_odd_columns.png)\n\n## Continuity and contrast\n\nNo component exists on its own. Pay attention to how individual layout\ncomponents fit into the larger context of both the page type and the broader\nuser journey across the product. Pattern repetition where appropriate is\nessential to reduce cognitive load, however too much repetition, especially\ncoupled with lack of white space, can lead to monotony.\n\n### Continuity\n\n#### Thinking across an experience\n\nUnlike editorial experiences, products focus more on task completion and\ncontinuity across screens, rather than leading a user through stacked modules on\na single page. So common geometries and key alignments are especially important\nacross pages, not just down the scroll.\n\nThe Cloud team recently did an audit on type alignment in their product\n[leadspaces](<https://www.figma.com/proto/XHddusMshnOcHMWjxtoGrx/Cloud-PAL-Experimental-(Light)?page-id=80%3A124640&node-id=80-131354&viewport=4475%2C1436%2C0.29&scaling=min-zoom&starting-point-node-id=80%3A130876>)\n_(IBMers only)_ in order to streamline their experiences.\n\n![Continuity across screens example](images/usage/06_continuity_across_screens.png)\n\n<Caption>\n  Although the leadspace heights are changing, the typographic alignment from\n  the World overview page into the product keeps the user oriented.\n</Caption>\n\n#### Using Aspect ratios\n\nAspect ratios also ensure that there is a consistent visual flow as users move\nthrough a product. Although images are used much less frequently in products\nthan in digital experiences, aspect ratios come into play often in product with\nthe tile component, which is used frequently in catalogs and dashboards.\n\nRefer back to the [aspect ratios](/guidelines/2x-grid/overview/#aspect-ratio)\nsection on the 2x Grid Overview tab to see a list of the most commonly used\naspect ratios across the Carbon ecosystem. We understand that it’s not always\npossible for every image or container to be one of these sizes. However it’s\nimportant to use them to set the foundation of your layouts, especially in the\ncase of same size tiles.\n\n![aspect ratio example](images/usage/07_using_aspect_ratios.png)\n\n<Caption>\n  An example of using aspect ratios to drive the layout of your dashboards or\n  catalogs\n</Caption>\n\n#### Adaptive aspect ratios\n\nBear in mind that tile aspect ratios can change adaptively when the breakpoint\nchanges.\n\n![Adaptive aspect ratios example](images/usage/08_adaptive_aspect_ratios.png)\n\n<Caption>\n  When a commonly used aspect ratio is not appropriate for the layout, it’s also\n  fine to choose a less common aspect ratio or a{' '}\n  <a href=\"/guidelines/2x-grid/overview/#scaling-multiple\">scaling multiple</a>.\n</Caption>\n\n### Contrast\n\nContrast is an effective way to distinguish content pieces, engage users,\nhighlight important information, and express IBM’s brand elements. Juxtaposing\ntext with images, pairing UI components and elements of different sizes,\nstrategic use of the grid, negative space and asymmetry are some of the ways in\nwhich you can introduce contrast to a layout.\n\n![assymetrical layouts example](images/usage/09_assymetrical_layouts.png)\n\n<Caption>\n  Despite the technically “correct” use of the 2x grid below, the content on the\n  right becomes overwhelming for the user. By presenting all of the information\n  at the same scale, the user has no sense of hierarchy to orient them.\n</Caption>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Combine related information and content types, then space appropriately to highlight dependencies or similarities.\n\">\n\n![](images/usage/10_Contrast_do_a.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Without proper organization of content and use of space to separate elements, it is difficult to perceive how one content piece relates to another.\">\n\n![](images/usage/11_Contrast_dont_a.png)\n\n  </DoDont>\n</DoDontRow>\n\n## Grid influencers\n\nAs we mentioned on the Overview page, a grid influencer is a component that\ncondenses a page’s underlying grid when it is incorporated into a UI. It can\neither appear on the page as the result of a user action, or be part of the\nproduct’s page.\n\nWhereas the basic page grid would simply react to the product’s breakpoints—grid\ninfluencers affect the grid and its columns, which scale and resize the page\ncontent, anytime they are present or engaged.\n\nThis\n[grid influencer content](https://pages.github.ibm.com/cdai-design/pal/patterns/grid-influencers/usage/)\noriginated on the Carbon for IBM Products PAL, but we wanted to bring the\nrelevant portions of it here to reach the maximum audience.\n\n### Usage\n\nThere are two main use cases where the grid may be influenced by content: left\nnavigation and slide-in side panels.\n\n#### Left-hand navigation\n\nThe vast majority of IBM products use the grid influencer variant of the\n[Carbon UI Shell](/components/UI-shell-left-panel/usage/), making the left-hand\nnavigation panel the most common example of a grid influencer in our ecosystem.\nWhen opening and closing the left-hand navigation, the number of columns remains\nthe same but responds fluidly to the allotted space.\n\n<Video title=\"Usage\" vimeoId=\"363369752\" />\n\n#### Slide-in side panels\n\nSlide-in side panels are another example of a grid influencer. Slide-in side\npanels come into play when a user needs to reference the page along with the\npanel information to complete a task.\n\nSince these slide-in side panels were developed and maintained by Carbon for IBM\nProducts, please visit their site for more in-depth details on\n[side-panel sizes and best practices](https://pages.github.ibm.com/cdai-design/pal/components/side-panel/usage/)\n_(IBMers only)_.\n\n![side panel example](images/usage/13_grid_influencer_side_panel.png)\n\n<Caption>\n  Introducing a slide-in side panel re-sizes the page content, and reduces the\n  number of columns in the grid.\n</Caption>\n\n## Style models\n\nStyle models help designers by simplifying decisions around how foundational\ndesign elements should be used. For example, all pages on IBM.com and all\nscreens within IBM product use the [2x Grid](/guidelines/2x-grid/overview/), but\nthe 2x Grid supports a wide range of behaviors and usage. The 2x Grid can be\nleft aligned, centered or it can span the maximum width of the browser.\n\nThese design decisions should be made consistently based on content needs. Style\nmodels connect specific usage combinations to the kind of content they best\nserve.\n\nIn our models, the design elements included are:\n\n- Grid\n- [Screen regions](/guidelines/2x-grid/overview#screen-regions)\n- Key components (Masthead, Footer, and Product UI Shell)\n\nThe biggest differentiator between the style models is the grid. Specifically in\nhow the grid behaves above max breakpoint. Below is the 2x Grid at max\nbreakpoint (1584px or 99rem).\n\nHere is a list of recurring style models we have identified across our\necosystem:\n\n<div className={gridTable}>\n\n| Style models                 | Usage and examples                                                                                                                                                                                                                                                                                                                     |\n| ---------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Editorial model              | This default style model is the bread and butter of marketing pages, which represent the majority of IBM.com. The grid in this model centers content for comfortable browsing, and allows for a variety of expressive layouts. Some low-information density product screens, such as the Checkout application, can use this model too. |\n| Product and docs model       | For long-form content with deep organizational hierarchy, use the Product and docs model. It anticipates a left-hand navigational panel, and keeps content within a maximum width. Examples of this model include most of IBM product UI, IBM Docs, Cloud Docs, and this site documenting the design system guidance.                  |\n| High-density interface model | Sometimes every inch of the screen needs be used to display information and controls. Complex product interfaces, catalogs and data visualization dashboards typically fall into this category. This model uses the full width of the browser, so the bigger the screen, the more information the user will see.                       |\n\n</div>\n\n<Row>\n  <Column colLg={2} colMd={2} colSm={4}>\n\n**2x Grid at Max breakpoint**\n\n</Column>\n  <Column colLg={10} colMd={6} colSm={4}>\n\n![](images/usage/14_2x_grid_max.png)\n\n<Caption>\n  Once the screen is wider than the max breakpoint, the margins (highlighted in\n  dark blue below) can expand, or columns can be added as needed in increments\n  of two.\n</Caption>\n\n  </Column>\n</Row>\n<Row>\n  <Column colLg={2} colMd={2} colSm={4}>\n\n**Editorial model**\n\n</Column>\n  <Column colLg={10} colMd={6} colSm={4}>\n\n![](images/usage/15_editorial_style_model.png)\n\n<Caption>Max width maintained, grid is centered in the browser</Caption>\n\n  </Column>\n</Row>\n<Row>\n  <Column colLg={2} colMd={2} colSm={4}>\n\n**Product and docs model**\n\n</Column>\n  <Column colLg={10} colMd={6} colSm={4}>\n\n![](images/usage/16_product_style_model.png)\n\n<Caption>Max width maintained, grid is left-aligned in the browser</Caption>\n\n  </Column>\n</Row>\n<Row>\n  <Column colLg={2} colMd={2} colSm={4}>\n\n**High-density interface model**\n\n</Column>\n  <Column colLg={10} colMd={6} colSm={4}>\n\n![](images/usage/17_hi_density_style_model.png)\n\n<Caption>Full width, add columns as needed in increments of 2</Caption>\n\n  </Column>\n</Row>\n\n### Style models in IBM.com (editorial)\n\nThis difference in grid ripples through everything on page. Below is a visual\noverview of how the IBM.com masthead and footer will behave above max\nbreakpoints in the appropriate style models. Notice that marketing content on\nIBM.com uses the Editorial style model and that support documentation on IBM.com\nuses the Product and docs style model.\n\n<Row>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/18_dotcom_editorial_style_model.png)\n\n<Caption>The Editorial model in a marketing page on IBM.com.</Caption>\n\n  </Column>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/19_dotcom_docs_style_model.png)\n\n<Caption>\n  The Product and docs model in the Documentation section of IBM.com.\n</Caption>\n\n  </Column>\n</Row>\n<Row>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/20_dotcom_editorial_footer.png)\n\n<Caption>The footer for the Editorial model on IBM.com.</Caption>\n\n  </Column>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/21_dotcom_docs_footer.png)\n\n<Caption>The footer for the Product and docs model on IBM.com.</Caption>\n\n  </Column>\n</Row>\n\n### Style models in IBM Software (product)\n\nEditorial and product experiences overlap slightly in that they both can use the\nproduct & docs style model. However, only software UI uses the\n[grid influencer](#grid-influencers) variant of the Carbon UI Shell.\n\nIBM Products can also occasionally use the High-density interface model in order\nto maximize the use of screen space. By far the most prominent example of this\nto date in product is the Cloud Catalog.\n\n<Row>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/22_product_style_model.png)\n\n<Caption>\n  The Product and docs model in context in an IBM product screen.\n</Caption>\n\n  </Column>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/23_hi-density_style_model.png)\n\n<Caption>\n  The High-density interface model in context in the IBM Cloud catalog.\n</Caption>\n\n  </Column>\n</Row>\n\n## Gutter modes\n\nCarbon’s Figma templates have a 32px gutter by default, regardless of\nbreakpoint. The default gutter width is 32px because type blocks (within or\nwithout containers) never has less than a 32px gutter. For containers and\ncomponents, however, there are three different gutter structures: wide\n(default), narrow and condensed. These three gutter scenarios enable typographic\nalignment by allowing containers and certain components to “hang” into the\ngutter.\n\n<Row>\n  <Column colLg={4} colMd={2}>\n\n![](images/usage/24_wide_gutter_mode.png)\n\n<Caption>\n  Wide mode\n  <br /> 32px gutter\n\n</Caption>\n\n  </Column>\n  <Column colLg={4} colMd={2}>\n\n![](images/usage/25_narrow_gutter_mode.png)\n\n<Caption>\n  Narrow mode\n  <br /> 16px gutter\n\n</Caption>\n\n  </Column>\n  <Column colLg={4} colMd={2}>\n\n![](images/usage/26_condensed_gutter_mode.png)\n\n<Caption>\n  Condensed mode\n  <br /> 1px gutter\n\n</Caption>\n\n  </Column>\n</Row>\n\n### Wide gutter mode\n\nThis is Carbon’s default gutter mode, with 16 columns and 32px gutters. In the\nwide gutter mode, the container edge does not extend into the gutter, so the\ntype within the container does not sit on the columns.\n\n#### When to use:\n\nUse the wide gutter mode when you are dealing with separate pieces of\ninformation with separate destinations. This gutter mode is also good for\ntext-heavy situations, where maximum breathing room helps provide clarity and\nlegibility.\n\nFixed components with labels such as input fields and dropdowns MUST use the\nwide gutter mode. So if you’re laying out form fields, this is the gutter mode\nto use. One overarching rule, (applicable to each gutter mode) is that type\nnever hangs into the gutter. So we don’t want to push label type into the gutter\nin order to get field type to align to the columns.\n\n![](images/usage/27_wide_gutter_mode_example.png)\n\n<Caption>\n  Note: this page also includes a left-hand navigation panel in implementation,\n  but we’ve removed it for the simplicity of the example.\n</Caption>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do align type (outside of a container), components, and tiles to the columns.\">\n\n![](images/usage/28_wide_gutter_do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not take type off the column structure to achieve alignment.\">\n\n![](images/usage/29_wide_gutter_dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Narrow gutter mode\n\nThe narrow gutter mode is by far the most common choice in product\nimplementation. The intent here is simply to enable more typographic\nalignment—so the container, not the type, hangs 16px into the gutter. This\nallows headings and copy outside of containers to align with the copy within\ncontainers and components. This arrangement can easily be mirrored to\naccommodate languages that read right to left, like Arabic or Hebrew.\n\n#### When to use:\n\nUse the narrow gutter mode when you're dealing with separate pieces of\ninformation with separate destinations, but would like to save more real estate.\nThis gutter mode will give your compositions a sleeker look and maximize type\nalignment, within and without containers.\n\nAs mentioned above, fixed components with labels, such as input fields and\ndropdowns, should not hang into the gutter.\n\n![](images/usage/30_narrow_gutter_mode_example.png)\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do align components within containers flush to the columns.\n\">\n\n![](images/usage/31_narrow_gutter_do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not hang type into the gutter under any circumstances (note the tabs)\">\n\n![](images/usage/32_narrow_gutter_dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Condensed gutter mode\n\nIn order to emphasize the gutters, 1px borders that are darker than the\nbackground color (or lighter than the background color in the dark theme), must\nbe added to any tiles or cards. The borders add just enough clarity to the\ngutters to stand out, while still registering to the user as the background\ncolor. The token for these borders is the $border-subtle layer token.\n\n#### When to use:\n\nWhen you have separate pieces of information that form a larger picture, like a\ndashboard or an overview page, that’s a good time to use the condensed gutters.\nYou’ll also see this gutter mode in portals, resource tiles and other\nintroductory UI. See it in action on the\n[IBM Design Language homepage](https://www.ibm.com/design/language/).\n\nAs mentioned above, fixed components with labels, such as input fields and\ndropdowns, should never hang into the gutter.\n\n![](images/usage/33_condensed_gutter_mode_example.png)\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do keep all type (inside and outside containers) aligned with the column grid.\">\n\n![](images/usage/34_condensed_do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not hang type into the gutter under any circumstances.\">\n\n![](images/usage/35_condensed_dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n## Mixing gutter modes\n\n[Carbon’s Grid components](https://react.carbondesignsystem.com/?path=/story/elements-grid--default)\nnow use CSS Grid with the release of v11.\n\n### Nested grids (subgrid)\n\nGrid components can be nested within one another to achieve advanced layout\nconfigurations. When a grid is a child of another grid, the child will always be\nautomatically defined as a subgrid. Subgrids should always be contained within a\ncolumn to ensure that the column amount/definition is properly configured for\nthe subgrid to inherit. Additionally, wrapping subgrids in a column enables you\nto define responsive parameters for the column (sm, md, etc) that the subgrid\nwill also inherit and be bound to.\n\n![](images/usage/36_nested_example.png)\n\n<Caption>\n  Nesting grids allows items within a subgrid to be also aligned to the grid.\n</Caption>\n\n### Mix and match\n\nMixing gutter modes is going to be the rule rather than the exception on most\nplatforms—especially since our labeled components (input fields, dropdowns etc.)\nrequire a 32px gutter. For instance, in the text input component, the label text\ndoesn’t align to the input text. So basically, both the Narrow gutter mode and\nthe Condensed gutter mode need to be used in conjunction with the Wide gutter\nmode to accomodate some of our most commonly used components.\n\nWe’ve provided a couple of examples below and will keep adding helpful uses\ncases as we find them.\n\n![](images/usage/37_mixing_modes_example.png)\n\n## Using grids in Figma\n\nThere are several different ways to use grids to make layouts in Figma ranging\nfrom basic to more complex. We recommend that you use the Screen components\navailable in the Assets panel on the left side of your Figma workspace. These\nare especially handy because they also offer the grid influencer templates.\n\nOnce you choose either the Screen or Screen + Grid influencers component, just\ndrag it into your workspace and press control + G to toggle on the grid. Under\nthe Breakpoint property in the Screens section of the Feature panel (to the\nright) you can choose between the responsive breakpoint variants that Carbon\noffers.\n\nThere are of course, ways to get a lot fancier using Constraints and Auto Layout\nin conjunction with the Screen component, but we won’t get into that level of\ndetail here.\n\n![](images/usage/38_grids_in_figma.png)\n\n<Caption>Screen and Screen + Grid influencers components in Figma</Caption>\n","type":"Mdx","contentDigest":"b665954c6ab4452bd8da81cd59ea877b","owner":"gatsby-plugin-mdx","counter":4790},"frontmatter":{"title":"2x Grid","description":"The grid is the framework for all the visual elements and typography at IBM. It’s fundamental to everything we design.","tabs":["Overview","Usage","Code"]},"exports":{},"rawBody":"---\ntitle: 2x Grid\ndescription:\n  The grid is the framework for all the visual elements and typography at IBM.\n  It’s fundamental to everything we design.\ntabs: ['Overview', 'Usage', 'Code']\n---\n\nimport { IbmSecurity } from '@carbon/icons-react';\nimport { gridTable } from './Grid.module.scss';\n\n<PageDescription>\n\nYou’ve learned the grid fundamentals, now let’s put them together. A good layout\nrequires careful planning and use of composition, which relies on principles\nsuch as hierarchy, scale, proportion, contrast, harmony, rhythm, repetition, and\nmany more.\n\n</PageDescription>\n\n<InlineNotification>\n\nNote: Although Carbon is open source, much of our Pattern Asset Library (PAL)\ncontent is gated—so many of the links below can only be accessed by IBM\nemployees.\n\n</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>UI galleries</AnchorLink>\n  <AnchorLink>Fit for purpose</AnchorLink>\n  <AnchorLink>Content hierarchy</AnchorLink>\n  <AnchorLink>Continuity and contrast</AnchorLink>\n  <AnchorLink>Grid influencers</AnchorLink>\n  <AnchorLink>Style models</AnchorLink>\n  <AnchorLink>Gutter modes</AnchorLink>\n  <AnchorLink>Mixing gutter modes</AnchorLink>\n  <AnchorLink>Using grids in Figma</AnchorLink>\n</AnchorLinks>\n\n## UI galleries\n\nFor years, Carbon users have been asking for a gallery of product UI screens for\nreference and inspiration. There are several ongoing initiatives to catalog\nscreens and we’ll continue to add to this list as more come online.\n\n<Row className=\"resource-card-group\">\n  <Column colLg={4} colMd={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"UI screens (IBMers only)\"\n    title=\"Security\"\n    href=\"https://pages.github.ibm.com/security/security-design/department/tools-and-resources/visual-libraries/libraries/\"\n    >\n\n<IbmSecurity size={32} />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n## Fit for purpose\n\nOn every page there is a story that ends with a desired action–one that enables\na user to achieve a goal or reach an outcome. Proper layouts pull everything\ntogether to help users form a mental model of the story, identify relevant\ncontent, and pursue their objective.\n\nAlways start with the content and user goals. Consider the purpose of the\ncontent and the best type of experience to help the user reach their objective.\nFor instance, are you building a long-form reading experience or a multi-step,\ntask-based experience? Each type of experience and purpose will require a\ndifferent layout.\n\n## Content hierarchy\n\nHierarchy helps users (viewer, reader, audience) navigate complex concepts\nwithout getting confused or lost, and ultimately find what they are looking for.\nThoughtful application of type styles, components, and patterns will allow\ncontent to be communicated and prioritized in different ways. Pay attention also\nto the size and proximity of content pieces within a component and between\ncomponents.\n\n### Basic scaffolding\n\nIn the Overview section, we talked a bit about common screen regions—like the UI\nShell, the content area and dialogs. Now we also need to address several common\nlayout patterns within the content area in IBM products.\n\nThese repeatable structures lower the cognitive burden for users, by reinforcing\nkey alignments throughout the UI. Below are some examples of structural layout\nmodules that are used widely across products. For more detailed documentation\nabout structural layout modules, check out\n[IBM Product Layouts](https://pages.github.ibm.com/cdai-design/pal/layouts/library/)\non the Carbon for IBM Products PAL.\n\n![Grid scaffolding illustration](images/usage/01_basic_scaffolding.png)\n\n<Caption>\n  Although gutter width depends on the product, here are some common examples of\n  how product designers use a consistent leadspace size with the 2x Grid to\n  create four-column layout patterns that repeat throughout their products.\n</Caption>\n\n### Four columns\n\nThe four column layout is the backbone of most IBM experiences—not just the\nIBM.com pages. Software users also like more breathing room as they enter a\nproduct, along with consistent typographic alignments, as they navigate deeper.\nAs a result, IBM product UIs rely heavily on the four column structure to ease\nusers into denser content.\n\nEven though there are examples of two- and three-column arrangements in the\ndiagrams above, the type within them often still sits on four columns.\n\n![four column ui example](images/usage/02_four_column_UI.png)\n\n### Denser layouts\n\nYou can see the four column arrangement in denser layouts too. The leadspace\npattern also remains the same, giving users a familiar anchor. However the\ncontent has become a lot denser as other column configurations begin to emerge\non the fluid 2x grid. The fixed grid also comes into play here in the data\nvisualizations, where content is so dense that fixed spacers (i.e. the\n[mini unit grid](/guidelines/2x-grid/overview/#mini-unit)) need to be used\nrather than fluid columns.\n\n![denser layout example](images/usage/03_denser_layout_UI.png)\n\n### Layout modules and micro layouts\n\nAlthough Carbon React does not have coded layout modules in its library, the\n[Carbon for IBM Products library](https://v1-ibm-products.carbondesignsystem.com/?path=/story/overview-getting-started--page)\n_(IBMers only)_ does. These modules are helpful for reference, however they are\nstill in the process of being migrated to Carbon v11.\n\nLayout modules are coded combinations of components, spacing tokens, icons, and\ntype styles packaged as a single grid-aware, unit. The layout-module framework\nenables designers to build page layouts with greater rigor, quality, and\nconsistency. They are designed to work in tandem with other modules and Carbon\ncomponents so that they can be quickly arranged into layouts with the confidence\nthat they are consistent with all of our other pages.\n\nThese modules along with the overarching page scaffolding above, provide a great\nexample of how product designers should mix and match repeatable layout patterns\nat both the large and small scales throughout an experience.\n\n![layout modules example](images/usage/04_layout_modules.png)\n\n### Using odd column configurations\n\nThe 2x grid starts with 16 columns and encourages designers to divide by two as\ntheir content becomes more dense. However, many legacy products used a twelve\ncolumn grid and in turn, display content in groups of three instead of groups of\nfour.\n\nAlthough we highly recommend refactoring these UIs to take full advantage of the\nthe 2x grid, we realize that certain products will choose to keep their three\ncolumn scaffolding. So it’s important to note that this configuration can still\nbe achieved with the 2x grid package.\n\n![odd columns example](images/usage/05_odd_columns.png)\n\n## Continuity and contrast\n\nNo component exists on its own. Pay attention to how individual layout\ncomponents fit into the larger context of both the page type and the broader\nuser journey across the product. Pattern repetition where appropriate is\nessential to reduce cognitive load, however too much repetition, especially\ncoupled with lack of white space, can lead to monotony.\n\n### Continuity\n\n#### Thinking across an experience\n\nUnlike editorial experiences, products focus more on task completion and\ncontinuity across screens, rather than leading a user through stacked modules on\na single page. So common geometries and key alignments are especially important\nacross pages, not just down the scroll.\n\nThe Cloud team recently did an audit on type alignment in their product\n[leadspaces](<https://www.figma.com/proto/XHddusMshnOcHMWjxtoGrx/Cloud-PAL-Experimental-(Light)?page-id=80%3A124640&node-id=80-131354&viewport=4475%2C1436%2C0.29&scaling=min-zoom&starting-point-node-id=80%3A130876>)\n_(IBMers only)_ in order to streamline their experiences.\n\n![Continuity across screens example](images/usage/06_continuity_across_screens.png)\n\n<Caption>\n  Although the leadspace heights are changing, the typographic alignment from\n  the World overview page into the product keeps the user oriented.\n</Caption>\n\n#### Using Aspect ratios\n\nAspect ratios also ensure that there is a consistent visual flow as users move\nthrough a product. Although images are used much less frequently in products\nthan in digital experiences, aspect ratios come into play often in product with\nthe tile component, which is used frequently in catalogs and dashboards.\n\nRefer back to the [aspect ratios](/guidelines/2x-grid/overview/#aspect-ratio)\nsection on the 2x Grid Overview tab to see a list of the most commonly used\naspect ratios across the Carbon ecosystem. We understand that it’s not always\npossible for every image or container to be one of these sizes. However it’s\nimportant to use them to set the foundation of your layouts, especially in the\ncase of same size tiles.\n\n![aspect ratio example](images/usage/07_using_aspect_ratios.png)\n\n<Caption>\n  An example of using aspect ratios to drive the layout of your dashboards or\n  catalogs\n</Caption>\n\n#### Adaptive aspect ratios\n\nBear in mind that tile aspect ratios can change adaptively when the breakpoint\nchanges.\n\n![Adaptive aspect ratios example](images/usage/08_adaptive_aspect_ratios.png)\n\n<Caption>\n  When a commonly used aspect ratio is not appropriate for the layout, it’s also\n  fine to choose a less common aspect ratio or a{' '}\n  <a href=\"/guidelines/2x-grid/overview/#scaling-multiple\">scaling multiple</a>.\n</Caption>\n\n### Contrast\n\nContrast is an effective way to distinguish content pieces, engage users,\nhighlight important information, and express IBM’s brand elements. Juxtaposing\ntext with images, pairing UI components and elements of different sizes,\nstrategic use of the grid, negative space and asymmetry are some of the ways in\nwhich you can introduce contrast to a layout.\n\n![assymetrical layouts example](images/usage/09_assymetrical_layouts.png)\n\n<Caption>\n  Despite the technically “correct” use of the 2x grid below, the content on the\n  right becomes overwhelming for the user. By presenting all of the information\n  at the same scale, the user has no sense of hierarchy to orient them.\n</Caption>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Combine related information and content types, then space appropriately to highlight dependencies or similarities.\n\">\n\n![](images/usage/10_Contrast_do_a.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Without proper organization of content and use of space to separate elements, it is difficult to perceive how one content piece relates to another.\">\n\n![](images/usage/11_Contrast_dont_a.png)\n\n  </DoDont>\n</DoDontRow>\n\n## Grid influencers\n\nAs we mentioned on the Overview page, a grid influencer is a component that\ncondenses a page’s underlying grid when it is incorporated into a UI. It can\neither appear on the page as the result of a user action, or be part of the\nproduct’s page.\n\nWhereas the basic page grid would simply react to the product’s breakpoints—grid\ninfluencers affect the grid and its columns, which scale and resize the page\ncontent, anytime they are present or engaged.\n\nThis\n[grid influencer content](https://pages.github.ibm.com/cdai-design/pal/patterns/grid-influencers/usage/)\noriginated on the Carbon for IBM Products PAL, but we wanted to bring the\nrelevant portions of it here to reach the maximum audience.\n\n### Usage\n\nThere are two main use cases where the grid may be influenced by content: left\nnavigation and slide-in side panels.\n\n#### Left-hand navigation\n\nThe vast majority of IBM products use the grid influencer variant of the\n[Carbon UI Shell](/components/UI-shell-left-panel/usage/), making the left-hand\nnavigation panel the most common example of a grid influencer in our ecosystem.\nWhen opening and closing the left-hand navigation, the number of columns remains\nthe same but responds fluidly to the allotted space.\n\n<Video title=\"Usage\" vimeoId=\"363369752\" />\n\n#### Slide-in side panels\n\nSlide-in side panels are another example of a grid influencer. Slide-in side\npanels come into play when a user needs to reference the page along with the\npanel information to complete a task.\n\nSince these slide-in side panels were developed and maintained by Carbon for IBM\nProducts, please visit their site for more in-depth details on\n[side-panel sizes and best practices](https://pages.github.ibm.com/cdai-design/pal/components/side-panel/usage/)\n_(IBMers only)_.\n\n![side panel example](images/usage/13_grid_influencer_side_panel.png)\n\n<Caption>\n  Introducing a slide-in side panel re-sizes the page content, and reduces the\n  number of columns in the grid.\n</Caption>\n\n## Style models\n\nStyle models help designers by simplifying decisions around how foundational\ndesign elements should be used. For example, all pages on IBM.com and all\nscreens within IBM product use the [2x Grid](/guidelines/2x-grid/overview/), but\nthe 2x Grid supports a wide range of behaviors and usage. The 2x Grid can be\nleft aligned, centered or it can span the maximum width of the browser.\n\nThese design decisions should be made consistently based on content needs. Style\nmodels connect specific usage combinations to the kind of content they best\nserve.\n\nIn our models, the design elements included are:\n\n- Grid\n- [Screen regions](/guidelines/2x-grid/overview#screen-regions)\n- Key components (Masthead, Footer, and Product UI Shell)\n\nThe biggest differentiator between the style models is the grid. Specifically in\nhow the grid behaves above max breakpoint. Below is the 2x Grid at max\nbreakpoint (1584px or 99rem).\n\nHere is a list of recurring style models we have identified across our\necosystem:\n\n<div className={gridTable}>\n\n| Style models                 | Usage and examples                                                                                                                                                                                                                                                                                                                     |\n| ---------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Editorial model              | This default style model is the bread and butter of marketing pages, which represent the majority of IBM.com. The grid in this model centers content for comfortable browsing, and allows for a variety of expressive layouts. Some low-information density product screens, such as the Checkout application, can use this model too. |\n| Product and docs model       | For long-form content with deep organizational hierarchy, use the Product and docs model. It anticipates a left-hand navigational panel, and keeps content within a maximum width. Examples of this model include most of IBM product UI, IBM Docs, Cloud Docs, and this site documenting the design system guidance.                  |\n| High-density interface model | Sometimes every inch of the screen needs be used to display information and controls. Complex product interfaces, catalogs and data visualization dashboards typically fall into this category. This model uses the full width of the browser, so the bigger the screen, the more information the user will see.                       |\n\n</div>\n\n<Row>\n  <Column colLg={2} colMd={2} colSm={4}>\n\n**2x Grid at Max breakpoint**\n\n</Column>\n  <Column colLg={10} colMd={6} colSm={4}>\n\n![](images/usage/14_2x_grid_max.png)\n\n<Caption>\n  Once the screen is wider than the max breakpoint, the margins (highlighted in\n  dark blue below) can expand, or columns can be added as needed in increments\n  of two.\n</Caption>\n\n  </Column>\n</Row>\n<Row>\n  <Column colLg={2} colMd={2} colSm={4}>\n\n**Editorial model**\n\n</Column>\n  <Column colLg={10} colMd={6} colSm={4}>\n\n![](images/usage/15_editorial_style_model.png)\n\n<Caption>Max width maintained, grid is centered in the browser</Caption>\n\n  </Column>\n</Row>\n<Row>\n  <Column colLg={2} colMd={2} colSm={4}>\n\n**Product and docs model**\n\n</Column>\n  <Column colLg={10} colMd={6} colSm={4}>\n\n![](images/usage/16_product_style_model.png)\n\n<Caption>Max width maintained, grid is left-aligned in the browser</Caption>\n\n  </Column>\n</Row>\n<Row>\n  <Column colLg={2} colMd={2} colSm={4}>\n\n**High-density interface model**\n\n</Column>\n  <Column colLg={10} colMd={6} colSm={4}>\n\n![](images/usage/17_hi_density_style_model.png)\n\n<Caption>Full width, add columns as needed in increments of 2</Caption>\n\n  </Column>\n</Row>\n\n### Style models in IBM.com (editorial)\n\nThis difference in grid ripples through everything on page. Below is a visual\noverview of how the IBM.com masthead and footer will behave above max\nbreakpoints in the appropriate style models. Notice that marketing content on\nIBM.com uses the Editorial style model and that support documentation on IBM.com\nuses the Product and docs style model.\n\n<Row>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/18_dotcom_editorial_style_model.png)\n\n<Caption>The Editorial model in a marketing page on IBM.com.</Caption>\n\n  </Column>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/19_dotcom_docs_style_model.png)\n\n<Caption>\n  The Product and docs model in the Documentation section of IBM.com.\n</Caption>\n\n  </Column>\n</Row>\n<Row>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/20_dotcom_editorial_footer.png)\n\n<Caption>The footer for the Editorial model on IBM.com.</Caption>\n\n  </Column>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/21_dotcom_docs_footer.png)\n\n<Caption>The footer for the Product and docs model on IBM.com.</Caption>\n\n  </Column>\n</Row>\n\n### Style models in IBM Software (product)\n\nEditorial and product experiences overlap slightly in that they both can use the\nproduct & docs style model. However, only software UI uses the\n[grid influencer](#grid-influencers) variant of the Carbon UI Shell.\n\nIBM Products can also occasionally use the High-density interface model in order\nto maximize the use of screen space. By far the most prominent example of this\nto date in product is the Cloud Catalog.\n\n<Row>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/22_product_style_model.png)\n\n<Caption>\n  The Product and docs model in context in an IBM product screen.\n</Caption>\n\n  </Column>\n  <Column colLg={6} colMd={4}>\n\n![](images/usage/23_hi-density_style_model.png)\n\n<Caption>\n  The High-density interface model in context in the IBM Cloud catalog.\n</Caption>\n\n  </Column>\n</Row>\n\n## Gutter modes\n\nCarbon’s Figma templates have a 32px gutter by default, regardless of\nbreakpoint. The default gutter width is 32px because type blocks (within or\nwithout containers) never has less than a 32px gutter. For containers and\ncomponents, however, there are three different gutter structures: wide\n(default), narrow and condensed. These three gutter scenarios enable typographic\nalignment by allowing containers and certain components to “hang” into the\ngutter.\n\n<Row>\n  <Column colLg={4} colMd={2}>\n\n![](images/usage/24_wide_gutter_mode.png)\n\n<Caption>\n  Wide mode\n  <br /> 32px gutter\n\n</Caption>\n\n  </Column>\n  <Column colLg={4} colMd={2}>\n\n![](images/usage/25_narrow_gutter_mode.png)\n\n<Caption>\n  Narrow mode\n  <br /> 16px gutter\n\n</Caption>\n\n  </Column>\n  <Column colLg={4} colMd={2}>\n\n![](images/usage/26_condensed_gutter_mode.png)\n\n<Caption>\n  Condensed mode\n  <br /> 1px gutter\n\n</Caption>\n\n  </Column>\n</Row>\n\n### Wide gutter mode\n\nThis is Carbon’s default gutter mode, with 16 columns and 32px gutters. In the\nwide gutter mode, the container edge does not extend into the gutter, so the\ntype within the container does not sit on the columns.\n\n#### When to use:\n\nUse the wide gutter mode when you are dealing with separate pieces of\ninformation with separate destinations. This gutter mode is also good for\ntext-heavy situations, where maximum breathing room helps provide clarity and\nlegibility.\n\nFixed components with labels such as input fields and dropdowns MUST use the\nwide gutter mode. So if you’re laying out form fields, this is the gutter mode\nto use. One overarching rule, (applicable to each gutter mode) is that type\nnever hangs into the gutter. So we don’t want to push label type into the gutter\nin order to get field type to align to the columns.\n\n![](images/usage/27_wide_gutter_mode_example.png)\n\n<Caption>\n  Note: this page also includes a left-hand navigation panel in implementation,\n  but we’ve removed it for the simplicity of the example.\n</Caption>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do align type (outside of a container), components, and tiles to the columns.\">\n\n![](images/usage/28_wide_gutter_do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not take type off the column structure to achieve alignment.\">\n\n![](images/usage/29_wide_gutter_dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Narrow gutter mode\n\nThe narrow gutter mode is by far the most common choice in product\nimplementation. The intent here is simply to enable more typographic\nalignment—so the container, not the type, hangs 16px into the gutter. This\nallows headings and copy outside of containers to align with the copy within\ncontainers and components. This arrangement can easily be mirrored to\naccommodate languages that read right to left, like Arabic or Hebrew.\n\n#### When to use:\n\nUse the narrow gutter mode when you're dealing with separate pieces of\ninformation with separate destinations, but would like to save more real estate.\nThis gutter mode will give your compositions a sleeker look and maximize type\nalignment, within and without containers.\n\nAs mentioned above, fixed components with labels, such as input fields and\ndropdowns, should not hang into the gutter.\n\n![](images/usage/30_narrow_gutter_mode_example.png)\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do align components within containers flush to the columns.\n\">\n\n![](images/usage/31_narrow_gutter_do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not hang type into the gutter under any circumstances (note the tabs)\">\n\n![](images/usage/32_narrow_gutter_dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Condensed gutter mode\n\nIn order to emphasize the gutters, 1px borders that are darker than the\nbackground color (or lighter than the background color in the dark theme), must\nbe added to any tiles or cards. The borders add just enough clarity to the\ngutters to stand out, while still registering to the user as the background\ncolor. The token for these borders is the $border-subtle layer token.\n\n#### When to use:\n\nWhen you have separate pieces of information that form a larger picture, like a\ndashboard or an overview page, that’s a good time to use the condensed gutters.\nYou’ll also see this gutter mode in portals, resource tiles and other\nintroductory UI. See it in action on the\n[IBM Design Language homepage](https://www.ibm.com/design/language/).\n\nAs mentioned above, fixed components with labels, such as input fields and\ndropdowns, should never hang into the gutter.\n\n![](images/usage/33_condensed_gutter_mode_example.png)\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do keep all type (inside and outside containers) aligned with the column grid.\">\n\n![](images/usage/34_condensed_do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not hang type into the gutter under any circumstances.\">\n\n![](images/usage/35_condensed_dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n## Mixing gutter modes\n\n[Carbon’s Grid components](https://react.carbondesignsystem.com/?path=/story/elements-grid--default)\nnow use CSS Grid with the release of v11.\n\n### Nested grids (subgrid)\n\nGrid components can be nested within one another to achieve advanced layout\nconfigurations. When a grid is a child of another grid, the child will always be\nautomatically defined as a subgrid. Subgrids should always be contained within a\ncolumn to ensure that the column amount/definition is properly configured for\nthe subgrid to inherit. Additionally, wrapping subgrids in a column enables you\nto define responsive parameters for the column (sm, md, etc) that the subgrid\nwill also inherit and be bound to.\n\n![](images/usage/36_nested_example.png)\n\n<Caption>\n  Nesting grids allows items within a subgrid to be also aligned to the grid.\n</Caption>\n\n### Mix and match\n\nMixing gutter modes is going to be the rule rather than the exception on most\nplatforms—especially since our labeled components (input fields, dropdowns etc.)\nrequire a 32px gutter. For instance, in the text input component, the label text\ndoesn’t align to the input text. So basically, both the Narrow gutter mode and\nthe Condensed gutter mode need to be used in conjunction with the Wide gutter\nmode to accomodate some of our most commonly used components.\n\nWe’ve provided a couple of examples below and will keep adding helpful uses\ncases as we find them.\n\n![](images/usage/37_mixing_modes_example.png)\n\n## Using grids in Figma\n\nThere are several different ways to use grids to make layouts in Figma ranging\nfrom basic to more complex. We recommend that you use the Screen components\navailable in the Assets panel on the left side of your Figma workspace. These\nare especially handy because they also offer the grid influencer templates.\n\nOnce you choose either the Screen or Screen + Grid influencers component, just\ndrag it into your workspace and press control + G to toggle on the grid. Under\nthe Breakpoint property in the Screens section of the Feature panel (to the\nright) you can choose between the responsive breakpoint variants that Carbon\noffers.\n\nThere are of course, ways to get a lot fancier using Constraints and Auto Layout\nin conjunction with the Screen component, but we won’t get into that level of\ndetail here.\n\n![](images/usage/38_grids_in_figma.png)\n\n<Caption>Screen and Screen + Grid influencers components in Figma</Caption>\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/guidelines/2x-grid/usage.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}