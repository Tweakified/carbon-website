{"componentChunkName":"component---src-pages-components-content-switcher-accessibility-mdx","path":"/components/content-switcher/accessibility/","result":{"pageContext":{"frontmatter":{"title":"Content switcher","description":"Content switchers manipulate the content shown following an exclusive or \"either/or\" pattern. It is used to toggle between two or more content sections within the same space on screen.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/content-switcher/accessibility.mdx","titleType":"prepend","MdxNode":{"id":"9f60daa5-42ea-5114-82da-fba33e77efe6","children":[],"parent":"06839bdc-cbe8-5a90-9548-5ec89c941fa3","internal":{"content":"---\ntitle: Content switcher\ndescription:\n  Content switchers manipulate the content shown following an exclusive or\n  \"either/or\" pattern. It is used to toggle between two or more content sections\n  within the same space on screen.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\nimport A11yStatus from 'components/A11yStatus';\n\nimport {\n  StructuredListWrapper,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListRow,\n  StructuredListInput,\n  StructuredListCell,\n  OrderedList,\n  ListItem,\n} from '@carbon/react';\n\n<PageDescription>\n\nDesign annotations are needed for specific instances shown below, but for the\nstandard content switcher component, Carbon already incorporates accessibility.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>What Carbon provides</AnchorLink>\n  <AnchorLink>Design recommendations</AnchorLink>\n  <AnchorLink>Development considerations</AnchorLink>\n</AnchorLinks>\n\n<A11yStatus components=\"Content switcher\" />\n\n## What Carbon provides\n\nCarbon bakes keyboard operation into its components, improving the experience of\nblind users and others who operate via the keyboard. Carbon incorporates many\nother accessibility considerations, some of which are described below.\n\n### Keyboard interactions\n\nLike tabs, content switchers can be automatic or manual. In both instances, the\ncontent switcher takes one tab stop, and arrow keys are used to navigate between\ncontent tabs.\n\n<Row>\n<Column colLg={8}>\n\n![A user tabs to the content switcher then changes the selection with left and right arrow keys. Pressing tab again moves focus to a link inside the section's content.](images/content-switcher-accessibility-1.png)\n\n<Caption>\n  Manual and automatic content switchers have the same basic keyboard\n  interaction.\n</Caption>\n\n</Column>\n</Row>\n\nAutomatic and manual switchers differ in how they are activated. The following\nillustration shows what will happen for each variant when a right arrow key is\npressed with the All content tab selected and focused.\n\nFor automatic switchers, focus and selection are synchronized. When the user\narrows to a tab, it is selected and the content section under the switcher is\nupdated in real time.\n\nManual switchers allow the user to arrow between the content tabs without\nupdating the content section underneath. When the user right arrows, the All\ncontent tab remains selected while focus moves to the Read tab. In order to\nselect the Read tab (and update the content section under the switcher) the user\nwould press `Enter` or `Space`.\n\n<Row>\n<Column colLg={8}>\n\n![Two variants of a content switcher with tabs called All, Read and Unread. In the first, the Read tab is selected and focused. In the second the All tab is selected and the Read tab has a focus indicator](images/content-switcher-accessibility-2.png)\n\n<Caption>\n  Arrows keys alone update the selected tab in an automatic content switcher.\n  The Space and Enter keys are used to select a content tab after arrowing to it\n  in a manual variant.\n</Caption>\n\n</Column>\n</Row>\n\n## Design recommendations\n\n### Indicate which variant to implement\n\nThe automatic and manual switchers are visually indistinguishable in a\nwireframe, so designers should annotate which variant the team has decided to\nimplement. Since the choice largely concerns technical considerations about\npotential latency when updating the content section’s information, architects or\ndevelopers should be involved in the discussion.\n\n<Row>\n<Column colLg={8}>\n\n![Two content switchers, one with a pink annotation reading \"auto\", the other with an annotation \"manual\"](images/content-switcher-accessibility-3.png)\n\n<Caption>\n  Annotate whether the switcher should be implemented as automatic or manual.\n</Caption>\n\n</Column>\n</Row>\n\n## Development considerations\n\nKeep these considerations in mind if you are modifying Carbon or creating a\ncustom component.\n\n- The Content switcher is implemented as a `tablist`, with each content tab\n  implemented as a `<button>` with a role of `tab`.\n- The selected content tab has attributes `aria-selected=\"true\"` and\n  `tabindex=\"0\"`. All other tabs have these attribute values set to `\"false\"`\n  and `\"-1\"`.\n- See the\n  [ARIA authoring practices guidance for tabs](https://w3c.github.io/aria-practices/#tabpanel)\n  for more considerations.\n- For accessibility considerations for manual content switchers, see\n  [Deciding when to make selection automatically follow focus](https://w3c.github.io/aria-practices/#kbd_selection_follows_focus).\n","type":"Mdx","contentDigest":"88fb9499ff33c12416b1f929dc25a8c4","owner":"gatsby-plugin-mdx","counter":4449},"frontmatter":{"title":"Content switcher","description":"Content switchers manipulate the content shown following an exclusive or \"either/or\" pattern. It is used to toggle between two or more content sections within the same space on screen.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Content switcher\ndescription:\n  Content switchers manipulate the content shown following an exclusive or\n  \"either/or\" pattern. It is used to toggle between two or more content sections\n  within the same space on screen.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\nimport A11yStatus from 'components/A11yStatus';\n\nimport {\n  StructuredListWrapper,\n  StructuredListHead,\n  StructuredListBody,\n  StructuredListRow,\n  StructuredListInput,\n  StructuredListCell,\n  OrderedList,\n  ListItem,\n} from '@carbon/react';\n\n<PageDescription>\n\nDesign annotations are needed for specific instances shown below, but for the\nstandard content switcher component, Carbon already incorporates accessibility.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>What Carbon provides</AnchorLink>\n  <AnchorLink>Design recommendations</AnchorLink>\n  <AnchorLink>Development considerations</AnchorLink>\n</AnchorLinks>\n\n<A11yStatus components=\"Content switcher\" />\n\n## What Carbon provides\n\nCarbon bakes keyboard operation into its components, improving the experience of\nblind users and others who operate via the keyboard. Carbon incorporates many\nother accessibility considerations, some of which are described below.\n\n### Keyboard interactions\n\nLike tabs, content switchers can be automatic or manual. In both instances, the\ncontent switcher takes one tab stop, and arrow keys are used to navigate between\ncontent tabs.\n\n<Row>\n<Column colLg={8}>\n\n![A user tabs to the content switcher then changes the selection with left and right arrow keys. Pressing tab again moves focus to a link inside the section's content.](images/content-switcher-accessibility-1.png)\n\n<Caption>\n  Manual and automatic content switchers have the same basic keyboard\n  interaction.\n</Caption>\n\n</Column>\n</Row>\n\nAutomatic and manual switchers differ in how they are activated. The following\nillustration shows what will happen for each variant when a right arrow key is\npressed with the All content tab selected and focused.\n\nFor automatic switchers, focus and selection are synchronized. When the user\narrows to a tab, it is selected and the content section under the switcher is\nupdated in real time.\n\nManual switchers allow the user to arrow between the content tabs without\nupdating the content section underneath. When the user right arrows, the All\ncontent tab remains selected while focus moves to the Read tab. In order to\nselect the Read tab (and update the content section under the switcher) the user\nwould press `Enter` or `Space`.\n\n<Row>\n<Column colLg={8}>\n\n![Two variants of a content switcher with tabs called All, Read and Unread. In the first, the Read tab is selected and focused. In the second the All tab is selected and the Read tab has a focus indicator](images/content-switcher-accessibility-2.png)\n\n<Caption>\n  Arrows keys alone update the selected tab in an automatic content switcher.\n  The Space and Enter keys are used to select a content tab after arrowing to it\n  in a manual variant.\n</Caption>\n\n</Column>\n</Row>\n\n## Design recommendations\n\n### Indicate which variant to implement\n\nThe automatic and manual switchers are visually indistinguishable in a\nwireframe, so designers should annotate which variant the team has decided to\nimplement. Since the choice largely concerns technical considerations about\npotential latency when updating the content section’s information, architects or\ndevelopers should be involved in the discussion.\n\n<Row>\n<Column colLg={8}>\n\n![Two content switchers, one with a pink annotation reading \"auto\", the other with an annotation \"manual\"](images/content-switcher-accessibility-3.png)\n\n<Caption>\n  Annotate whether the switcher should be implemented as automatic or manual.\n</Caption>\n\n</Column>\n</Row>\n\n## Development considerations\n\nKeep these considerations in mind if you are modifying Carbon or creating a\ncustom component.\n\n- The Content switcher is implemented as a `tablist`, with each content tab\n  implemented as a `<button>` with a role of `tab`.\n- The selected content tab has attributes `aria-selected=\"true\"` and\n  `tabindex=\"0\"`. All other tabs have these attribute values set to `\"false\"`\n  and `\"-1\"`.\n- See the\n  [ARIA authoring practices guidance for tabs](https://w3c.github.io/aria-practices/#tabpanel)\n  for more considerations.\n- For accessibility considerations for manual content switchers, see\n  [Deciding when to make selection automatically follow focus](https://w3c.github.io/aria-practices/#kbd_selection_follows_focus).\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/components/content-switcher/accessibility.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}