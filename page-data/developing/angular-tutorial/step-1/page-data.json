{"componentChunkName":"component---src-pages-developing-angular-tutorial-step-1-mdx","path":"/developing/angular-tutorial/step-1/","result":{"pageContext":{"frontmatter":{"title":"1. Installing Carbon","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up"]},"relativePagePath":"/developing/angular-tutorial/step-1.mdx","titleType":"prepend","MdxNode":{"id":"08bd00f4-5b23-5894-b075-fda86a87c1f1","children":[],"parent":"4aabceae-feb7-5267-8485-7ca69dcc3a24","internal":{"content":"---\ntitle: 1. Installing Carbon\ntabs:\n  ['Overview', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Wrapping up']\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nStarting with the Carbon Angular, there are two ways to begin working with\nCarbon components. By the end, these two methods will produce the same result.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Prerequisites</AnchorLink>\n<AnchorLink>Install Angular CLI</AnchorLink>\n<AnchorLink>Create an Angular App</AnchorLink>\n<AnchorLink>Install Carbon</AnchorLink>\n<AnchorLink>Run the app</AnchorLink>\n<AnchorLink>Add UI Shell</AnchorLink>\n<AnchorLink>Create pages</AnchorLink>\n<AnchorLink>Add routing</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n## Preview\n\nA [preview](https://angular-step-2-carbon-tutorial.netlify.com) of what you will\nbuild:\n\n<Preview\n  height=\"200\"\n  title=\"Carbon Angular Tutorial Step 1\"\n  src=\"https://angular-step-2-carbon-tutorial.netlify.com\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen={true}\n/>\n\n<InlineNotification>\n\n**Note:** If you get lint errors when you copy the code from the snippets, run\n`ng lint --fix` to fix them.\n\n</InlineNotification>\n\n## Prerequisites\n\n### Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nthat we’ll use as a starting point for each step.\n\n### Fork\n\nTo begin, fork\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nusing your GitHub account.\n\n### Clone\n\nGo to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory.\n\n```bash\ngit clone [your fork SSH/HTTPS]\ncd carbon-tutorial-angular\n```\n\n### Add upstream remote\n\nAdd a remote called `upstream` so we can eventually submit a pull request once\nyou have completed this tutorial step.\n\n##### SSH:\n\n```bash\ngit remote add upstream git@github.com:carbon-design-system/carbon-tutorial-angular.git\n```\n\nOr, if you prefer to use HTTPS instead of SSH with your remotes:\n\n##### HTTPS:\n\n```bash\ngit remote add upstream https://github.com/carbon-design-system/carbon-tutorial-angular.git\n```\n\nVerify that your forked repository remotes are correct:\n\n```bash\ngit remote -v\n```\n\nYour terminal should output something like this:\n\n```bash\norigin\t[your forked repo] (fetch)\norigin\t[your forked repo] (push)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-angular.git (fetch)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-angular.git (push)\n```\n\n### Branch\n\nNow that we have our repository set up, let's check out the branch for this\ntutorial step's starting point. Run the two commands:\n\n```bash\ngit fetch upstream\ngit checkout -b angular-step-1 upstream/angular-step-1\n```\n\n### Install Angular CLI\n\nSince we are starting from scratch, we need to first install Angular CLI.\nCurrently you need to install Angular CLI Version 8.x to work through this\ntutorial.\n\n```bash\nnpm install -g @angular/cli\n```\n\n<InlineNotification>\n\n**Note:** If you are using macOS you might need to execute as a `sudo` command.\n\n</InlineNotification>\n\n### Create an Angular App\n\nNow that we have our environment set up, starting a new Angular app is easy! If\nyou haven't set up the environment yet, please do so using the steps provided in\nPrerequisites (above). We will be using the Angular CLI to create and generate\nour components. It can also generate services, router, components, and\ndirectives.\n\nTo create a new Angular project with Angular CLI, just run:\n\n```bash\nng new carbon-angular-tutorial\n```\n\nThis will create the new project within the current directory. Make sure you do\nthis within the cloned fork of the project. When you get prompted, enter the\nfollowing.\n\n```bash\n? Would you like to add Angular routing? Yes\n? Which stylesheet format would you like to use? SCSS\n```\n\nThis command will install the Angular app with all the configurations needed.\nWithin the project folder `carbon-angular-tutorial`, the `src` directory should\nhave the following structure:\n\n```bash\ncarbon-angular-tutorial\n...\n  ├── src\n    ├── app\n    │   ├── app-routing.module.ts\n    │   ├── app.component.html\n    │   ├── app.component.scss\n    │   ├── app.component.spec.ts\n    │   ├── app.component.ts\n    │   └── app.module.ts\n    ├── assets\n    ├── environments\n    │   ├── environment.prod.ts\n    │   └── environment.ts\n    ├── favicon.ico\n    ├── index.html\n    ├── main.ts\n    ├── polyfills.ts\n    ├── styles.scss\n    └── test.ts\n```\n\n### Install Carbon\n\nEven though we installed some dependencies while creating the new app, we've yet\nto install the Carbon packages.\n\n- `carbon-components` - Component styles\n- `carbon-components-angular` - Angular components\n- `@carbon/icons` - Carbon icons\n\n```bash\nnpm install carbon-components carbon-components-angular @carbon/icons\n```\n\n#### Import carbon-components styles\n\nIn `src/styles.scss`, import the Carbon styles by adding the following to the\ntop of the file:\n\n```scss path=src/styles.scss\n@import '~carbon-components/scss/globals/scss/styles';\n```\n\n### Run the app\n\nNow we can run our app for a quick preview inside the browser.\n\n```bash\nnpm start\n```\n\nYour app should now be running with the message:\n`** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **`\n\nBefore we start adding components we want to start with an empty project, so\ndelete everything in `app.component.html` except for the `router-outler`. We\nwill also have to delete the test that was associated with this code. So in\n`app.component.spec.ts`, delete the `should render title` and\n`should have as title 'carbon-angular-tutorial'` test.\n\n### Add UI Shell\n\nNext, we're going to create an Angular component called `Header` to use with the\nUI Shell Carbon component. Using Angular CLI we will create this component\ninside the `src/app` directory.\n\n```bash\nng g component header --lint-fix\n```\n\n##### Folder structure\n\n```bash\nsrc/app/header\n├── header.component.html\n├── header.component.scss\n├── header.component.spec.ts\n└── header.component.ts\n```\n\n#### Import UI Shell\n\nNext we'll import our Carbon UI Shell components into `app.module.ts`,\n`app.component.spec.ts` and `header.component.spec.ts`. Set up the file like so:\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\n\n// carbon-components-angular default imports\nimport { UIShellModule, IconModule } from 'carbon-components-angular';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    UIShellModule,\n    IconModule\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/app.component.spec.ts,src/app/header/header.component.spec.ts\nimport { UIShellModule } from 'carbon-components-angular/ui-shell/ui-shell.module';\n```\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/app.component.spec.ts,src/app/header/header.component.spec.ts\nTestBed.configureTestingModule({\n  declarations: [HeaderComponent],\n  imports: [UIShellModule]\n});\n```\n<!-- prettier-ignore-end -->\n\n<InlineNotification>\n\n**Note:** You can find a description of the different components used in UI\nShell in our\n[carbon-components-angular](https://github.com/IBM/carbon-components-angular/tree/master/src/ui-shell)\npackage.\n\n</InlineNotification>\n\n#### Import and register icons\n\nNow let’s import the icons from our `@carbon/icons` package. To improve tree\nshaking & keep the size of our app small, import only the required icons. To do\nso, import `Notification20`, `UserAvatar20`, and `AppSwitcher20` in\n`app.module.ts`.\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/header/app.modules.ts\nimport Notification20 from '@carbon/icons/es/notification/20';\nimport UserAvatar20 from '@carbon/icons/es/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons/es/app-switcher/20';\n```\n<!-- prettier-ignore-end -->\n\nNow you need to register the icon via `IconService` that also needs to be\nimported from `carbon-components-angular` module. After importing IconService\nyou need to inject it in component constructor and us it in OnInit life cycle\ncomponent hook. There are 2 methods for icon registration `.register()` which\naccepts only one icon and `.registerAll()` which accepts array of icons. As we\nare going to use more than one icon we are going to use the later method as\nbelow.\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/header/header.component.ts\nimport { IconService } from \"carbon-components-angular\";\n...\n\nconstructor(protected iconService: IconService) {}\n\n  ngOnInit() {\n    this.iconService.registerAll([Notification20]);\n  }\n```\n<!-- prettier-ignore-end -->\n\nNext step is to import the `IconModule` in the `AppModule` module where the\n`HeaderComponent` is declared.\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/header/header.component.ts\nimport { IconModule } from \"carbon-components-angular\";\n...\n\nimports: [\n  ...\n  IconModule\n]\n```\n<!-- prettier-ignore-end -->\n\nNow the icon is ready to be used in template code. Template in\n`header.component.html` should look like this:\n\n<!-- prettier-ignore-start -->\n```html path=src/app/header/header.component.html\n<ibm-header name=\"Carbon Tutorial Angular\">\n  <ibm-header-navigation ariaLabel=\"Carbon Tutorial Angular\">\n    <ibm-header-item href=\"/repos\">Repositories</ibm-header-item>\n  </ibm-header-navigation>\n  <ibm-header-global>\n    <ibm-header-action title=\"action\">\n      <svg ibmIcon=\"notification\" size=\"20\"></svg>\n    </ibm-header-action>\n    <ibm-header-action title=\"action\">\n      <svg ibmIcon=\"user--avatar\" size=\"20\"></svg>\n    </ibm-header-action>\n    <ibm-header-action title=\"action\">\n      <svg ibmIcon=\"app-switcher\" size=\"20\"></svg>\n    </ibm-header-action>\n  </ibm-header-global>\n</ibm-header>\n```\n<!-- prettier-ignore-end -->\n\nNotice that the icon names are the same as their file path. This how the\ndirective queries the service for the icon.\n\nNext import the header component in `app.component.spec.ts` and add the\ncomponent in `app.component.html`\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/app.component.spec.ts\nimport { HeaderComponent } from './header/header.component';\n```\n<!-- prettier-ignore-end -->\n\n```javascript path=src/app/app.component.spec.ts\ndeclarations: [HeaderComponent];\n```\n\n```html path=src/app/app.component.html\n<app-header></app-header>\n<main class=\"cds--content\">\n  <router-outlet></router-outlet>\n</main>\n```\n\nLet's add some padding to the top of the document, so the content is below the\nheader. We are going to do this by using the `cds--header` class provided by\ncarbon. So in `header.component.ts` lets hostbind that class.\n\n```javascript\nimport { Component, HostBinding } from '@angular/core';\n  ...\n  @HostBinding('class.cds--header') headerClass = true;\n```\n\n### Create pages\n\nNext thing we need to do is create the files for our content. These files will\nbe located in the `app` folder inside of `src`. It should be a sibling of\n`header`.\n\nOur app will have two pages. First, we need a landing page. Go ahead and stop\nyour development server (with `CTRL-C`) and then:\n\n```bash\nng g module home --routing --lint-fix\nng g component home/landing-page --lint-fix\n```\n\n##### Folder structure\n\n```bash\nsrc/app/home\n├── landing-page\n│   ├── landing-page.component.html\n│   ├── landing-page.component.scss\n│   ├── landing-page.component.spec.ts\n│   └── landing-page.component.ts\n├── home-routing.module.ts\n└── home-page.module.ts\n```\n\nAnd a repo page:\n\n```bash\nng g module repositories --routing --lint-fix\nng g component repositories/repo-page --lint-fix\n```\n\n##### Folder structure\n\n```bash\nsrc/app/repositories\n├── repo-page\n│   ├── repo-page.component.html\n│   ├── repo-page.component.scss\n│   ├── repo-page.component.spec.ts\n│   └── repo-page.component.ts\n├── repositories-routing.module.ts\n└── repositories.module.ts\n```\n\nNow you can restart your server with `npm start`.\n\n### Add routing\n\nWe need to update routing functionality to enable the loading of `repositories`.\nInside `app-routing.module.ts` we'll add the following code in the routes array:\n\n```javascript path=src/app-routing.module.ts\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./home/home.module').then((m) => m.HomeModule),\n  },\n  {\n    path: 'repos',\n    loadChildren: () =>\n      import('./repositories/repositories.module').then(\n        (m) => m.RepositoriesModule\n      ),\n  },\n];\n```\n\nAnd modify the `NgModule` declaration to use the hash router:\n\n```javascript path=src/app-routing.module.ts\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\nAnd add routes for the landing and repo pages:\n\n```javascript path=src/app/home/home-routing.module.ts\nimport { LandingPageComponent } from './landing-page/landing-page.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LandingPageComponent,\n  },\n];\n```\n\n<!-- prettier-ignore-start -->\n\n```javascript path=src/app/repositories/repositories-routing.module.ts\nimport { RepoPageComponent } from './repo-page/repo-page.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RepoPageComponent\n  }\n];\n```\n\n<!-- prettier-ignore-end -->\n\nAfter that we need to do a couple quick fixes to the UI Shell to have it route\nto the repo page.\n\n```html path=src/app/header/header.component.html\n<ibm-header-item [route]=\"['/repos']\">Repositories</ibm-header-item>\n```\n\nYou should now have a working header that routes to the repos pages without full\npage reload!\n\n### Submit pull request\n\nWe're going to submit a pull request to verify completion of this tutorial step\nand demonstrate a couple related concepts.\n\n#### Continuous integration (CI) check\n\n<InlineNotification>\n\n**Note:** Before you run any tests, make sure that you are using ChromeHeadless\nin `karma.conf.js` instead of Chrome.\n\n</InlineNotification>\n\nWe have `lint` and `test` scripts defined in `package.json` that verify file\nformatting for files that have been touched since the last Git commit. You'd\ntypically also have that script run your test suite as part of your CI build. Go\nahead and make sure everything looks good with:\n\n```bash\nng lint --fix\nnpm run lint && npm test\n```\n\n<InlineNotification>\n\n**Note:** If this gives an error, it's likely that some of your source files are\nnot properly formatted.\n\n</InlineNotification>\n\n#### Git commit and push\n\nBefore we can create a pull request, we need to stage and commit all of our\nchanges:\n\n```bash\ngit add --all && git commit -m \"feat(tutorial): complete step 1\"\n```\n\nThen, push to your repository:\n\n```bash\ngit push origin angular-step-1\n```\n\n<InlineNotification>\n\n**Note:** If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n[create a personal access token for the command line](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line).\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If you receive a `non-fast-forward` error, it's likely that your\nforked repository is behind the original repository and needs updated. This can\nhappen if the tutorial was updated after you began working on it. To fix, run\n`git pull upstream angular-step-1` to merge the changes into your branch, then\nyou can try pushing again. Or, you can\n[manually merge](https://help.github.com/en/articles/syncing-a-fork) in the\nupstream changes.\n\n</InlineNotification>\n\n#### Pull request (PR)\n\nFinally, visit\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nto \"Compare & pull request\". In doing so, make sure that you are comparing to\n`angular-step-1` into `base: angular-step-1`. Take notice of the\n[Netlify](https://www.netlify.com) bot that deploys a preview of your PR every\ntime that you push new commits. These previews can be shared and viewed by\nanybody to assist the PR review process.\n\n<InlineNotification>\n\n**Note:** Your tutorial step will be automatically reviewed based on the status\nof your tests. Ensure that your tests pass when you submit your PR. Expect your\ntutorial step PRs to be reviewed by the Carbon team but not merged. We'll close\nyour PR so we can keep the repository's remote branches pristine and ready for\nthe next person!\n\n</InlineNotification>\n","type":"Mdx","contentDigest":"11456707698d493c810a9f921d9e3668","owner":"gatsby-plugin-mdx","counter":4691},"frontmatter":{"title":"1. Installing Carbon","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up"]},"exports":{},"rawBody":"---\ntitle: 1. Installing Carbon\ntabs:\n  ['Overview', 'Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Wrapping up']\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nStarting with the Carbon Angular, there are two ways to begin working with\nCarbon components. By the end, these two methods will produce the same result.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Prerequisites</AnchorLink>\n<AnchorLink>Install Angular CLI</AnchorLink>\n<AnchorLink>Create an Angular App</AnchorLink>\n<AnchorLink>Install Carbon</AnchorLink>\n<AnchorLink>Run the app</AnchorLink>\n<AnchorLink>Add UI Shell</AnchorLink>\n<AnchorLink>Create pages</AnchorLink>\n<AnchorLink>Add routing</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n## Preview\n\nA [preview](https://angular-step-2-carbon-tutorial.netlify.com) of what you will\nbuild:\n\n<Preview\n  height=\"200\"\n  title=\"Carbon Angular Tutorial Step 1\"\n  src=\"https://angular-step-2-carbon-tutorial.netlify.com\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen={true}\n/>\n\n<InlineNotification>\n\n**Note:** If you get lint errors when you copy the code from the snippets, run\n`ng lint --fix` to fix them.\n\n</InlineNotification>\n\n## Prerequisites\n\n### Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nthat we’ll use as a starting point for each step.\n\n### Fork\n\nTo begin, fork\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nusing your GitHub account.\n\n### Clone\n\nGo to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory.\n\n```bash\ngit clone [your fork SSH/HTTPS]\ncd carbon-tutorial-angular\n```\n\n### Add upstream remote\n\nAdd a remote called `upstream` so we can eventually submit a pull request once\nyou have completed this tutorial step.\n\n##### SSH:\n\n```bash\ngit remote add upstream git@github.com:carbon-design-system/carbon-tutorial-angular.git\n```\n\nOr, if you prefer to use HTTPS instead of SSH with your remotes:\n\n##### HTTPS:\n\n```bash\ngit remote add upstream https://github.com/carbon-design-system/carbon-tutorial-angular.git\n```\n\nVerify that your forked repository remotes are correct:\n\n```bash\ngit remote -v\n```\n\nYour terminal should output something like this:\n\n```bash\norigin\t[your forked repo] (fetch)\norigin\t[your forked repo] (push)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-angular.git (fetch)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-angular.git (push)\n```\n\n### Branch\n\nNow that we have our repository set up, let's check out the branch for this\ntutorial step's starting point. Run the two commands:\n\n```bash\ngit fetch upstream\ngit checkout -b angular-step-1 upstream/angular-step-1\n```\n\n### Install Angular CLI\n\nSince we are starting from scratch, we need to first install Angular CLI.\nCurrently you need to install Angular CLI Version 8.x to work through this\ntutorial.\n\n```bash\nnpm install -g @angular/cli\n```\n\n<InlineNotification>\n\n**Note:** If you are using macOS you might need to execute as a `sudo` command.\n\n</InlineNotification>\n\n### Create an Angular App\n\nNow that we have our environment set up, starting a new Angular app is easy! If\nyou haven't set up the environment yet, please do so using the steps provided in\nPrerequisites (above). We will be using the Angular CLI to create and generate\nour components. It can also generate services, router, components, and\ndirectives.\n\nTo create a new Angular project with Angular CLI, just run:\n\n```bash\nng new carbon-angular-tutorial\n```\n\nThis will create the new project within the current directory. Make sure you do\nthis within the cloned fork of the project. When you get prompted, enter the\nfollowing.\n\n```bash\n? Would you like to add Angular routing? Yes\n? Which stylesheet format would you like to use? SCSS\n```\n\nThis command will install the Angular app with all the configurations needed.\nWithin the project folder `carbon-angular-tutorial`, the `src` directory should\nhave the following structure:\n\n```bash\ncarbon-angular-tutorial\n...\n  ├── src\n    ├── app\n    │   ├── app-routing.module.ts\n    │   ├── app.component.html\n    │   ├── app.component.scss\n    │   ├── app.component.spec.ts\n    │   ├── app.component.ts\n    │   └── app.module.ts\n    ├── assets\n    ├── environments\n    │   ├── environment.prod.ts\n    │   └── environment.ts\n    ├── favicon.ico\n    ├── index.html\n    ├── main.ts\n    ├── polyfills.ts\n    ├── styles.scss\n    └── test.ts\n```\n\n### Install Carbon\n\nEven though we installed some dependencies while creating the new app, we've yet\nto install the Carbon packages.\n\n- `carbon-components` - Component styles\n- `carbon-components-angular` - Angular components\n- `@carbon/icons` - Carbon icons\n\n```bash\nnpm install carbon-components carbon-components-angular @carbon/icons\n```\n\n#### Import carbon-components styles\n\nIn `src/styles.scss`, import the Carbon styles by adding the following to the\ntop of the file:\n\n```scss path=src/styles.scss\n@import '~carbon-components/scss/globals/scss/styles';\n```\n\n### Run the app\n\nNow we can run our app for a quick preview inside the browser.\n\n```bash\nnpm start\n```\n\nYour app should now be running with the message:\n`** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **`\n\nBefore we start adding components we want to start with an empty project, so\ndelete everything in `app.component.html` except for the `router-outler`. We\nwill also have to delete the test that was associated with this code. So in\n`app.component.spec.ts`, delete the `should render title` and\n`should have as title 'carbon-angular-tutorial'` test.\n\n### Add UI Shell\n\nNext, we're going to create an Angular component called `Header` to use with the\nUI Shell Carbon component. Using Angular CLI we will create this component\ninside the `src/app` directory.\n\n```bash\nng g component header --lint-fix\n```\n\n##### Folder structure\n\n```bash\nsrc/app/header\n├── header.component.html\n├── header.component.scss\n├── header.component.spec.ts\n└── header.component.ts\n```\n\n#### Import UI Shell\n\nNext we'll import our Carbon UI Shell components into `app.module.ts`,\n`app.component.spec.ts` and `header.component.spec.ts`. Set up the file like so:\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\n\n// carbon-components-angular default imports\nimport { UIShellModule, IconModule } from 'carbon-components-angular';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    UIShellModule,\n    IconModule\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/app.component.spec.ts,src/app/header/header.component.spec.ts\nimport { UIShellModule } from 'carbon-components-angular/ui-shell/ui-shell.module';\n```\n<!-- prettier-ignore-end -->\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/app.component.spec.ts,src/app/header/header.component.spec.ts\nTestBed.configureTestingModule({\n  declarations: [HeaderComponent],\n  imports: [UIShellModule]\n});\n```\n<!-- prettier-ignore-end -->\n\n<InlineNotification>\n\n**Note:** You can find a description of the different components used in UI\nShell in our\n[carbon-components-angular](https://github.com/IBM/carbon-components-angular/tree/master/src/ui-shell)\npackage.\n\n</InlineNotification>\n\n#### Import and register icons\n\nNow let’s import the icons from our `@carbon/icons` package. To improve tree\nshaking & keep the size of our app small, import only the required icons. To do\nso, import `Notification20`, `UserAvatar20`, and `AppSwitcher20` in\n`app.module.ts`.\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/header/app.modules.ts\nimport Notification20 from '@carbon/icons/es/notification/20';\nimport UserAvatar20 from '@carbon/icons/es/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons/es/app-switcher/20';\n```\n<!-- prettier-ignore-end -->\n\nNow you need to register the icon via `IconService` that also needs to be\nimported from `carbon-components-angular` module. After importing IconService\nyou need to inject it in component constructor and us it in OnInit life cycle\ncomponent hook. There are 2 methods for icon registration `.register()` which\naccepts only one icon and `.registerAll()` which accepts array of icons. As we\nare going to use more than one icon we are going to use the later method as\nbelow.\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/header/header.component.ts\nimport { IconService } from \"carbon-components-angular\";\n...\n\nconstructor(protected iconService: IconService) {}\n\n  ngOnInit() {\n    this.iconService.registerAll([Notification20]);\n  }\n```\n<!-- prettier-ignore-end -->\n\nNext step is to import the `IconModule` in the `AppModule` module where the\n`HeaderComponent` is declared.\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/header/header.component.ts\nimport { IconModule } from \"carbon-components-angular\";\n...\n\nimports: [\n  ...\n  IconModule\n]\n```\n<!-- prettier-ignore-end -->\n\nNow the icon is ready to be used in template code. Template in\n`header.component.html` should look like this:\n\n<!-- prettier-ignore-start -->\n```html path=src/app/header/header.component.html\n<ibm-header name=\"Carbon Tutorial Angular\">\n  <ibm-header-navigation ariaLabel=\"Carbon Tutorial Angular\">\n    <ibm-header-item href=\"/repos\">Repositories</ibm-header-item>\n  </ibm-header-navigation>\n  <ibm-header-global>\n    <ibm-header-action title=\"action\">\n      <svg ibmIcon=\"notification\" size=\"20\"></svg>\n    </ibm-header-action>\n    <ibm-header-action title=\"action\">\n      <svg ibmIcon=\"user--avatar\" size=\"20\"></svg>\n    </ibm-header-action>\n    <ibm-header-action title=\"action\">\n      <svg ibmIcon=\"app-switcher\" size=\"20\"></svg>\n    </ibm-header-action>\n  </ibm-header-global>\n</ibm-header>\n```\n<!-- prettier-ignore-end -->\n\nNotice that the icon names are the same as their file path. This how the\ndirective queries the service for the icon.\n\nNext import the header component in `app.component.spec.ts` and add the\ncomponent in `app.component.html`\n\n<!-- prettier-ignore-start -->\n```javascript path=src/app/app.component.spec.ts\nimport { HeaderComponent } from './header/header.component';\n```\n<!-- prettier-ignore-end -->\n\n```javascript path=src/app/app.component.spec.ts\ndeclarations: [HeaderComponent];\n```\n\n```html path=src/app/app.component.html\n<app-header></app-header>\n<main class=\"cds--content\">\n  <router-outlet></router-outlet>\n</main>\n```\n\nLet's add some padding to the top of the document, so the content is below the\nheader. We are going to do this by using the `cds--header` class provided by\ncarbon. So in `header.component.ts` lets hostbind that class.\n\n```javascript\nimport { Component, HostBinding } from '@angular/core';\n  ...\n  @HostBinding('class.cds--header') headerClass = true;\n```\n\n### Create pages\n\nNext thing we need to do is create the files for our content. These files will\nbe located in the `app` folder inside of `src`. It should be a sibling of\n`header`.\n\nOur app will have two pages. First, we need a landing page. Go ahead and stop\nyour development server (with `CTRL-C`) and then:\n\n```bash\nng g module home --routing --lint-fix\nng g component home/landing-page --lint-fix\n```\n\n##### Folder structure\n\n```bash\nsrc/app/home\n├── landing-page\n│   ├── landing-page.component.html\n│   ├── landing-page.component.scss\n│   ├── landing-page.component.spec.ts\n│   └── landing-page.component.ts\n├── home-routing.module.ts\n└── home-page.module.ts\n```\n\nAnd a repo page:\n\n```bash\nng g module repositories --routing --lint-fix\nng g component repositories/repo-page --lint-fix\n```\n\n##### Folder structure\n\n```bash\nsrc/app/repositories\n├── repo-page\n│   ├── repo-page.component.html\n│   ├── repo-page.component.scss\n│   ├── repo-page.component.spec.ts\n│   └── repo-page.component.ts\n├── repositories-routing.module.ts\n└── repositories.module.ts\n```\n\nNow you can restart your server with `npm start`.\n\n### Add routing\n\nWe need to update routing functionality to enable the loading of `repositories`.\nInside `app-routing.module.ts` we'll add the following code in the routes array:\n\n```javascript path=src/app-routing.module.ts\nconst routes: Routes = [\n  {\n    path: '',\n    loadChildren: () => import('./home/home.module').then((m) => m.HomeModule),\n  },\n  {\n    path: 'repos',\n    loadChildren: () =>\n      import('./repositories/repositories.module').then(\n        (m) => m.RepositoriesModule\n      ),\n  },\n];\n```\n\nAnd modify the `NgModule` declaration to use the hash router:\n\n```javascript path=src/app-routing.module.ts\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n```\n\nAnd add routes for the landing and repo pages:\n\n```javascript path=src/app/home/home-routing.module.ts\nimport { LandingPageComponent } from './landing-page/landing-page.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LandingPageComponent,\n  },\n];\n```\n\n<!-- prettier-ignore-start -->\n\n```javascript path=src/app/repositories/repositories-routing.module.ts\nimport { RepoPageComponent } from './repo-page/repo-page.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RepoPageComponent\n  }\n];\n```\n\n<!-- prettier-ignore-end -->\n\nAfter that we need to do a couple quick fixes to the UI Shell to have it route\nto the repo page.\n\n```html path=src/app/header/header.component.html\n<ibm-header-item [route]=\"['/repos']\">Repositories</ibm-header-item>\n```\n\nYou should now have a working header that routes to the repos pages without full\npage reload!\n\n### Submit pull request\n\nWe're going to submit a pull request to verify completion of this tutorial step\nand demonstrate a couple related concepts.\n\n#### Continuous integration (CI) check\n\n<InlineNotification>\n\n**Note:** Before you run any tests, make sure that you are using ChromeHeadless\nin `karma.conf.js` instead of Chrome.\n\n</InlineNotification>\n\nWe have `lint` and `test` scripts defined in `package.json` that verify file\nformatting for files that have been touched since the last Git commit. You'd\ntypically also have that script run your test suite as part of your CI build. Go\nahead and make sure everything looks good with:\n\n```bash\nng lint --fix\nnpm run lint && npm test\n```\n\n<InlineNotification>\n\n**Note:** If this gives an error, it's likely that some of your source files are\nnot properly formatted.\n\n</InlineNotification>\n\n#### Git commit and push\n\nBefore we can create a pull request, we need to stage and commit all of our\nchanges:\n\n```bash\ngit add --all && git commit -m \"feat(tutorial): complete step 1\"\n```\n\nThen, push to your repository:\n\n```bash\ngit push origin angular-step-1\n```\n\n<InlineNotification>\n\n**Note:** If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n[create a personal access token for the command line](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line).\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If you receive a `non-fast-forward` error, it's likely that your\nforked repository is behind the original repository and needs updated. This can\nhappen if the tutorial was updated after you began working on it. To fix, run\n`git pull upstream angular-step-1` to merge the changes into your branch, then\nyou can try pushing again. Or, you can\n[manually merge](https://help.github.com/en/articles/syncing-a-fork) in the\nupstream changes.\n\n</InlineNotification>\n\n#### Pull request (PR)\n\nFinally, visit\n[carbon-tutorial-angular](https://github.com/carbon-design-system/carbon-tutorial-angular)\nto \"Compare & pull request\". In doing so, make sure that you are comparing to\n`angular-step-1` into `base: angular-step-1`. Take notice of the\n[Netlify](https://www.netlify.com) bot that deploys a preview of your PR every\ntime that you push new commits. These previews can be shared and viewed by\nanybody to assist the PR review process.\n\n<InlineNotification>\n\n**Note:** Your tutorial step will be automatically reviewed based on the status\nof your tests. Ensure that your tests pass when you submit your PR. Expect your\ntutorial step PRs to be reviewed by the Carbon team but not merged. We'll close\nyour PR so we can keep the repository's remote branches pristine and ready for\nthe next person!\n\n</InlineNotification>\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/developing/angular-tutorial/step-1.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}