{"componentChunkName":"component---src-pages-guidelines-typography-code-mdx","path":"/guidelines/typography/code/","result":{"pageContext":{"frontmatter":{"label":"Type is a core part of any offering and critical to how brands express and communicate throughout any experience. Use the Carbon type package to leverage IBM Plex and create effective typography across your products more easily.","title":"Typography","description":"Typography can help create clear hierarchies, organize information, and guide users through a product or experience.","tabs":["Overview","Style strategies","Type sets","Code"]},"relativePagePath":"/guidelines/typography/code.mdx","titleType":"prepend","MdxNode":{"id":"04f24135-7085-5046-a555-bf787e3ee78b","children":[],"parent":"5249a3bb-d862-53d6-ad20-b52b486e093b","internal":{"content":"---\nlabel:\n  Type is a core part of any offering and critical to how brands express and\n  communicate throughout any experience. Use the Carbon type package to leverage\n  IBM Plex and create effective typography across your products more easily.\ntitle: Typography\ndescription:\n  Typography can help create clear hierarchies, organize information, and guide\n  users through a product or experience.\ntabs: ['Overview', 'Style strategies', 'Type sets', 'Code']\n---\n\n<PageDescription>\n\nType is a core part of any offering and critical to how brands express and\ncommunicate throughout any experience. Use the Carbon type package to leverage\nIBM Plex and create effective typography across your products more easily.\n\n</PageDescription>\n\n<InlineNotification>\n\nIf you're using `@carbon/react`, you probably don't need need to install the\ntype package separately. See our [Carbon React](/developing/frameworks/react/)\nguide to start building.\n\n</InlineNotification>\n\n## Usage\n\nThe `@carbon/type` package enables you to use typography from the IBM Design\nLanguage, including the type scale and fonts, along with typography design\ntokens from the Carbon Design System. It also comes with opinionated defaults\nfor type styles on common elements like `h1`, `h2`, `p`, etc.\n\nYou can use this package by writing the following:\n\n```scss\n@use '@carbon/type';\n// Include type reset\n@include type.reset();\n\n// Include default type styles, targets h1, h2, h3, etc\n@include type.default-type();\n\n// Include utility classes for type-related properties\n@include type.type-classes();\n\n.selector {\n  // Include a type style\n  @include type.style('productive-heading-01');\n}\n```\n\n### Type classes\n\nThe `type-classes` mixin will output a collection of utility CSS that you can\nuse to style a given HTML element with type-related styles.\n\n```scss\n@mixin type-classes;\n```\n\nIn particular, you can use the following classes:\n\n| Class                      | Description                                                                                                                                                                                                           |\n| :------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `.cds--type-{font-family}` | Set the `font-family` property for the given font. This can include `mono`, `sans`, `sans-condensed`, `sans-arabic`, `sans-devanagari`, `sans-hebrew`, `sans-jp`, `sans-kr`, `sans-thai-looped`, `sans-thai`, `serif` |\n| `.cds--type-{font-weight}` | Set the `font-weight` property                                                                                                                                                                                        |\n| `.cds--type-italic`        | Set the `font-style` property to `italic`                                                                                                                                                                             |\n| `.cds--type-{token}`       | Style the HTML element with the given type token                                                                                                                                                                      |\n\n### Type styles\n\nInstead of using a type scale, `@carbon/type` provides tokens that represent\nwhat we call type styles. These tokens have a variety of properties for styling\nhow text is rendered on a page.\n\nYou can find a full reference of the type styles that are available on the\n[Carbon Design System website](https://carbondesignsystem.com/guidelines/typography/type-sets)\n.\n\nYou can include a token in your Sass file by writing:\n\n````scss\n@use '@carbon/type';\n\n@include type.type-style('productive-heading-01');\n```                                                                                                                                                              |\n\n### Reset\n\nAn optional type reset is provided under the `type.reset()` mixin. You can\ninclude this mixin by writing the following in your Sass file:\n\n```scss\n@use '@carbon/type';\n\n@include type.reset();\n````\n\nThis reset sets some top-level properties on `html` and `body`, namely\n`font-size`, `font-family`, and some `text-rendering` options. We also map the\n`strong` tag to the semibold font weight.\n\n### Type scale\n\nA type scale is provided through the `$type-scale` variable and corresponding\n`type-scale` function and mixin. However, for specifying type styles, the\nrecommendation is to use [type styles](#type-styles) .\n\nIf you are looking to use the type scale, you can include all the scale-related\nutilities and variables by writing the following in your Sass file:\n\n```scss\n@use '@carbon/type';\n```\n\nYou can access a specific step in the type scale by using the `type-scale`\nfunction:\n\n```scss\n@use '@carbon/type';\n\n.my-selector {\n  font-size: type.type-scale(1);\n}\n```\n\n## Resources\n\n<Row className=\"resource-card-group\">\n  <Column colMd={4} colLg={4} noGutterSm>\n    <ResourceCard\n      subTitle=\"Carbon type package\"\n      href=\"https://github.com/carbon-design-system/carbon/blob/v10/packages/type\"\n    >\n\n<MdxIcon name=\"bee\" />\n\n  </ResourceCard>\n  </Column>\n  <Column colMd={4} colLg={4} noGutterSm>\n    <ResourceCard\n      subTitle=\"Type package demo\"\n      href=\"https://carbon-elements.netlify.app/type/examples/preview/\"\n    >\n\n<MdxIcon name=\"bee\" />\n\n  </ResourceCard>\n  </Column>\n</Row>\n","type":"Mdx","contentDigest":"15165e4f5ea2bbeeef9b00dd1a81a0a9","owner":"gatsby-plugin-mdx","counter":4940},"frontmatter":{"label":"Type is a core part of any offering and critical to how brands express and communicate throughout any experience. Use the Carbon type package to leverage IBM Plex and create effective typography across your products more easily.","title":"Typography","description":"Typography can help create clear hierarchies, organize information, and guide users through a product or experience.","tabs":["Overview","Style strategies","Type sets","Code"]},"exports":{},"rawBody":"---\nlabel:\n  Type is a core part of any offering and critical to how brands express and\n  communicate throughout any experience. Use the Carbon type package to leverage\n  IBM Plex and create effective typography across your products more easily.\ntitle: Typography\ndescription:\n  Typography can help create clear hierarchies, organize information, and guide\n  users through a product or experience.\ntabs: ['Overview', 'Style strategies', 'Type sets', 'Code']\n---\n\n<PageDescription>\n\nType is a core part of any offering and critical to how brands express and\ncommunicate throughout any experience. Use the Carbon type package to leverage\nIBM Plex and create effective typography across your products more easily.\n\n</PageDescription>\n\n<InlineNotification>\n\nIf you're using `@carbon/react`, you probably don't need need to install the\ntype package separately. See our [Carbon React](/developing/frameworks/react/)\nguide to start building.\n\n</InlineNotification>\n\n## Usage\n\nThe `@carbon/type` package enables you to use typography from the IBM Design\nLanguage, including the type scale and fonts, along with typography design\ntokens from the Carbon Design System. It also comes with opinionated defaults\nfor type styles on common elements like `h1`, `h2`, `p`, etc.\n\nYou can use this package by writing the following:\n\n```scss\n@use '@carbon/type';\n// Include type reset\n@include type.reset();\n\n// Include default type styles, targets h1, h2, h3, etc\n@include type.default-type();\n\n// Include utility classes for type-related properties\n@include type.type-classes();\n\n.selector {\n  // Include a type style\n  @include type.style('productive-heading-01');\n}\n```\n\n### Type classes\n\nThe `type-classes` mixin will output a collection of utility CSS that you can\nuse to style a given HTML element with type-related styles.\n\n```scss\n@mixin type-classes;\n```\n\nIn particular, you can use the following classes:\n\n| Class                      | Description                                                                                                                                                                                                           |\n| :------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `.cds--type-{font-family}` | Set the `font-family` property for the given font. This can include `mono`, `sans`, `sans-condensed`, `sans-arabic`, `sans-devanagari`, `sans-hebrew`, `sans-jp`, `sans-kr`, `sans-thai-looped`, `sans-thai`, `serif` |\n| `.cds--type-{font-weight}` | Set the `font-weight` property                                                                                                                                                                                        |\n| `.cds--type-italic`        | Set the `font-style` property to `italic`                                                                                                                                                                             |\n| `.cds--type-{token}`       | Style the HTML element with the given type token                                                                                                                                                                      |\n\n### Type styles\n\nInstead of using a type scale, `@carbon/type` provides tokens that represent\nwhat we call type styles. These tokens have a variety of properties for styling\nhow text is rendered on a page.\n\nYou can find a full reference of the type styles that are available on the\n[Carbon Design System website](https://carbondesignsystem.com/guidelines/typography/type-sets)\n.\n\nYou can include a token in your Sass file by writing:\n\n````scss\n@use '@carbon/type';\n\n@include type.type-style('productive-heading-01');\n```                                                                                                                                                              |\n\n### Reset\n\nAn optional type reset is provided under the `type.reset()` mixin. You can\ninclude this mixin by writing the following in your Sass file:\n\n```scss\n@use '@carbon/type';\n\n@include type.reset();\n````\n\nThis reset sets some top-level properties on `html` and `body`, namely\n`font-size`, `font-family`, and some `text-rendering` options. We also map the\n`strong` tag to the semibold font weight.\n\n### Type scale\n\nA type scale is provided through the `$type-scale` variable and corresponding\n`type-scale` function and mixin. However, for specifying type styles, the\nrecommendation is to use [type styles](#type-styles) .\n\nIf you are looking to use the type scale, you can include all the scale-related\nutilities and variables by writing the following in your Sass file:\n\n```scss\n@use '@carbon/type';\n```\n\nYou can access a specific step in the type scale by using the `type-scale`\nfunction:\n\n```scss\n@use '@carbon/type';\n\n.my-selector {\n  font-size: type.type-scale(1);\n}\n```\n\n## Resources\n\n<Row className=\"resource-card-group\">\n  <Column colMd={4} colLg={4} noGutterSm>\n    <ResourceCard\n      subTitle=\"Carbon type package\"\n      href=\"https://github.com/carbon-design-system/carbon/blob/v10/packages/type\"\n    >\n\n<MdxIcon name=\"bee\" />\n\n  </ResourceCard>\n  </Column>\n  <Column colMd={4} colLg={4} noGutterSm>\n    <ResourceCard\n      subTitle=\"Type package demo\"\n      href=\"https://carbon-elements.netlify.app/type/examples/preview/\"\n    >\n\n<MdxIcon name=\"bee\" />\n\n  </ResourceCard>\n  </Column>\n</Row>\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/guidelines/typography/code.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}