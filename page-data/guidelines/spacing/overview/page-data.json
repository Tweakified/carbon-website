{"componentChunkName":"component---src-pages-guidelines-spacing-overview-mdx","path":"/guidelines/spacing/overview/","result":{"pageContext":{"frontmatter":{"label":"Spacing is an important — and often overlooked — part of visual design. Carbon takes a lot of the guesswork out of spacing to help designers deliver clear, functional layouts.","title":"Spacing","description":"Spacing is an important — and often overlooked — part of visual design. Carbon takes a lot of the guesswork out of spacing to help designers deliver clear, functional layouts.","tabs":["Overview","Code"]},"relativePagePath":"/guidelines/spacing/overview.mdx","titleType":"prepend","MdxNode":{"id":"2d527af4-91b9-53ac-9bd2-81de3c83a05a","children":[],"parent":"34dbfa48-b623-5908-adb5-25eaaa65ea4b","internal":{"content":"---\nlabel:\n  Spacing is an important — and often overlooked — part of visual design. Carbon\n  takes a lot of the guesswork out of spacing to help designers deliver clear,\n  functional layouts.\ntitle: Spacing\ndescription:\n  Spacing is an important — and often overlooked — part of visual design. Carbon\n  takes a lot of the guesswork out of spacing to help designers deliver clear,\n  functional layouts.\ntabs: ['Overview', 'Code']\n---\n\n<PageDescription>\n\nSpacing is an important — and often overlooked — part of product design. Carbon\nprovides tokens and other utilities to take the guesswork out of spacing and\nhelp deliver clear, functional layouts\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Spacing</AnchorLink>\n<AnchorLink>Stacking</AnchorLink>\n<AnchorLink>Designing with space</AnchorLink>\n<AnchorLink>FAQ</AnchorLink>\n\n</AnchorLinks>\n\n## Introduction\n\nSpacing is the negative area between elements and components. It is commonly\ncontrolled in code with `margin` and `padding`. Carbon offers several methods\nsuch as tokens and layout components to make implementing spacing in product\neasier and more consistent.\n\n## Spacing\n\nThe Carbon spacing scale complements the 2x Grid and typography scale by using\nmultiples of two, four, and eight. It includes both small increments needed to\ncreate appropriate spatial relationships for detail-level designs as well as\nlarger increments used to control the density of a design. Each level of the\nspacing scale has its own token. Spacing tokens can be used inside of components\nfor building and between components for layout spacing.\n\n### Spacing scale\n\nUse the spacing scale when building individual components. It includes small\nincrements needed to create appropriate spatial relationships for detail-level\ndesigns. This scale is applied and used within all Carbon components.\n\n<div className=\"spacing-table\">\n\n| Token         | rem   | px  | Example                                       |\n| ------------- | ----- | --- | --------------------------------------------- |\n| `$spacing-01` | 0.125 | 2   | ![spacing-3xs example](images/spacing-01.svg) |\n| `$spacing-02` | 0.25  | 4   | ![spacing-2xs example](images/spacing-02.svg) |\n| `$spacing-03` | 0.5   | 8   | ![spacing-xs example](images/spacing-03.svg)  |\n| `$spacing-04` | 0.75  | 12  | ![spacing-sm example](images/spacing-04.svg)  |\n| `$spacing-05` | 1     | 16  | ![spacing-md example](images/spacing-05.svg)  |\n| `$spacing-06` | 1.5   | 24  | ![spacing-lg example](images/spacing-06.svg)  |\n| `$spacing-07` | 2     | 32  | ![spacing-xl example](images/spacing-07.svg)  |\n| `$spacing-08` | 2.5   | 40  | ![spacing-2xl example](images/spacing-08.svg) |\n| `$spacing-09` | 3     | 48  | ![spacing-3xl example](images/spacing-09.svg) |\n| `$spacing-10` | 4     | 64  | ![spacing-4xl example](images/spacing-10.svg) |\n| `$spacing-11` | 5     | 80  | ![spacing-5xl example](images/spacing-11.svg) |\n| `$spacing-12` | 6     | 96  | ![spacing-6xl example](images/spacing-12.svg) |\n| `$spacing-13` | 10    | 160 | ![spacing-7xl example](images/spacing-13.svg) |\n\n</div>\n\n<br />\n\n### Applying spacing\n\nThe spacing scale can be applied to `margin` or `padding` properties, as well as\nto both vertical and horizontal edges. The token takes the place of the values\nnormally assigned to `margin` and `padding`. The following are all approved ways\nto syntactically apply Carbon spacing tokens:\n\n```css\nmargin: $spacing-03;\nmargin: $spacing-03 $spacing-01;\nmargin: $spacing-07 0 $spacing-04 0;\nmargin-right: $spacing-05;\npadding: $spacing-04;\npadding: $spacing-05 $spacing-03;\npadding: $spacing-07 $spacing-04 0 $spacing-04;\n```\n\n<Row>\n<Column colLg={8}>\n\n![Example of spacing tokens applied](images/spacing-1_revised.png)\n\n<Caption>Example of spacing tokens applied</Caption>\n\n</Column>\n</Row>\n\n### Other spacing options\n\nThere are a few other non-token methods that can be used for spacing elements.\nEach has its own unique use case.\n\n| Method   | Purpose                                                                                                                                                           |     |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | --- |\n| `center` | Used to fluidly center an element between two edges.                                                                                                              |     |\n| `auto`   | Used on one side of an element to allow undefined space to automatically grow and shrink according to screen size. Typically used for asymmetrical fluid spacing. |     |\n| `gutter` | Used to space items between the grid's 12 columns                                                                                                                 |     |\n\n## Stacking\n\nStacking is a form of spacing that creates equal distance between components or\na group of items. Carbon provides a stack component that uses the Carbon spacing\nscale to determine how much space there should be between items. The stack\ncomponent supports both horizontal and vertical orientations.\n\nThe Stack component is a useful layout utility in a component-based model. This\nallows components to not use margin and instead delegate the responsibility of\npositioning and layout to parent components. It also supports a custom `gap`\nproperty which will allow a user to provide a custom value for the gap of the\nlayout.\n\nFor more information, see the `Stack` component in\n[React storybook](https://react.carbondesignsystem.com/?path=/docs/layout-stack--overview).\n\n<Row>\n<Column colLg={8}>\n\n![Example of spacing tokens applied with the stack component](images/spacing-stack.png)\n\n<Caption>Example of spacing tokens applied with the stack component</Caption>\n\n</Column>\n</Row>\n\n## Designing with space\n\nEvery part of a UI should be intentional including the empty space between\nelements. The amount of space between items creates relationships and hierarchy.\n\n### Creating relationships\n\nElements in a design that are near each other are seen as being meaningfully\nrelated. As more space is added between elements, their perceived relationship\nweakens.\n\nPatterns created through spacing can also create relationships. Elements\narranged in the same spacing pattern are seen as related pieces that have equal\nweight.\n\nSpace can also be used to denote groups of associated information. This creates\ncontent sections on a page without having to use lines or other graphical\nelements as a divider.\n\n### Creating hierarchy\n\nElements that have more spacing around them tend to be perceived as higher in\nimportance than elements that have less space around them. Take this page for\ninstance. The top level headers have more space surrounding them giving them\nfocus and prominence. Then as the headers descend in importance they receive\nless space, signaling they are subordinate.\n\nElements that are set close to each other can be easily overlooked. Users may\nsee the grouping but not process each individual item. Therefore, if you have an\nelement or content of high importance on the page, consider giving it extra\nsurrounding space to help it attract focus.\n\n### White space\n\nEmpty space — also known as white space — is important in design. It can be used\nto break up sections on a page or to help create focus on certain element(s).\nWhite space helps with information processing; too much dense information can be\ndisorienting or overwhelming for a user. Sections of a UI are allowed to be\ndense, but the whole page should not be crowded; there should be white space to\nlet the user’s eye rest.\n\n## FAQ\n\n#### Are spacing increments outside of the scale allowed?\n\nThere are always exceptions to the rule, but deviating from the spacing scales\nshould be avoided whenever possible.\n\n#### Can I still use the Carbon grid for horizontal spacing?\n\nYes, in fact it's encouraged.\n\n#### Can I use percentages for spacing?\n\nPercentages like 50% (1/2) or 33% (1/3) are acceptable ways to divide a page.\nPercentages can all be used to control max and min widths.\n\n#### Are the spacing tokens responsive?\n\nNo, the tokens themselves do not change values based on the screen size.\nHowever, it is acceptable at page breakpoints to jump a step(s) on the spacing\nscale to fit spacing needs (i.e., at 1440 px `padding-right: $spacing-05` but at\nbreakpoint 768px `padding-right: $spacing-03`).\n","type":"Mdx","contentDigest":"20700c5525dfa9f86a20a19aad225bf5","owner":"gatsby-plugin-mdx","counter":4967},"frontmatter":{"label":"Spacing is an important — and often overlooked — part of visual design. Carbon takes a lot of the guesswork out of spacing to help designers deliver clear, functional layouts.","title":"Spacing","description":"Spacing is an important — and often overlooked — part of visual design. Carbon takes a lot of the guesswork out of spacing to help designers deliver clear, functional layouts.","tabs":["Overview","Code"]},"exports":{},"rawBody":"---\nlabel:\n  Spacing is an important — and often overlooked — part of visual design. Carbon\n  takes a lot of the guesswork out of spacing to help designers deliver clear,\n  functional layouts.\ntitle: Spacing\ndescription:\n  Spacing is an important — and often overlooked — part of visual design. Carbon\n  takes a lot of the guesswork out of spacing to help designers deliver clear,\n  functional layouts.\ntabs: ['Overview', 'Code']\n---\n\n<PageDescription>\n\nSpacing is an important — and often overlooked — part of product design. Carbon\nprovides tokens and other utilities to take the guesswork out of spacing and\nhelp deliver clear, functional layouts\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Spacing</AnchorLink>\n<AnchorLink>Stacking</AnchorLink>\n<AnchorLink>Designing with space</AnchorLink>\n<AnchorLink>FAQ</AnchorLink>\n\n</AnchorLinks>\n\n## Introduction\n\nSpacing is the negative area between elements and components. It is commonly\ncontrolled in code with `margin` and `padding`. Carbon offers several methods\nsuch as tokens and layout components to make implementing spacing in product\neasier and more consistent.\n\n## Spacing\n\nThe Carbon spacing scale complements the 2x Grid and typography scale by using\nmultiples of two, four, and eight. It includes both small increments needed to\ncreate appropriate spatial relationships for detail-level designs as well as\nlarger increments used to control the density of a design. Each level of the\nspacing scale has its own token. Spacing tokens can be used inside of components\nfor building and between components for layout spacing.\n\n### Spacing scale\n\nUse the spacing scale when building individual components. It includes small\nincrements needed to create appropriate spatial relationships for detail-level\ndesigns. This scale is applied and used within all Carbon components.\n\n<div className=\"spacing-table\">\n\n| Token         | rem   | px  | Example                                       |\n| ------------- | ----- | --- | --------------------------------------------- |\n| `$spacing-01` | 0.125 | 2   | ![spacing-3xs example](images/spacing-01.svg) |\n| `$spacing-02` | 0.25  | 4   | ![spacing-2xs example](images/spacing-02.svg) |\n| `$spacing-03` | 0.5   | 8   | ![spacing-xs example](images/spacing-03.svg)  |\n| `$spacing-04` | 0.75  | 12  | ![spacing-sm example](images/spacing-04.svg)  |\n| `$spacing-05` | 1     | 16  | ![spacing-md example](images/spacing-05.svg)  |\n| `$spacing-06` | 1.5   | 24  | ![spacing-lg example](images/spacing-06.svg)  |\n| `$spacing-07` | 2     | 32  | ![spacing-xl example](images/spacing-07.svg)  |\n| `$spacing-08` | 2.5   | 40  | ![spacing-2xl example](images/spacing-08.svg) |\n| `$spacing-09` | 3     | 48  | ![spacing-3xl example](images/spacing-09.svg) |\n| `$spacing-10` | 4     | 64  | ![spacing-4xl example](images/spacing-10.svg) |\n| `$spacing-11` | 5     | 80  | ![spacing-5xl example](images/spacing-11.svg) |\n| `$spacing-12` | 6     | 96  | ![spacing-6xl example](images/spacing-12.svg) |\n| `$spacing-13` | 10    | 160 | ![spacing-7xl example](images/spacing-13.svg) |\n\n</div>\n\n<br />\n\n### Applying spacing\n\nThe spacing scale can be applied to `margin` or `padding` properties, as well as\nto both vertical and horizontal edges. The token takes the place of the values\nnormally assigned to `margin` and `padding`. The following are all approved ways\nto syntactically apply Carbon spacing tokens:\n\n```css\nmargin: $spacing-03;\nmargin: $spacing-03 $spacing-01;\nmargin: $spacing-07 0 $spacing-04 0;\nmargin-right: $spacing-05;\npadding: $spacing-04;\npadding: $spacing-05 $spacing-03;\npadding: $spacing-07 $spacing-04 0 $spacing-04;\n```\n\n<Row>\n<Column colLg={8}>\n\n![Example of spacing tokens applied](images/spacing-1_revised.png)\n\n<Caption>Example of spacing tokens applied</Caption>\n\n</Column>\n</Row>\n\n### Other spacing options\n\nThere are a few other non-token methods that can be used for spacing elements.\nEach has its own unique use case.\n\n| Method   | Purpose                                                                                                                                                           |     |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- | --- |\n| `center` | Used to fluidly center an element between two edges.                                                                                                              |     |\n| `auto`   | Used on one side of an element to allow undefined space to automatically grow and shrink according to screen size. Typically used for asymmetrical fluid spacing. |     |\n| `gutter` | Used to space items between the grid's 12 columns                                                                                                                 |     |\n\n## Stacking\n\nStacking is a form of spacing that creates equal distance between components or\na group of items. Carbon provides a stack component that uses the Carbon spacing\nscale to determine how much space there should be between items. The stack\ncomponent supports both horizontal and vertical orientations.\n\nThe Stack component is a useful layout utility in a component-based model. This\nallows components to not use margin and instead delegate the responsibility of\npositioning and layout to parent components. It also supports a custom `gap`\nproperty which will allow a user to provide a custom value for the gap of the\nlayout.\n\nFor more information, see the `Stack` component in\n[React storybook](https://react.carbondesignsystem.com/?path=/docs/layout-stack--overview).\n\n<Row>\n<Column colLg={8}>\n\n![Example of spacing tokens applied with the stack component](images/spacing-stack.png)\n\n<Caption>Example of spacing tokens applied with the stack component</Caption>\n\n</Column>\n</Row>\n\n## Designing with space\n\nEvery part of a UI should be intentional including the empty space between\nelements. The amount of space between items creates relationships and hierarchy.\n\n### Creating relationships\n\nElements in a design that are near each other are seen as being meaningfully\nrelated. As more space is added between elements, their perceived relationship\nweakens.\n\nPatterns created through spacing can also create relationships. Elements\narranged in the same spacing pattern are seen as related pieces that have equal\nweight.\n\nSpace can also be used to denote groups of associated information. This creates\ncontent sections on a page without having to use lines or other graphical\nelements as a divider.\n\n### Creating hierarchy\n\nElements that have more spacing around them tend to be perceived as higher in\nimportance than elements that have less space around them. Take this page for\ninstance. The top level headers have more space surrounding them giving them\nfocus and prominence. Then as the headers descend in importance they receive\nless space, signaling they are subordinate.\n\nElements that are set close to each other can be easily overlooked. Users may\nsee the grouping but not process each individual item. Therefore, if you have an\nelement or content of high importance on the page, consider giving it extra\nsurrounding space to help it attract focus.\n\n### White space\n\nEmpty space — also known as white space — is important in design. It can be used\nto break up sections on a page or to help create focus on certain element(s).\nWhite space helps with information processing; too much dense information can be\ndisorienting or overwhelming for a user. Sections of a UI are allowed to be\ndense, but the whole page should not be crowded; there should be white space to\nlet the user’s eye rest.\n\n## FAQ\n\n#### Are spacing increments outside of the scale allowed?\n\nThere are always exceptions to the rule, but deviating from the spacing scales\nshould be avoided whenever possible.\n\n#### Can I still use the Carbon grid for horizontal spacing?\n\nYes, in fact it's encouraged.\n\n#### Can I use percentages for spacing?\n\nPercentages like 50% (1/2) or 33% (1/3) are acceptable ways to divide a page.\nPercentages can all be used to control max and min widths.\n\n#### Are the spacing tokens responsive?\n\nNo, the tokens themselves do not change values based on the screen size.\nHowever, it is acceptable at page breakpoints to jump a step(s) on the spacing\nscale to fit spacing needs (i.e., at 1440 px `padding-right: $spacing-05` but at\nbreakpoint 768px `padding-right: $spacing-03`).\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/guidelines/spacing/overview.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}