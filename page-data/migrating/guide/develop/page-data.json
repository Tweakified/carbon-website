{"componentChunkName":"component---src-pages-migrating-guide-develop-mdx","path":"/migrating/guide/develop/","result":{"pageContext":{"frontmatter":{"title":"Guide","description":"This guide includes everything you need to migrate your offering from v10 to v11 of Carbon.","tabs":["Overview","Design","Develop"]},"relativePagePath":"/migrating/guide/develop.mdx","titleType":"prepend","MdxNode":{"id":"62679931-0962-5f96-9e11-3480f242b214","children":[],"parent":"3e1035a9-69dd-5afc-90b3-4cc516ca5e43","internal":{"content":"---\ntitle: Guide\ndescription:\n  This guide includes everything you need to migrate your offering from v10 to\n  v11 of Carbon.\ntabs: ['Overview', 'Design', 'Develop']\n---\n\nimport { Tag } from '@carbon/react';\n\n<PageDescription>\n\nStep-by-step guide to updating your code from Carbon v10 to v11.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Migrating a React app or library</AnchorLink>\n<AnchorLink>Migrating an app or library using just styles</AnchorLink>\n<AnchorLink>Migrating carbon-icons</AnchorLink>\n<AnchorLink>Migrating Carbon elements</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nThis guide helps you update your project to Carbon v11. It is broken into\nsections based on how you are using Carbon in your project today. For most teams\nusing Carbon, you'll want to use the\n[Migrating a React app](#migrating-a-react-app) section.\n\nOne of the biggest changes to Carbon in v11 is that we moved to dedicated\npackages under the `@carbon` scope. What this means for you is that if you were\npreviously using the following packages:\n\n- `carbon-components`\n- `carbon-components-react`\n- `carbon-icons`\n- `@carbon/icons-react`\n\nYou can access all of this work under one single package: `@carbon/react`. This\npackage will re-export all of the styles and icons for Carbon all in one\ndependency.\n\nIf you were previously using `carbon-components`, the styles from this package\nare available under `@carbon/styles`. They are also re-exported through\n`@carbon/react`\n\nBoth the `carbon-components` and `carbon-components-react` packages will stick\naround in v11 but they are only re-exports of `@carbon/styles` and\n`@carbon/react` respectively.\n\n## Migrating a React app or library\n\nStarting in v11, the React components for Carbon live in the `@carbon/react`\npackage.\n\nThe `@carbon/react` package also includes the styles for Carbon along with\nicons.\n\n### Step 1: Install @carbon/react\n\nTo get started, uninstall the following packages if they exist in your project:\n\n- `carbon-components`\n- `carbon-components-react`\n- `carbon-icons`\n- `@carbon/icons-react`\n\n```bash\nnpm uninstall carbon-components carbon-components-react carbon-icons @carbon/icons-react\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove carbon-components carbon-components-react carbon-icons @carbon/icons-react\n```\n\nNext, install the `@carbon/react` package:\n\n```bash\nnpm install @carbon/react\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add @carbon/react\n```\n\nNow that you've removed the old packages and brought in the new ones, run the\ncodemod below to fix your pathing.\n\n```bash\nnpx @carbon/upgrade migrate update-carbon-components-react-import-to-scoped --write\n```\n\nAfter running the command, your code should start looking like this:\n\n```jsx\n// Before\nimport { Accordion, AccordionItem } from 'carbon-components-react';\n// After\nimport { Accordion, AccordionItem } from '@carbon/react';\n```\n\n<InlineNotification>\n\nFor full details, including options and commands availabe when using the\n`@carbon/upgrade` CLI, see the\n[package documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade).\n\n</InlineNotification>\n\n### Step 2: Install Dart Sass\n\nIf you were previously importing styles from `carbon-components`, you can now\nimport styles directly from `@carbon/react` or the `@carbon/react/scss` folder.\n\nBefore you're able to bring in these styles, you'll need to make sure your\nproject is setup to use Dart Sass. Starting in v11, Carbon styles requires Dart\nSass through the `sass` package in order to compile. This change comes from our\nmigration to Sass Modules in order to improve our compilation times and overall\nproject structure.\n\nFirst, let's remove `node-sass` from your project. If you don't have\n`node-sass`, no worries, just skip down and begin adding `sass`.\n\n```bash\nnpm uninstall node-sass\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove node-sass\n```\n\nNow, let's install `sass`:\n\n```bash\nnpm install sass --save-dev\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add sass --dev\n```\n\nOnce you have Dart Sass installed, it's important that you configure your\nproject to support resolving imports in Sass from `node_modules`. Typically,\nthis means adding `node_modules` to your `includePaths` config for Sass in your\nbundler or toolchain of choice.\n\nTo learn more about how to configure your specific toolchain to support this,\nread the documentation for configuration\n[here](https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration).\nWe also have published a guide over on\n[Medium](https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a)\nto help out with common problems that come from this migration.\n\n<Row className=\"resource-card-group\">\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Sass Configuration\"\n    href=\"https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"One quick way to get ready for Carbon v11\"\n    href=\"https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"medium\" />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n### Step 3: Update style import paths\n\nNow, open your project's root stylesheet to make the following changes:\n\n```diff\n- @import 'carbon-components/scss/globals/scss/styles.scss';\n+ @use '@carbon/react';\n```\n\nIf you were providing any configuration options before you imported Carbon you\ncan now provide them using the `with` syntax:\n\n```scss\n@use '@carbon/react' with (\n  $css--default-type: true,\n  $css--reset: true\n);\n```\n\nIf you were using any feature flags in v10, you can safely remove them in v11.\n\nYou can also use @import to bring in Carbon, if you prefer, although @use is\nrecommended.\n\nFor cases where your projects does't need to include everything via\n`@use '@carbon/react'`; and just want to do individual component styles.\n\n```scss\n// Configure feature flags if needed, if not these\n// lines can be removed\n@use '@carbon/react/scss/config' with (\n  $font-path: '@ibm/plex',\n  $use-flexbox-grid: 'true'\n);\n\n// Emit the css reset\n@use '@carbon/react/scss/reset';\n\n// Emit the Plex font-face declarations\n@use '@carbon/react/scss/fonts';\n\n// Optional: emit the grid styles if using the grid.\n// This will emit the flex-grid styles if\n// $use-flexbox-grid is configured to 'true'\n@use '@carbon/react/scss/grid';\n\n// Emit the layer styles\n@use '@carbon/react/scss/layer';\n\n// Emit individual component styles\n@use '@carbon/react/scss/components/button';\n@use '@carbon/react/scss/components/tile';\n\n// Use additional local stylesheets\n@use 'sample-grid';\n```\n\nWhen migrating your custom components, some of our most used sass assets are\nincluded below, along with what you would need to have at the top of your file\nto use it. Essentially, all we are doing is including the path where we would\n[find these styles](https://github.com/carbon-design-system/carbon/tree/main/packages/react/scss)\nin our package.\n\n| Carbon sass I'm using           | Sass modules to include                                  |\n| ------------------------------- | -------------------------------------------------------- |\n| Type tokens                     | `@use '@carbon/react/scss/type' as *;`                   |\n| Theme tokens                    | `@use '@carbon/react/scss/theme' as *`                   |\n| Theme mixins                    | `@use '@carbon/react/scss/themes' as *`                  |\n| Design language color tokens    | `@use '@carbon/react/scss/colors' as *`                  |\n| Spacing tokens                  | `@use '@carbon/react/scss/spacing' as *`                 |\n| Breakpoint mixins               | `@use '@carbon/react/scss/breakpoint' as *`              |\n| Motion tokens and functions     | `@use '@carbon/react/scss/motion' as *`                  |\n| Rem and other convert functions | `@use '@carbon/react/scss/utilities/convert' as *`       |\n| Z-index helper                  | `@use '@carbon/react/scss/utilities/z-index' as *`       |\n| Focus outline helper            | `@use '@carbon/react/scss/utilities/focus-outline' as *` |\n| Transform rotate helper         | `@use '@carbon/react/scss/utilities/rotate' as *`        |\n| Skeleton animation helper       | `@use '@carbon/react/scss/utilities/skeleton' as *`      |\n\nNow that you've migrated all of your imports, do a find/replace using your\nfavorite code editor. The prefix `carbon--` is no longer necessary. You can do a\nfind for `carbon--` and replace it with nothing to remove across all your files\nlike the example below. The full list of changes are available in our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n```diff\n- @include carbon--breakpoint(lg) {\n+ @include breakpoint(lg) {\n      width: 42%;\n  }\n```\n\nOnce you've removed the prefix, your styles should all be set using the old, v10\ntokens. We recommend teams install the community supported\n[stylelint-plugin-carbon-tokens](https://github.com/carbon-design-system/stylelint-plugin-carbon-tokens)\nto further assist in migrating your tokens to v11 tokens as the old v10 tokens\nwill be removed in our next major release.\n\n<Row className=\"resource-card-group\">\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Changing import paths\"\n    href=\"https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Stylelint Plugin Carbon Tokens\"\n    href=\"https://github.com/carbon-design-system/stylelint-plugin-carbon-tokens\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n### Step 4: Updating component size props\n\nComponents with size variants have been updated to use the same API options.\nPreviously, the size options were inconsistent: `field`, `medium`, `short`. Now,\nsize options fall under the following values:\n\n| Prop value | Size |\n| ---------- | ---- |\n| `xs`       | 24px |\n| `sm`       | 32px |\n| `md`       | 40px |\n| `lg`       | 48px |\n| `xl`       | 64px |\n| `2xl`      | 80px |\n\n**Note:** the default size in v11 is `md` (`40px`).\n\nRun the following codemods to update the size prop across the effected\ncomponents in your project.\n\n```bash\nnpx @carbon/upgrade migrate small-to-size-prop --write\nnpx @carbon/upgrade migrate size-prop-update --write\n```\n\nBy running the series of codemods, they will do the following, in order:\n\n1. Removes the deprecated `small` boolean prop and replaces it with `size=\"sm\"`.\n2. Removes v10 size props and replaces them with v11 sizes props.\n\nIt's important to run the npx commands in the order that they are presented\nabove. Doing them out of order might result in the codemod not working as\nintended.\n\n<InlineNotification>\n\nFor full details, including options and commands availabe when using the\n`@carbon/upgrade` CLI, see the\n[package documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade).\n\n</InlineNotification>\n\nThe following components all have size variants that may be affected in your\ncode. To update, you will need to switch to one of the size options listed\nabove. The codemod will make short work of these changes.\n\n- Accordion\n- Button\n- ComboBox\n- Dropdown\n- Multiselect\n- Filterable multiselect\n- ContentSwitcher\n- DataTable\n- DatePicker\n- FileUploader\n- FileUploaderItem\n- FileUploaderDropContainer\n- FileUploaderButton\n- Link\n- Modal\n- ComposedModal\n- NumberInput\n- OverflowMenu\n- Search\n- Select\n- Tag\n- TextInput\n- TimePicker\n- Toggle\n\n### Step 5: Update icon sizes and imports\n\nThe `@carbon/icons-react` package has been updated to minimize the number of\nexports from the package to help reduce build and compile times. This package is\navailable under `@carbon/react/icons`.\n\nThis update includes a change to the API of the icon components that come from\nthis package. Previously, we would export icons that included the size of the\nasset. This update allows you to bring the icon directly and specify the size\nusing the `size` prop.\n\nRun the following codemods to update your project's icons.\n\n```bash\nnpx @carbon/upgrade migrate icons-react-size-prop --write\nnpx @carbon/upgrade migrate update-carbon-icons-react-import-to-carbon-react --write\n```\n\nBy running the series of codemods, they will do the following, in order:\n\n1. Removes the size from the import and places it on the icon directly.\n2. Remove the `@carbon/icons-react` pathing and replace it with\n   `@carbon/react/icons`.\n\nIt's important to run the npx commands in the order that they are presented\nabove. Doing them out of order might result in the codemod not working as\nintended.\n\n<InlineNotification>\n\nFor full details, including options and commands availabe when using the\n`@carbon/upgrade` CLI, see the\n[package documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade).\n\n</InlineNotification>\n\nAfter running the command, instead of your icons imports looking like this:\n\n**Before**\n\n```jsx\nimport { Add32, Add24, Add20, Add16 } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add32 />\n      <Add24 />\n      <Add20 />\n      <Add16 />\n    </>\n  );\n}\n```\n\nThey should start looking like this:\n\n**After**\n\n```jsx\nimport { Add } from '@carbon/react/icons';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add size={32} />\n      <Add size={24} />\n      <Add size={20} />\n      <Add />\n    </>\n  );\n}\n```\n\n#### Removed icons\n\nThe following deprecated icons have been removed. Use the table below to find\ntheir replacement, if available, in v11.\n\n| Asset                           | v10                         | v11                         |\n| :------------------------------ | :-------------------------- | :-------------------------- |\n| app-switcher                    | AppSwitcher                 | Switcher                    |\n| arrows                          | Arrows                      | ArrowsVertical              |\n| back-to-top                     | BackToTop                   | UpToTop                     |\n| checkbox--undeterminate         | CheckboxUndeterminate       | CheckboxIndeterminate       |\n| checkbox--undeterminate--filled | CheckboxUndeterminateFilled | CheckboxIndeterminateFilled |\n| cloud--lightning                | CloudLightning              | Removed                     |\n| cloud--rain                     | CloudRain                   | Removed                     |\n| cloud--snow                     | CloudSnow                   | Removed                     |\n| delete                          | Delete                      | TrashCan                    |\n| edit-filter                     | EditFilter                  | FilterEdit                  |\n| sunny                           | Sunny                       | Removed                     |\n| research--bloch-sphere          | ResearchBlockSphere         | BlochSphere                 |\n| research--hinton-plot           | ResearchHintonPlot          | HintonPlot                  |\n| research--matrix                | ResearchMatrix              | Matrix                      |\n| misuse--alt                     | MisuseAlt                   | MisuseOutline               |\n| logo--google                    | LogoGoogle                  | Removed                     |\n| mammogram--stacked              | MammogramStacked            | Removed                     |\n| logo--delicious                 | LogoDelicious               | Removed                     |\n| logo--stumbleupon               | LogoStumbleUpon             | Removed                     |\n| letter--Aa--large               | LetterAaLarge               | TextFont                    |\n| glyph--caution-inverted         | GlyphCautionInverted        | CautionInverted             |\n| glyph--caution                  | GlyphCaution                | Caution                     |\n| glyph--circle-fill              | GlyphCircleFill             | CircleFill                  |\n| glyph--circle-stroke            | GlyphCircleStroke           | CircleStroke                |\n| glyph--critical                 | GlyphCritical               | Critical                    |\n| glyph--incomplete               | GlyphIncomplete             | Incomplete                  |\n| glyph--square-fill              | GlyphSquareFill             | SquareFill                  |\n| glyph--undefined                | GlyphUndefined              | Undefined                   |\n\nHowever, in certain situations, we will be unable to infer what the correct\nupdate should be for a certain usage of the icon component. We have written the\ncodemod to work for most situations, but you will see console warnings for files\nthat will require you to manually review them to make sure the transforms were\napplied correctly.\n\nThe most common manual update that teams will need to make is if a `prop` where\nthe icon is passed to places a `ref` on the icon. For example,\n\n```jsx\nfunction MyComponent({ renderIcon: Icon }) {\n  const ref = useRef(null);\n  return <Icon ref={ref} />;\n}\n\n// Before\n<MyComponent renderIcon={Search16} />\n\n// After the codemod\n<MyComponent renderIcon={props => <Search size={16} {...props} />} />\n```\n\nIn this situation, you will need to update your code to use `React.forwardRef`:\n\n```jsx\n<MyComponent\n  renderIcon={React.forwardRef((props, ref) => (\n    <Search ref={ref} size={16} {...props} />\n  ))}\n/>;\n\n// Or, alternatively:\nconst Search16 = React.forwardRef((props, ref) => {\n  return <Search ref={ref} size={16} {...props} />;\n});\n\n<MyComponent renderIcon={Search16} />;\n```\n\n#### Manual migration\n\nIn addition to the automated codemods above, there are several patterns in your\ncodebase that you will need to update manually:\n\n- If you use the name `ForwardRef(IconName16)` in a test you will need to\n  manually change this. Prefer to use the component directly if using enzyme\n- If you use snapshot tests, the structure will change and include a `size`\n  prop. Make sure that the `size` prop value matches what your icon name used to\n  be. For example, `<Add16 />` should become `<Add size={16} />`\n\n### Step 6: Update components that have changed\n\nIn v11, we have updated the APIs of certain components in one of the following\nways:\n\n- Update `className` usage to be applied to the outermost element of a component\n- Remove props that have been deprecated in v10\n- Refactor the API to ship an accessible component\n\nFor a full list of changes to components, check out our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbon-components-react).\nBelow are some common changes that may impact you and your usage of Carbon.\n\n#### Changes to `className`\n\nThe usage of `className` prop has been updated so that the class is passed to\nthe outermost element of a component's inner markup. This was already the case\nfor most components and this change brings along the remaining components in the\nlibrary to this convention.\n\nThe following components previously were not applying the `className` prop to\nthe outermost element. If you were using a custom `className` to target an inner\nelement for any of these components, you will have to update your selectors to\nnow account for the `className` being placed on the outermost element.\n\n- Checkbox\n- ComboBox\n- Table\n- TableToolbar\n- DataTableSkeleton\n- DatePicker\n- DatePickerSkeleton\n- DatePickerInput\n- Dropdown\n- FileUploaderDropContainer\n- FileUploaderItem\n- FormGroup\n- FilterableMultiSelect\n- MultiSelect\n- NotificationTextDetails\n- NotificationIcon\n- NumberInput\n- OverflowMenuItem\n- RadioButtonGroup\n- RadioTile\n- Select\n- Slider\n- Switch\n- TextArea\n- ControlledPasswordInput\n- PasswordInput\n- TextInput\n- TimePicker\n- Tooltip\n- HeaderContainer\n\n#### Notification\n\nWe have updated the notification components to be more accessible out of the\nbox. `ToastNotification` and `InlineNotification` now have `role=\"status\"` by\ndefault with additional `role` options of `log` and `alert`. These components do\nnot receive focus and should be used for information-only use cases. These\ncomponents no longer accept actions or interactive children.\n\nFor notifications requiring an action, a new `ActionableNotifiation` component\nis available. It has a `role=\"alertdialog\"` and recieves focus by default.\nAutomatic placement of focus can be turned off via the new `hasFocus` prop.\n\nAll notifications have a new optional `closeOnEscape` prop, it enables\nnotifications to closed by pressing the `escape` key. For more details, see the\n[notification components accessibility page](https://www.carbondesignsystem.com/components/notification/accessibility).\n\n#### Update `ToastNotification` usage\n\n- `children` can no longer contain interactive elements. A `ToastNotification`\n  containing an action or interactive children should be replaced with\n  `ActionableNotification`.\n- The `notificationType` prop is no longer needed and can be removed.\n- The default `role` is now `status`. `log` and `alert` can also be used.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### Update `InlineNotification` usage\n\n- The `actions` prop has been removed. An `InlineNotification` containing an\n  action or interactive children should be replaced with\n  `ActionableNotification` configured with the `inline` prop.\n- `children` can no longer contain interactive elements.\n- The `notificationType` prop is no longer needed and can be removed.\n- The default `role` is now `status`. `log` and `alert` can also be used.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### When using `ActionableNotification`:\n\n- The `inline` prop enables a styling variation resulting in a similar visual\n  design to `InlineNotification`.\n- The `actionButtonLabel` prop configures the action button text.\n- The `hasFocus` prop toggles the automatic placement of focus.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### Tabs\n\nTabs have been updated to be more composable so that you have the flexibity and\ncontrol to make them look and act how you want.\n\nIn v10, you may have code that looks like the following:\n\n```js\n<Tabs>\n  <Tab label=\"Tab label 1\">\n    <p>Content for first tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 2\">\n    <p>Content for second tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 3\" disabled>\n    <p>Content for third tab goes here.</p>\n  </Tab>\n  <Tab\n    label=\"Tab label 4 shows truncation\"\n    title=\"Tab label 4 shows truncation\"\n  >\n    <p>Content for fourth tab goes here.</p>\n  </Tab>\n</Tabs>\n```\n\nThose same Tabs, migrated to v11:\n\n```js\n<Tabs>\n  <TabList>\n    <Tab>Tab Label 1</Tab>\n    <Tab>Tab Label 2</Tab>\n    <Tab disabled>Tab Label 3</Tab>\n    <Tab title=\"Tab Label 4 shows truncation\">Tab Label 4 shows truncation</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Content for first tab goes here.</TabPanel>\n    <TabPanel>Content for second tab goes here.</TabPanel>\n    <TabPanel>Content for third tab goes here.</TabPanel>\n    <TabPanel>Content for fourth tab goes here.</TabPanel>\n  </TabPanels>\n</Tabs>\n```\n\n#### Update `Tabs` and `Tab` usage\n\nAll the same functionality for Tabs is available in v11 and more! However, some\nprops have been deprecated because they have either been renamed or are no\nlonger needed. Below are the minor tweaks in naming or implementation.\n\n- the `type` prop is deprecated. Both \"contained\" and \"default\" tabs still exist\n  but now can be called by adding the prop `contained` to the `TabList`.\n- Default tabs are now referred to as line tabs in our documentation here and in\n  our storybook.\n- `hidden` prop is no longer needed with the new composable Tabs. You have\n  control over tab content and when it is hidden through the `TabPanel` and\n  `TabPanels` components.\n- `selected` prop is now named `selectedIndex`.\n- `tabContentClassName` is no longer needed. `TabPanel` (equivalent to tab\n  content) takes in a className prop on its outermost node.\n- For `Tab`, `label` is no longer needed. `children` of `Tab` are now the label.\n- Due to its composability, `renderAnchor`, `renderButton`, `renderContent` are\n  no longer needed on `Tab`. You now have full control over what is rendered\n  inside of `Tab` and `TabPanel`.\n- Because `renderButton` is no longer needed, the associated `tabIndex` prop has\n  also been deprecated.\n- `selected` on `Tab` is deprecated in favor or `selectedIndex`, now placed on\n  `Tabs` instead.\n\nFor more details about the changes to Tabs, see our storybook documentation\n[here](https://react.carbondesignsystem.com/?path=/docs/components-tabs--default).\n\n### Step 7: Done with @carbon/react!\n\nAnd that's it! You're done. At this point you have migrated to use Carbon v11\nusing the `@carbon/react` package.\n\nIf you run into any problems after this point, please feel free to reach out to\nus over on Slack or open up a discussion on\n[GitHub](https://github.com/carbon-design-system/carbon/discussions/categories/help).\nWe want to make this migration experience as seamless as possible and will be\nmonitoring both areas to help out.\n\n## Migrating an app or library using just styles\n\nStarting in v11, the styles for Carbon live in the `@carbon/styles` package.\nAlternatively, you can continue to use `carbon-components` as it re-exports\nstyles from this package directly.\n\nFor teams using Svelte, Angular, Vue, LWC, or Web Components, please\n[review the documention](https://carbondesignsystem.com/developing/frameworks/web-components),\nfor those respective frameworks before making the migration to v11.\n\n### Step 1: Install @carbon/styles\n\nTo get started, uninstall `carbon-components` from your project:\n\n```bash\nnpm uninstall carbon-components\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove carbon-components\n```\n\nNext, install the `@carbon/styles` package:\n\n```bash\nnpm install @carbon/styles\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add @carbon/styles\n```\n\n### Step 2: Install and configure Dart Sass\n\nPreviously, `carbon-components` supported being compiled by different Sass\nlibraries. Starting in v11, the `@carbon/styles` package requires Dart Sass\nthrough the `sass` package in order to compile. This change comes from our\nmigration to Sass Modules in order to improve our compilation times and overall\nproject structure.\n\nIf you don't have this dependency already in your project, you can install it:\n\n```bash\nnpm install sass\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add sass\n```\n\nSimilarly, if you currently use `node-sass` now is a good time to remove that\ndependency from your project. In most situations, Dart Sass is a drop-in\nreplacement for `node-sass` and should require no changes on your end in order\nto use it once you install the dependency.\n\nOne you have Dart Sass installed, it's important that you configure your project\nto support resolving imports in Sass from `node_modules`. Typically, this means\nadding `node_modules` to your `includePaths` config for Sass in your bundler or\ntoolchain of choice.\n\nTo learn more about how to configure your specific toolchain to support this,\nread the documentation for configuration\n[here](https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration).\nWe also have published a guide over on\n[Medium](https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a)\nto help out with common problems that come from this migration.\n\n<Row className=\"resource-card-group\">\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Sass Configuration\"\n    href=\"https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"One quick way to get ready for Carbon v11\"\n    href=\"https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"medium\" />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n### Step 3: Update import paths and tokens\n\nNow, open your project's root stylesheet to make the following changes:\n\n```diff\n- @import 'carbon-components/scss/globals/scss/styles.scss';\n+ @use '@carbon/styles';\n```\n\nIf you were providing any configuration options before you imported Carbon you\ncan now provide them using the `with` syntax:\n\n```scss\n@use '@carbon/styles' with (\n  $css--default-type: true,\n  $css--reset: true\n);\n```\n\nFor cases where your projects does't need to include everything via\n`@use '@carbon/styles'`; and just want to do individual component styles.\n\n```scss\n// configure feature flags if needed, if not this line can be removed\n@use '@carbon/styles/scss/config' with (\n  $font-path: '@ibm/plex'\n);\n\n// ensure the css reset is included\n@use '@carbon/styles/scss/reset';\n\n// add styles for components individually\n@use '@carbon/styles/scss/components/button';\n```\n\nWhen migrating your custom components, some of our most used sass assets are\nincluded below, along with what you would need to have at the top of your file\nto use it. Essentially, all we are doing is including the path where we would\n[find these styles](https://github.com/carbon-design-system/carbon/tree/main/packages/styles/scss)\nin our package.\n\n| Carbon sass I'm using           | Sass modules to include                                   |\n| ------------------------------- | --------------------------------------------------------- |\n| Theme tokens                    | `@use '@carbon/styles/scss/theme' as *`                   |\n| Theme mixins                    | `@use '@carbon/styles/scss/themes' as *`                  |\n| Design language color tokens    | `@use '@carbon/styles/scss/colors' as *`                  |\n| Spacing tokens                  | `@use '@carbon/styles/scss/spacing' as *`                 |\n| Breakpoint mixins               | `@use '@carbon/styles/scss/breakpoint' as *`              |\n| Motion tokens and functions     | `@use '@carbon/styles/scss/motion' as *`                  |\n| Rem and other convert functions | `@use '@carbon/styles/scss/utilities/convert' as *`       |\n| Z-index helper                  | `@use '@carbon/styles/scss/utilities/z-index' as *`       |\n| Focus outline helper            | `@use '@carbon/styles/scss/utilities/focus-outline' as *` |\n| Transform rotate helper         | `@use '@carbon/styles/scss/utilities/rotate' as *`        |\n| Skeleton animation helper       | `@use '@carbon/styles/scss/utilities/skeleton' as *`      |\n\nNow that you've migrated all of your imports, do a find/replace using your\nfavorite code editor. The prefix`carbon--` is no longer necessary. You can do a\nfind for `carbon--` and replace it with nothing to remove across all your files\nlike the example below. The full list of changes are available in our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n```diff\n- @include carbon--breakpoint(lg) {\n+ @include breakpoint(lg) {\n      width: 42%;\n  }\n```\n\nOnce you've removed the prefix, your styles should all be set using the old, v10\ntokens. We recommend teams install the community supported\n[stylelint-plugin-carbon-tokens](https://github.com/carbon-design-system/stylelint-plugin-carbon-tokens)\nto further assist in migrating your tokens to v11 tokens as the old v10 tokens\nwill be removed in our next major release.\n\n<Row className=\"resource-card-group\">\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Changing import paths\"\n    href=\"https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Stylelint Plugin Carbon Tokens\"\n    href=\"https://github.com/carbon-design-system/stylelint-plugin-carbon-tokens\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n### Step 4: Update bx to cds\n\nIf you are targeting specific selectors that use the `bx` prefix, you will need\nto update your code to either target the `cds` prefix for selectors or update\nCarbon's configuration to use `bx` as the prefix by writing the following:\n\n```scss\n// Option A\n@use '@carbon/styles' with (\n  $prefix: 'bx'\n);\n// Option B\n@use '@carbon/styles/scss/config' with (\n  $prefix: 'bx'\n);\n```\n\n### Step 5: Enable flexbox grid\n\nIf you are using the flexbox-based grid in your project, you can continue to use\nthis feature in v11 by importing the following:\n\n```scss\n@use '@carbon/styles/scss/grid/flexbox';\n```\n\nThis is important due to the fact that the CSS Grid implementation is used by\ndefault in v11. However, bringing in the flexbox grid styles in this way means\nthat your layouts will continue to work the same as in v10.\n\n### Step 6: Done with @carbon/styles!\n\nAnd that's it! You're done. At this point you have migrated to use Carbon v11\nusing the `@carbon/styles` package.\n\nIf you run into any problems after this point, please feel free to reach out to\nus over on Slack or open up a discussion on\n[GitHub](https://github.com/carbon-design-system/carbon/discussions/categories/help).\nWe want to make this migration experience as seamless as possible and will be\nmonitoring both areas to help out.\n\n## Migrating carbon-icons\n\nThe `carbon-icons` package has been deprecated and is no longer supported. To\nuse icons from the Carbon Design System, you should install the appropriate\nlibrary to use with your framework:\n\n| Package                 | Framework          | Link                                                    |\n| :---------------------- | :----------------- | :------------------------------------------------------ |\n| `@carbon/icons-react`   | React              | [Link](https://npmjs.com/package/@carbon/icons-react)   |\n| `@carbon/icons-angular` | Angular            | [Link](https://npmjs.com/package/@carbon/icons-angular) |\n| `@carbon/icons-vue`     | Vue                | [Link](https://npmjs.com/package/@carbon/icons-vue)     |\n| `carbon-icons-svelte`   | Svelte             | [Link](https://npmjs.com/package/carbon-icons-svelte)   |\n| `@carbon/icons`         | Vanilla JavaScript | [Link](https://npmjs.com/package/@carbon/icons)         |\n\nIf you are using `@carbon/react`, you can directly import icons from\n`@carbon/react/icons`.\n\n## Migrating Carbon elements\n\nThe packages that we ship for the IBM Design Language have been updated in v11.\nThe most notable change is that these packages now require Dart Sass in order to\ncompile as they now use Sass Modules to improve compilation times.\n\nIf you were directly importing from one of these element packages, consider\nimporting from either `@carbon/styles` or `@carbon/react` instead. Both of these\npackages provide entrypoints for elements packages on top of the styles for\nCarbon itself.\n\nFor teams using these packages directly, you will need to update each of the\nelements packages you're using to the latest version.\n\n```bash\nnpm install @carbon/<package-name>@latest\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn upgrade @carbon/<package-name>@latest\n```\n\nAfterwards, you will need to update the import paths and import names themselves\nthat you bring in. In general, each package now supports importing from the\npackage directly and all `carbon--` prefixed variables, mixins, and functions\nhave been renamed to remove the prefix.\n\nFor full details fo the changes to each elements package, check out the links\nbelow.\n\n| Package            | Migration Docs                                                                                        |\n| :----------------- | :---------------------------------------------------------------------------------------------------- |\n| `@carbon/colors`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carboncolors)   |\n| `@carbon/elements` | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonelements) |\n| `@carbon/grid`     | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbongrid)     |\n| `@carbon/layout`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonlayout)   |\n| `@carbon/motion`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonmotion)   |\n| `@carbon/themes`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonthemes)   |\n| `@carbon/type`     | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbontype)     |\n\nIf you were previously using the `@carbon/import-once` package, you can continue\nto use this in v11. However, this package will receive no further updates after\nCarbon switched to using Sass Modules.\n","type":"Mdx","contentDigest":"179a69c16a51c4f022f75ae4b43e443a","owner":"gatsby-plugin-mdx","counter":4473},"frontmatter":{"title":"Guide","description":"This guide includes everything you need to migrate your offering from v10 to v11 of Carbon.","tabs":["Overview","Design","Develop"]},"exports":{},"rawBody":"---\ntitle: Guide\ndescription:\n  This guide includes everything you need to migrate your offering from v10 to\n  v11 of Carbon.\ntabs: ['Overview', 'Design', 'Develop']\n---\n\nimport { Tag } from '@carbon/react';\n\n<PageDescription>\n\nStep-by-step guide to updating your code from Carbon v10 to v11.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Migrating a React app or library</AnchorLink>\n<AnchorLink>Migrating an app or library using just styles</AnchorLink>\n<AnchorLink>Migrating carbon-icons</AnchorLink>\n<AnchorLink>Migrating Carbon elements</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nThis guide helps you update your project to Carbon v11. It is broken into\nsections based on how you are using Carbon in your project today. For most teams\nusing Carbon, you'll want to use the\n[Migrating a React app](#migrating-a-react-app) section.\n\nOne of the biggest changes to Carbon in v11 is that we moved to dedicated\npackages under the `@carbon` scope. What this means for you is that if you were\npreviously using the following packages:\n\n- `carbon-components`\n- `carbon-components-react`\n- `carbon-icons`\n- `@carbon/icons-react`\n\nYou can access all of this work under one single package: `@carbon/react`. This\npackage will re-export all of the styles and icons for Carbon all in one\ndependency.\n\nIf you were previously using `carbon-components`, the styles from this package\nare available under `@carbon/styles`. They are also re-exported through\n`@carbon/react`\n\nBoth the `carbon-components` and `carbon-components-react` packages will stick\naround in v11 but they are only re-exports of `@carbon/styles` and\n`@carbon/react` respectively.\n\n## Migrating a React app or library\n\nStarting in v11, the React components for Carbon live in the `@carbon/react`\npackage.\n\nThe `@carbon/react` package also includes the styles for Carbon along with\nicons.\n\n### Step 1: Install @carbon/react\n\nTo get started, uninstall the following packages if they exist in your project:\n\n- `carbon-components`\n- `carbon-components-react`\n- `carbon-icons`\n- `@carbon/icons-react`\n\n```bash\nnpm uninstall carbon-components carbon-components-react carbon-icons @carbon/icons-react\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove carbon-components carbon-components-react carbon-icons @carbon/icons-react\n```\n\nNext, install the `@carbon/react` package:\n\n```bash\nnpm install @carbon/react\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add @carbon/react\n```\n\nNow that you've removed the old packages and brought in the new ones, run the\ncodemod below to fix your pathing.\n\n```bash\nnpx @carbon/upgrade migrate update-carbon-components-react-import-to-scoped --write\n```\n\nAfter running the command, your code should start looking like this:\n\n```jsx\n// Before\nimport { Accordion, AccordionItem } from 'carbon-components-react';\n// After\nimport { Accordion, AccordionItem } from '@carbon/react';\n```\n\n<InlineNotification>\n\nFor full details, including options and commands availabe when using the\n`@carbon/upgrade` CLI, see the\n[package documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade).\n\n</InlineNotification>\n\n### Step 2: Install Dart Sass\n\nIf you were previously importing styles from `carbon-components`, you can now\nimport styles directly from `@carbon/react` or the `@carbon/react/scss` folder.\n\nBefore you're able to bring in these styles, you'll need to make sure your\nproject is setup to use Dart Sass. Starting in v11, Carbon styles requires Dart\nSass through the `sass` package in order to compile. This change comes from our\nmigration to Sass Modules in order to improve our compilation times and overall\nproject structure.\n\nFirst, let's remove `node-sass` from your project. If you don't have\n`node-sass`, no worries, just skip down and begin adding `sass`.\n\n```bash\nnpm uninstall node-sass\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove node-sass\n```\n\nNow, let's install `sass`:\n\n```bash\nnpm install sass --save-dev\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add sass --dev\n```\n\nOnce you have Dart Sass installed, it's important that you configure your\nproject to support resolving imports in Sass from `node_modules`. Typically,\nthis means adding `node_modules` to your `includePaths` config for Sass in your\nbundler or toolchain of choice.\n\nTo learn more about how to configure your specific toolchain to support this,\nread the documentation for configuration\n[here](https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration).\nWe also have published a guide over on\n[Medium](https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a)\nto help out with common problems that come from this migration.\n\n<Row className=\"resource-card-group\">\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Sass Configuration\"\n    href=\"https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"One quick way to get ready for Carbon v11\"\n    href=\"https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"medium\" />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n### Step 3: Update style import paths\n\nNow, open your project's root stylesheet to make the following changes:\n\n```diff\n- @import 'carbon-components/scss/globals/scss/styles.scss';\n+ @use '@carbon/react';\n```\n\nIf you were providing any configuration options before you imported Carbon you\ncan now provide them using the `with` syntax:\n\n```scss\n@use '@carbon/react' with (\n  $css--default-type: true,\n  $css--reset: true\n);\n```\n\nIf you were using any feature flags in v10, you can safely remove them in v11.\n\nYou can also use @import to bring in Carbon, if you prefer, although @use is\nrecommended.\n\nFor cases where your projects does't need to include everything via\n`@use '@carbon/react'`; and just want to do individual component styles.\n\n```scss\n// Configure feature flags if needed, if not these\n// lines can be removed\n@use '@carbon/react/scss/config' with (\n  $font-path: '@ibm/plex',\n  $use-flexbox-grid: 'true'\n);\n\n// Emit the css reset\n@use '@carbon/react/scss/reset';\n\n// Emit the Plex font-face declarations\n@use '@carbon/react/scss/fonts';\n\n// Optional: emit the grid styles if using the grid.\n// This will emit the flex-grid styles if\n// $use-flexbox-grid is configured to 'true'\n@use '@carbon/react/scss/grid';\n\n// Emit the layer styles\n@use '@carbon/react/scss/layer';\n\n// Emit individual component styles\n@use '@carbon/react/scss/components/button';\n@use '@carbon/react/scss/components/tile';\n\n// Use additional local stylesheets\n@use 'sample-grid';\n```\n\nWhen migrating your custom components, some of our most used sass assets are\nincluded below, along with what you would need to have at the top of your file\nto use it. Essentially, all we are doing is including the path where we would\n[find these styles](https://github.com/carbon-design-system/carbon/tree/main/packages/react/scss)\nin our package.\n\n| Carbon sass I'm using           | Sass modules to include                                  |\n| ------------------------------- | -------------------------------------------------------- |\n| Type tokens                     | `@use '@carbon/react/scss/type' as *;`                   |\n| Theme tokens                    | `@use '@carbon/react/scss/theme' as *`                   |\n| Theme mixins                    | `@use '@carbon/react/scss/themes' as *`                  |\n| Design language color tokens    | `@use '@carbon/react/scss/colors' as *`                  |\n| Spacing tokens                  | `@use '@carbon/react/scss/spacing' as *`                 |\n| Breakpoint mixins               | `@use '@carbon/react/scss/breakpoint' as *`              |\n| Motion tokens and functions     | `@use '@carbon/react/scss/motion' as *`                  |\n| Rem and other convert functions | `@use '@carbon/react/scss/utilities/convert' as *`       |\n| Z-index helper                  | `@use '@carbon/react/scss/utilities/z-index' as *`       |\n| Focus outline helper            | `@use '@carbon/react/scss/utilities/focus-outline' as *` |\n| Transform rotate helper         | `@use '@carbon/react/scss/utilities/rotate' as *`        |\n| Skeleton animation helper       | `@use '@carbon/react/scss/utilities/skeleton' as *`      |\n\nNow that you've migrated all of your imports, do a find/replace using your\nfavorite code editor. The prefix `carbon--` is no longer necessary. You can do a\nfind for `carbon--` and replace it with nothing to remove across all your files\nlike the example below. The full list of changes are available in our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n```diff\n- @include carbon--breakpoint(lg) {\n+ @include breakpoint(lg) {\n      width: 42%;\n  }\n```\n\nOnce you've removed the prefix, your styles should all be set using the old, v10\ntokens. We recommend teams install the community supported\n[stylelint-plugin-carbon-tokens](https://github.com/carbon-design-system/stylelint-plugin-carbon-tokens)\nto further assist in migrating your tokens to v11 tokens as the old v10 tokens\nwill be removed in our next major release.\n\n<Row className=\"resource-card-group\">\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Changing import paths\"\n    href=\"https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Stylelint Plugin Carbon Tokens\"\n    href=\"https://github.com/carbon-design-system/stylelint-plugin-carbon-tokens\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n### Step 4: Updating component size props\n\nComponents with size variants have been updated to use the same API options.\nPreviously, the size options were inconsistent: `field`, `medium`, `short`. Now,\nsize options fall under the following values:\n\n| Prop value | Size |\n| ---------- | ---- |\n| `xs`       | 24px |\n| `sm`       | 32px |\n| `md`       | 40px |\n| `lg`       | 48px |\n| `xl`       | 64px |\n| `2xl`      | 80px |\n\n**Note:** the default size in v11 is `md` (`40px`).\n\nRun the following codemods to update the size prop across the effected\ncomponents in your project.\n\n```bash\nnpx @carbon/upgrade migrate small-to-size-prop --write\nnpx @carbon/upgrade migrate size-prop-update --write\n```\n\nBy running the series of codemods, they will do the following, in order:\n\n1. Removes the deprecated `small` boolean prop and replaces it with `size=\"sm\"`.\n2. Removes v10 size props and replaces them with v11 sizes props.\n\nIt's important to run the npx commands in the order that they are presented\nabove. Doing them out of order might result in the codemod not working as\nintended.\n\n<InlineNotification>\n\nFor full details, including options and commands availabe when using the\n`@carbon/upgrade` CLI, see the\n[package documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade).\n\n</InlineNotification>\n\nThe following components all have size variants that may be affected in your\ncode. To update, you will need to switch to one of the size options listed\nabove. The codemod will make short work of these changes.\n\n- Accordion\n- Button\n- ComboBox\n- Dropdown\n- Multiselect\n- Filterable multiselect\n- ContentSwitcher\n- DataTable\n- DatePicker\n- FileUploader\n- FileUploaderItem\n- FileUploaderDropContainer\n- FileUploaderButton\n- Link\n- Modal\n- ComposedModal\n- NumberInput\n- OverflowMenu\n- Search\n- Select\n- Tag\n- TextInput\n- TimePicker\n- Toggle\n\n### Step 5: Update icon sizes and imports\n\nThe `@carbon/icons-react` package has been updated to minimize the number of\nexports from the package to help reduce build and compile times. This package is\navailable under `@carbon/react/icons`.\n\nThis update includes a change to the API of the icon components that come from\nthis package. Previously, we would export icons that included the size of the\nasset. This update allows you to bring the icon directly and specify the size\nusing the `size` prop.\n\nRun the following codemods to update your project's icons.\n\n```bash\nnpx @carbon/upgrade migrate icons-react-size-prop --write\nnpx @carbon/upgrade migrate update-carbon-icons-react-import-to-carbon-react --write\n```\n\nBy running the series of codemods, they will do the following, in order:\n\n1. Removes the size from the import and places it on the icon directly.\n2. Remove the `@carbon/icons-react` pathing and replace it with\n   `@carbon/react/icons`.\n\nIt's important to run the npx commands in the order that they are presented\nabove. Doing them out of order might result in the codemod not working as\nintended.\n\n<InlineNotification>\n\nFor full details, including options and commands availabe when using the\n`@carbon/upgrade` CLI, see the\n[package documentation](https://github.com/carbon-design-system/carbon/tree/main/packages/upgrade).\n\n</InlineNotification>\n\nAfter running the command, instead of your icons imports looking like this:\n\n**Before**\n\n```jsx\nimport { Add32, Add24, Add20, Add16 } from '@carbon/icons-react';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add32 />\n      <Add24 />\n      <Add20 />\n      <Add16 />\n    </>\n  );\n}\n```\n\nThey should start looking like this:\n\n**After**\n\n```jsx\nimport { Add } from '@carbon/react/icons';\n\nfunction MyComponent() {\n  return (\n    <>\n      <Add size={32} />\n      <Add size={24} />\n      <Add size={20} />\n      <Add />\n    </>\n  );\n}\n```\n\n#### Removed icons\n\nThe following deprecated icons have been removed. Use the table below to find\ntheir replacement, if available, in v11.\n\n| Asset                           | v10                         | v11                         |\n| :------------------------------ | :-------------------------- | :-------------------------- |\n| app-switcher                    | AppSwitcher                 | Switcher                    |\n| arrows                          | Arrows                      | ArrowsVertical              |\n| back-to-top                     | BackToTop                   | UpToTop                     |\n| checkbox--undeterminate         | CheckboxUndeterminate       | CheckboxIndeterminate       |\n| checkbox--undeterminate--filled | CheckboxUndeterminateFilled | CheckboxIndeterminateFilled |\n| cloud--lightning                | CloudLightning              | Removed                     |\n| cloud--rain                     | CloudRain                   | Removed                     |\n| cloud--snow                     | CloudSnow                   | Removed                     |\n| delete                          | Delete                      | TrashCan                    |\n| edit-filter                     | EditFilter                  | FilterEdit                  |\n| sunny                           | Sunny                       | Removed                     |\n| research--bloch-sphere          | ResearchBlockSphere         | BlochSphere                 |\n| research--hinton-plot           | ResearchHintonPlot          | HintonPlot                  |\n| research--matrix                | ResearchMatrix              | Matrix                      |\n| misuse--alt                     | MisuseAlt                   | MisuseOutline               |\n| logo--google                    | LogoGoogle                  | Removed                     |\n| mammogram--stacked              | MammogramStacked            | Removed                     |\n| logo--delicious                 | LogoDelicious               | Removed                     |\n| logo--stumbleupon               | LogoStumbleUpon             | Removed                     |\n| letter--Aa--large               | LetterAaLarge               | TextFont                    |\n| glyph--caution-inverted         | GlyphCautionInverted        | CautionInverted             |\n| glyph--caution                  | GlyphCaution                | Caution                     |\n| glyph--circle-fill              | GlyphCircleFill             | CircleFill                  |\n| glyph--circle-stroke            | GlyphCircleStroke           | CircleStroke                |\n| glyph--critical                 | GlyphCritical               | Critical                    |\n| glyph--incomplete               | GlyphIncomplete             | Incomplete                  |\n| glyph--square-fill              | GlyphSquareFill             | SquareFill                  |\n| glyph--undefined                | GlyphUndefined              | Undefined                   |\n\nHowever, in certain situations, we will be unable to infer what the correct\nupdate should be for a certain usage of the icon component. We have written the\ncodemod to work for most situations, but you will see console warnings for files\nthat will require you to manually review them to make sure the transforms were\napplied correctly.\n\nThe most common manual update that teams will need to make is if a `prop` where\nthe icon is passed to places a `ref` on the icon. For example,\n\n```jsx\nfunction MyComponent({ renderIcon: Icon }) {\n  const ref = useRef(null);\n  return <Icon ref={ref} />;\n}\n\n// Before\n<MyComponent renderIcon={Search16} />\n\n// After the codemod\n<MyComponent renderIcon={props => <Search size={16} {...props} />} />\n```\n\nIn this situation, you will need to update your code to use `React.forwardRef`:\n\n```jsx\n<MyComponent\n  renderIcon={React.forwardRef((props, ref) => (\n    <Search ref={ref} size={16} {...props} />\n  ))}\n/>;\n\n// Or, alternatively:\nconst Search16 = React.forwardRef((props, ref) => {\n  return <Search ref={ref} size={16} {...props} />;\n});\n\n<MyComponent renderIcon={Search16} />;\n```\n\n#### Manual migration\n\nIn addition to the automated codemods above, there are several patterns in your\ncodebase that you will need to update manually:\n\n- If you use the name `ForwardRef(IconName16)` in a test you will need to\n  manually change this. Prefer to use the component directly if using enzyme\n- If you use snapshot tests, the structure will change and include a `size`\n  prop. Make sure that the `size` prop value matches what your icon name used to\n  be. For example, `<Add16 />` should become `<Add size={16} />`\n\n### Step 6: Update components that have changed\n\nIn v11, we have updated the APIs of certain components in one of the following\nways:\n\n- Update `className` usage to be applied to the outermost element of a component\n- Remove props that have been deprecated in v10\n- Refactor the API to ship an accessible component\n\nFor a full list of changes to components, check out our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbon-components-react).\nBelow are some common changes that may impact you and your usage of Carbon.\n\n#### Changes to `className`\n\nThe usage of `className` prop has been updated so that the class is passed to\nthe outermost element of a component's inner markup. This was already the case\nfor most components and this change brings along the remaining components in the\nlibrary to this convention.\n\nThe following components previously were not applying the `className` prop to\nthe outermost element. If you were using a custom `className` to target an inner\nelement for any of these components, you will have to update your selectors to\nnow account for the `className` being placed on the outermost element.\n\n- Checkbox\n- ComboBox\n- Table\n- TableToolbar\n- DataTableSkeleton\n- DatePicker\n- DatePickerSkeleton\n- DatePickerInput\n- Dropdown\n- FileUploaderDropContainer\n- FileUploaderItem\n- FormGroup\n- FilterableMultiSelect\n- MultiSelect\n- NotificationTextDetails\n- NotificationIcon\n- NumberInput\n- OverflowMenuItem\n- RadioButtonGroup\n- RadioTile\n- Select\n- Slider\n- Switch\n- TextArea\n- ControlledPasswordInput\n- PasswordInput\n- TextInput\n- TimePicker\n- Tooltip\n- HeaderContainer\n\n#### Notification\n\nWe have updated the notification components to be more accessible out of the\nbox. `ToastNotification` and `InlineNotification` now have `role=\"status\"` by\ndefault with additional `role` options of `log` and `alert`. These components do\nnot receive focus and should be used for information-only use cases. These\ncomponents no longer accept actions or interactive children.\n\nFor notifications requiring an action, a new `ActionableNotifiation` component\nis available. It has a `role=\"alertdialog\"` and recieves focus by default.\nAutomatic placement of focus can be turned off via the new `hasFocus` prop.\n\nAll notifications have a new optional `closeOnEscape` prop, it enables\nnotifications to closed by pressing the `escape` key. For more details, see the\n[notification components accessibility page](https://www.carbondesignsystem.com/components/notification/accessibility).\n\n#### Update `ToastNotification` usage\n\n- `children` can no longer contain interactive elements. A `ToastNotification`\n  containing an action or interactive children should be replaced with\n  `ActionableNotification`.\n- The `notificationType` prop is no longer needed and can be removed.\n- The default `role` is now `status`. `log` and `alert` can also be used.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### Update `InlineNotification` usage\n\n- The `actions` prop has been removed. An `InlineNotification` containing an\n  action or interactive children should be replaced with\n  `ActionableNotification` configured with the `inline` prop.\n- `children` can no longer contain interactive elements.\n- The `notificationType` prop is no longer needed and can be removed.\n- The default `role` is now `status`. `log` and `alert` can also be used.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### When using `ActionableNotification`:\n\n- The `inline` prop enables a styling variation resulting in a similar visual\n  design to `InlineNotification`.\n- The `actionButtonLabel` prop configures the action button text.\n- The `hasFocus` prop toggles the automatic placement of focus.\n- The `closeOnEscape` prop toggles the closing of notifications via the `escape`\n  key.\n\n#### Tabs\n\nTabs have been updated to be more composable so that you have the flexibity and\ncontrol to make them look and act how you want.\n\nIn v10, you may have code that looks like the following:\n\n```js\n<Tabs>\n  <Tab label=\"Tab label 1\">\n    <p>Content for first tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 2\">\n    <p>Content for second tab goes here.</p>\n  </Tab>\n  <Tab label=\"Tab label 3\" disabled>\n    <p>Content for third tab goes here.</p>\n  </Tab>\n  <Tab\n    label=\"Tab label 4 shows truncation\"\n    title=\"Tab label 4 shows truncation\"\n  >\n    <p>Content for fourth tab goes here.</p>\n  </Tab>\n</Tabs>\n```\n\nThose same Tabs, migrated to v11:\n\n```js\n<Tabs>\n  <TabList>\n    <Tab>Tab Label 1</Tab>\n    <Tab>Tab Label 2</Tab>\n    <Tab disabled>Tab Label 3</Tab>\n    <Tab title=\"Tab Label 4 shows truncation\">Tab Label 4 shows truncation</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel>Content for first tab goes here.</TabPanel>\n    <TabPanel>Content for second tab goes here.</TabPanel>\n    <TabPanel>Content for third tab goes here.</TabPanel>\n    <TabPanel>Content for fourth tab goes here.</TabPanel>\n  </TabPanels>\n</Tabs>\n```\n\n#### Update `Tabs` and `Tab` usage\n\nAll the same functionality for Tabs is available in v11 and more! However, some\nprops have been deprecated because they have either been renamed or are no\nlonger needed. Below are the minor tweaks in naming or implementation.\n\n- the `type` prop is deprecated. Both \"contained\" and \"default\" tabs still exist\n  but now can be called by adding the prop `contained` to the `TabList`.\n- Default tabs are now referred to as line tabs in our documentation here and in\n  our storybook.\n- `hidden` prop is no longer needed with the new composable Tabs. You have\n  control over tab content and when it is hidden through the `TabPanel` and\n  `TabPanels` components.\n- `selected` prop is now named `selectedIndex`.\n- `tabContentClassName` is no longer needed. `TabPanel` (equivalent to tab\n  content) takes in a className prop on its outermost node.\n- For `Tab`, `label` is no longer needed. `children` of `Tab` are now the label.\n- Due to its composability, `renderAnchor`, `renderButton`, `renderContent` are\n  no longer needed on `Tab`. You now have full control over what is rendered\n  inside of `Tab` and `TabPanel`.\n- Because `renderButton` is no longer needed, the associated `tabIndex` prop has\n  also been deprecated.\n- `selected` on `Tab` is deprecated in favor or `selectedIndex`, now placed on\n  `Tabs` instead.\n\nFor more details about the changes to Tabs, see our storybook documentation\n[here](https://react.carbondesignsystem.com/?path=/docs/components-tabs--default).\n\n### Step 7: Done with @carbon/react!\n\nAnd that's it! You're done. At this point you have migrated to use Carbon v11\nusing the `@carbon/react` package.\n\nIf you run into any problems after this point, please feel free to reach out to\nus over on Slack or open up a discussion on\n[GitHub](https://github.com/carbon-design-system/carbon/discussions/categories/help).\nWe want to make this migration experience as seamless as possible and will be\nmonitoring both areas to help out.\n\n## Migrating an app or library using just styles\n\nStarting in v11, the styles for Carbon live in the `@carbon/styles` package.\nAlternatively, you can continue to use `carbon-components` as it re-exports\nstyles from this package directly.\n\nFor teams using Svelte, Angular, Vue, LWC, or Web Components, please\n[review the documention](https://carbondesignsystem.com/developing/frameworks/web-components),\nfor those respective frameworks before making the migration to v11.\n\n### Step 1: Install @carbon/styles\n\nTo get started, uninstall `carbon-components` from your project:\n\n```bash\nnpm uninstall carbon-components\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn remove carbon-components\n```\n\nNext, install the `@carbon/styles` package:\n\n```bash\nnpm install @carbon/styles\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add @carbon/styles\n```\n\n### Step 2: Install and configure Dart Sass\n\nPreviously, `carbon-components` supported being compiled by different Sass\nlibraries. Starting in v11, the `@carbon/styles` package requires Dart Sass\nthrough the `sass` package in order to compile. This change comes from our\nmigration to Sass Modules in order to improve our compilation times and overall\nproject structure.\n\nIf you don't have this dependency already in your project, you can install it:\n\n```bash\nnpm install sass\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn add sass\n```\n\nSimilarly, if you currently use `node-sass` now is a good time to remove that\ndependency from your project. In most situations, Dart Sass is a drop-in\nreplacement for `node-sass` and should require no changes on your end in order\nto use it once you install the dependency.\n\nOne you have Dart Sass installed, it's important that you configure your project\nto support resolving imports in Sass from `node_modules`. Typically, this means\nadding `node_modules` to your `includePaths` config for Sass in your bundler or\ntoolchain of choice.\n\nTo learn more about how to configure your specific toolchain to support this,\nread the documentation for configuration\n[here](https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration).\nWe also have published a guide over on\n[Medium](https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a)\nto help out with common problems that come from this migration.\n\n<Row className=\"resource-card-group\">\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Sass Configuration\"\n    href=\"https://github.com/carbon-design-system/carbon/blob/main/packages/styles/docs/sass.md#configuration\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"One quick way to get ready for Carbon v11\"\n    href=\"https://medium.com/carbondesign/migrating-from-node-sass-to-sass-eba9db004a3a\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"medium\" />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n### Step 3: Update import paths and tokens\n\nNow, open your project's root stylesheet to make the following changes:\n\n```diff\n- @import 'carbon-components/scss/globals/scss/styles.scss';\n+ @use '@carbon/styles';\n```\n\nIf you were providing any configuration options before you imported Carbon you\ncan now provide them using the `with` syntax:\n\n```scss\n@use '@carbon/styles' with (\n  $css--default-type: true,\n  $css--reset: true\n);\n```\n\nFor cases where your projects does't need to include everything via\n`@use '@carbon/styles'`; and just want to do individual component styles.\n\n```scss\n// configure feature flags if needed, if not this line can be removed\n@use '@carbon/styles/scss/config' with (\n  $font-path: '@ibm/plex'\n);\n\n// ensure the css reset is included\n@use '@carbon/styles/scss/reset';\n\n// add styles for components individually\n@use '@carbon/styles/scss/components/button';\n```\n\nWhen migrating your custom components, some of our most used sass assets are\nincluded below, along with what you would need to have at the top of your file\nto use it. Essentially, all we are doing is including the path where we would\n[find these styles](https://github.com/carbon-design-system/carbon/tree/main/packages/styles/scss)\nin our package.\n\n| Carbon sass I'm using           | Sass modules to include                                   |\n| ------------------------------- | --------------------------------------------------------- |\n| Theme tokens                    | `@use '@carbon/styles/scss/theme' as *`                   |\n| Theme mixins                    | `@use '@carbon/styles/scss/themes' as *`                  |\n| Design language color tokens    | `@use '@carbon/styles/scss/colors' as *`                  |\n| Spacing tokens                  | `@use '@carbon/styles/scss/spacing' as *`                 |\n| Breakpoint mixins               | `@use '@carbon/styles/scss/breakpoint' as *`              |\n| Motion tokens and functions     | `@use '@carbon/styles/scss/motion' as *`                  |\n| Rem and other convert functions | `@use '@carbon/styles/scss/utilities/convert' as *`       |\n| Z-index helper                  | `@use '@carbon/styles/scss/utilities/z-index' as *`       |\n| Focus outline helper            | `@use '@carbon/styles/scss/utilities/focus-outline' as *` |\n| Transform rotate helper         | `@use '@carbon/styles/scss/utilities/rotate' as *`        |\n| Skeleton animation helper       | `@use '@carbon/styles/scss/utilities/skeleton' as *`      |\n\nNow that you've migrated all of your imports, do a find/replace using your\nfavorite code editor. The prefix`carbon--` is no longer necessary. You can do a\nfind for `carbon--` and replace it with nothing to remove across all your files\nlike the example below. The full list of changes are available in our\n[Migration Docs](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss).\n\n```diff\n- @include carbon--breakpoint(lg) {\n+ @include breakpoint(lg) {\n      width: 42%;\n  }\n```\n\nOnce you've removed the prefix, your styles should all be set using the old, v10\ntokens. We recommend teams install the community supported\n[stylelint-plugin-carbon-tokens](https://github.com/carbon-design-system/stylelint-plugin-carbon-tokens)\nto further assist in migrating your tokens to v11 tokens as the old v10 tokens\nwill be removed in our next major release.\n\n<Row className=\"resource-card-group\">\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Changing import paths\"\n    href=\"https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#changing-import-paths-from-scssglobalsscss-to-scss\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n<Column colMd={4} colLg={4} noGutterSm>\n  <ResourceCard\n    subTitle=\"Stylelint Plugin Carbon Tokens\"\n    href=\"https://github.com/carbon-design-system/stylelint-plugin-carbon-tokens\"\n    actionIcon=\"launch\"\n    >\n    <MdxIcon name=\"github\" />\n\n  </ResourceCard>\n</Column>\n</Row>\n\n### Step 4: Update bx to cds\n\nIf you are targeting specific selectors that use the `bx` prefix, you will need\nto update your code to either target the `cds` prefix for selectors or update\nCarbon's configuration to use `bx` as the prefix by writing the following:\n\n```scss\n// Option A\n@use '@carbon/styles' with (\n  $prefix: 'bx'\n);\n// Option B\n@use '@carbon/styles/scss/config' with (\n  $prefix: 'bx'\n);\n```\n\n### Step 5: Enable flexbox grid\n\nIf you are using the flexbox-based grid in your project, you can continue to use\nthis feature in v11 by importing the following:\n\n```scss\n@use '@carbon/styles/scss/grid/flexbox';\n```\n\nThis is important due to the fact that the CSS Grid implementation is used by\ndefault in v11. However, bringing in the flexbox grid styles in this way means\nthat your layouts will continue to work the same as in v10.\n\n### Step 6: Done with @carbon/styles!\n\nAnd that's it! You're done. At this point you have migrated to use Carbon v11\nusing the `@carbon/styles` package.\n\nIf you run into any problems after this point, please feel free to reach out to\nus over on Slack or open up a discussion on\n[GitHub](https://github.com/carbon-design-system/carbon/discussions/categories/help).\nWe want to make this migration experience as seamless as possible and will be\nmonitoring both areas to help out.\n\n## Migrating carbon-icons\n\nThe `carbon-icons` package has been deprecated and is no longer supported. To\nuse icons from the Carbon Design System, you should install the appropriate\nlibrary to use with your framework:\n\n| Package                 | Framework          | Link                                                    |\n| :---------------------- | :----------------- | :------------------------------------------------------ |\n| `@carbon/icons-react`   | React              | [Link](https://npmjs.com/package/@carbon/icons-react)   |\n| `@carbon/icons-angular` | Angular            | [Link](https://npmjs.com/package/@carbon/icons-angular) |\n| `@carbon/icons-vue`     | Vue                | [Link](https://npmjs.com/package/@carbon/icons-vue)     |\n| `carbon-icons-svelte`   | Svelte             | [Link](https://npmjs.com/package/carbon-icons-svelte)   |\n| `@carbon/icons`         | Vanilla JavaScript | [Link](https://npmjs.com/package/@carbon/icons)         |\n\nIf you are using `@carbon/react`, you can directly import icons from\n`@carbon/react/icons`.\n\n## Migrating Carbon elements\n\nThe packages that we ship for the IBM Design Language have been updated in v11.\nThe most notable change is that these packages now require Dart Sass in order to\ncompile as they now use Sass Modules to improve compilation times.\n\nIf you were directly importing from one of these element packages, consider\nimporting from either `@carbon/styles` or `@carbon/react` instead. Both of these\npackages provide entrypoints for elements packages on top of the styles for\nCarbon itself.\n\nFor teams using these packages directly, you will need to update each of the\nelements packages you're using to the latest version.\n\n```bash\nnpm install @carbon/<package-name>@latest\n```\n\nOr, with [Yarn](https://yarnpkg.com/):\n\n```bash\nyarn upgrade @carbon/<package-name>@latest\n```\n\nAfterwards, you will need to update the import paths and import names themselves\nthat you bring in. In general, each package now supports importing from the\npackage directly and all `carbon--` prefixed variables, mixins, and functions\nhave been renamed to remove the prefix.\n\nFor full details fo the changes to each elements package, check out the links\nbelow.\n\n| Package            | Migration Docs                                                                                        |\n| :----------------- | :---------------------------------------------------------------------------------------------------- |\n| `@carbon/colors`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carboncolors)   |\n| `@carbon/elements` | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonelements) |\n| `@carbon/grid`     | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbongrid)     |\n| `@carbon/layout`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonlayout)   |\n| `@carbon/motion`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonmotion)   |\n| `@carbon/themes`   | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbonthemes)   |\n| `@carbon/type`     | [Link](https://github.com/carbon-design-system/carbon/blob/main/docs/migration/v11.md#carbontype)     |\n\nIf you were previously using the `@carbon/import-once` package, you can continue\nto use this in v11. However, this package will receive no further updates after\nCarbon switched to using Sass Modules.\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/migrating/guide/develop.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}