{"componentChunkName":"component---src-pages-guidelines-themes-code-mdx","path":"/guidelines/themes/code/","result":{"pageContext":{"frontmatter":{"label":"Themes are used to customize component styles to fit the specific aesthetic of a brand or product.","title":"Themes","description":"Themes are used to customize component styles to fit the specific aesthetic of a brand or product.","tabs":["Overview","Code"]},"relativePagePath":"/guidelines/themes/code.mdx","titleType":"prepend","MdxNode":{"id":"b5d2c509-606d-50d8-a157-0dea4434dcfa","children":[],"parent":"8e71810b-3f07-5c65-a716-e5ec28aed0f7","internal":{"content":"---\nlabel:\n  Themes are used to customize component styles to fit the specific aesthetic of\n  a brand or product.\ntitle: Themes\ndescription:\n  Themes are used to customize component styles to fit the specific aesthetic of\n  a brand or product.\ntabs: ['Overview', 'Code']\n---\n\n<PageDescription>\n\nUse the themes package to customize your product while maintaining consistency.\n\n</PageDescription>\n\n<InlineNotification>\n\nIf you're using `@carbon/react`, you probably don't need need to install the\nthemes package separately. See our [Carbon React](/developing/frameworks/react/)\nguide to start building.\n\n</InlineNotification>\n\n## Usage\n\nYou can use `@carbon/themes` in JavaScript or Sass by including this package in\nyour project. By default, `@carbon/themes` provides a set of color tokens that\nare pre-defined for a specific theme. Currently, we offer the following color\nthemes: white, gray 10, gray 90, gray 100.\n\nYou can preview all of the token values for this on the\n[color guidelines](/guidelines/color/usage) page.\n\n### Sass\n\nIf your project is using Sass, you can include this package and the\ncorresponding default theme by writing the following in your Sass file:\n\n```scss\n@use '@carbon/themes';\n\n.my-component {\n  // Use tokens from the theme, this will map to a CSS Custom Property\n  color: themes.$token-01;\n}\n\n:root {\n  // Emit CSS Custom Properties for the current theme\n  @include themes.theme();\n}\n\n// Get the value of a specific token\n$custom-variable: rgba(themes.get('token-01'), 0.25);\n```\n\nBy default, the white theme will be initialized. If you would like to include\nanother theme, you can do so by configuring the sass module using `with`. For\nexample:\n\n```scss\n@use '@carbon/themes/scss/themes' as *;\n@use '@carbon/themes' with (\n  $theme: $g100\n);\n```\n\nInline theming of theme switching can be done by using the mixin. For example:\n\n```scss\n@use '@carbon/themes/scss/themes' as *;\n@use '@carbon/themes';\n\n:root {\n  @include themes.theme($white);\n}\n\n[data-carbon-theme='g10'] {\n  @include themes.theme($g10);\n}\n\n[data-carbon-theme='g90'] {\n  @include themes.theme($g90);\n}\n\n[data-carbon-theme='g100'] {\n  @include themes.theme($g100);\n}\n```\n\nThemes can also be extended with your own custom tokens:\n\n```scss\n@use '@carbon/themes/scss/themes';\n@use '@carbon/themes' with (\n  $fallback: themes.$g100,\n  $theme: (\n    token-01: #000000,\n  )\n);\n```\n\n### JavaScript\n\nIf you're looking to use these themes in JavaScript, we export a variety of\nbindings for you to use, including:\n\n```js\nimport {\n  // An object of all themes\n  themes,\n\n  // Direct theme values\n  white,\n  g10,\n  g90,\n  g100,\n\n  // Specific token values\n  interactive01,\n  interactive02,\n} from '@carbon/themes';\n```\n\n## Resources\n\n<Row className=\"resource-card-group\">\n  <Column colMd={4} colLg={4} noGutterSm>\n    <ResourceCard\n      subTitle=\"Carbon theme package\"\n      href=\"https://github.com/carbon-design-system/carbon/tree/main/packages/themes\"\n    >\n\n<MdxIcon name=\"bee\" />\n\n  </ResourceCard>\n  </Column>\n  <Column colMd={4} colLg={4} noGutterSm>\n    <ResourceCard\n      subTitle=\"Themes package demo\"\n      href=\"https://carbon-elements.netlify.app/themes/examples/preview/\"\n    >\n\n<MdxIcon name=\"bee\" />\n\n  </ResourceCard>\n  </Column>\n</Row>\n","type":"Mdx","contentDigest":"821ee7c6f367c2c2506beed9a0fa0e4c","owner":"gatsby-plugin-mdx","counter":5048},"frontmatter":{"label":"Themes are used to customize component styles to fit the specific aesthetic of a brand or product.","title":"Themes","description":"Themes are used to customize component styles to fit the specific aesthetic of a brand or product.","tabs":["Overview","Code"]},"exports":{},"rawBody":"---\nlabel:\n  Themes are used to customize component styles to fit the specific aesthetic of\n  a brand or product.\ntitle: Themes\ndescription:\n  Themes are used to customize component styles to fit the specific aesthetic of\n  a brand or product.\ntabs: ['Overview', 'Code']\n---\n\n<PageDescription>\n\nUse the themes package to customize your product while maintaining consistency.\n\n</PageDescription>\n\n<InlineNotification>\n\nIf you're using `@carbon/react`, you probably don't need need to install the\nthemes package separately. See our [Carbon React](/developing/frameworks/react/)\nguide to start building.\n\n</InlineNotification>\n\n## Usage\n\nYou can use `@carbon/themes` in JavaScript or Sass by including this package in\nyour project. By default, `@carbon/themes` provides a set of color tokens that\nare pre-defined for a specific theme. Currently, we offer the following color\nthemes: white, gray 10, gray 90, gray 100.\n\nYou can preview all of the token values for this on the\n[color guidelines](/guidelines/color/usage) page.\n\n### Sass\n\nIf your project is using Sass, you can include this package and the\ncorresponding default theme by writing the following in your Sass file:\n\n```scss\n@use '@carbon/themes';\n\n.my-component {\n  // Use tokens from the theme, this will map to a CSS Custom Property\n  color: themes.$token-01;\n}\n\n:root {\n  // Emit CSS Custom Properties for the current theme\n  @include themes.theme();\n}\n\n// Get the value of a specific token\n$custom-variable: rgba(themes.get('token-01'), 0.25);\n```\n\nBy default, the white theme will be initialized. If you would like to include\nanother theme, you can do so by configuring the sass module using `with`. For\nexample:\n\n```scss\n@use '@carbon/themes/scss/themes' as *;\n@use '@carbon/themes' with (\n  $theme: $g100\n);\n```\n\nInline theming of theme switching can be done by using the mixin. For example:\n\n```scss\n@use '@carbon/themes/scss/themes' as *;\n@use '@carbon/themes';\n\n:root {\n  @include themes.theme($white);\n}\n\n[data-carbon-theme='g10'] {\n  @include themes.theme($g10);\n}\n\n[data-carbon-theme='g90'] {\n  @include themes.theme($g90);\n}\n\n[data-carbon-theme='g100'] {\n  @include themes.theme($g100);\n}\n```\n\nThemes can also be extended with your own custom tokens:\n\n```scss\n@use '@carbon/themes/scss/themes';\n@use '@carbon/themes' with (\n  $fallback: themes.$g100,\n  $theme: (\n    token-01: #000000,\n  )\n);\n```\n\n### JavaScript\n\nIf you're looking to use these themes in JavaScript, we export a variety of\nbindings for you to use, including:\n\n```js\nimport {\n  // An object of all themes\n  themes,\n\n  // Direct theme values\n  white,\n  g10,\n  g90,\n  g100,\n\n  // Specific token values\n  interactive01,\n  interactive02,\n} from '@carbon/themes';\n```\n\n## Resources\n\n<Row className=\"resource-card-group\">\n  <Column colMd={4} colLg={4} noGutterSm>\n    <ResourceCard\n      subTitle=\"Carbon theme package\"\n      href=\"https://github.com/carbon-design-system/carbon/tree/main/packages/themes\"\n    >\n\n<MdxIcon name=\"bee\" />\n\n  </ResourceCard>\n  </Column>\n  <Column colMd={4} colLg={4} noGutterSm>\n    <ResourceCard\n      subTitle=\"Themes package demo\"\n      href=\"https://carbon-elements.netlify.app/themes/examples/preview/\"\n    >\n\n<MdxIcon name=\"bee\" />\n\n  </ResourceCard>\n  </Column>\n</Row>\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/guidelines/themes/code.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}