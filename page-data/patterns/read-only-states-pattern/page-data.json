{"componentChunkName":"component---src-pages-patterns-read-only-states-pattern-index-mdx","path":"/patterns/read-only-states-pattern/","result":{"pageContext":{"frontmatter":{"title":"Read-only states","description":"Read-only states are applied to components that users can review but not modify and remove a component’s interactive functions."},"relativePagePath":"/patterns/read-only-states-pattern/index.mdx","titleType":"prepend","MdxNode":{"id":"9e33c22e-9b54-5d9f-bd63-a65a3e886832","children":[],"parent":"dedee2e6-6097-5305-b0db-bbc2f5f437d7","internal":{"content":"---\ntitle: Read-only states\ndescription:\n  Read-only states are applied to components that users can review but not\n  modify and remove a component’s interactive functions.\n---\n\n<PageDescription>\n\nRead-only states are applied to components when the user is allowed to review\nbut not modify the component. It removes all interactive functions from the\ncomponent.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Formatting</AnchorLink>\n  <AnchorLink>Visual guidance</AnchorLink>\n  <AnchorLink>Content</AnchorLink>\n  <AnchorLink>Accessibility</AnchorLink>\n  <AnchorLink>Related</AnchorLink>\n  <AnchorLink>References</AnchorLink>\n  <AnchorLink>Feedback</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nA read-only state is applied only to components the user can modify when toggled\nto enabled. Read-only states are considered active, and the data they contain\ncan be used in an application’s processes. This state change transforms a\ncomponent’s purpose to be purely informative rather than interactive.\n\n<Row>\n<Column colLg={12}>\n\n![Form component read-only states in context.](/images/read-only-full-image.png)\n\n<Caption>Form component read-only states in context.</Caption>\n\n</Column>\n</Row>\n\n### When to use\n\nThere are three main use cases that initiate a read-only state:\n\n| Use case            | Description                                                                                                     |\n| ------------------- | --------------------------------------------------------------------------------------------------------------- |\n| Application process | An application’s process temporarily restricts a user from modifying the component until the process completes. |\n| Locked              | An application restricts the number of users that can modify the component at the same time.                    |\n| Permissions         | A user’s credentials allow them to view the component but not modify it.                                        |\n\n### When not to use\n\n- If the component does not have an enabled state, do not use a read-only state\n  to display static information.\n- As an alternative to a disabled state, read-only and disabled states serve\n  different purposes. For example, when a component is temporarily unavailable\n  pending user actions or decisions (such as completing a form or choosing an\n  option), the component's state should be temporarily disabled, not read-only.\n- If the component would otherwise be disabled, components in a disabled state\n  should not change to a read-only state.\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={8}>\n\n![Read-only state anatomy.](/images/read-only-anatomy.png)\n\n<Caption>Read-only state anatomy.</Caption>\n\n</Column>\n</Row>\n\n1. **Background color change:** Having a transparent background for fields.\n2. **Border color change:** De-emphasizing selection and clickability to make\n   information more readable.\n3. **Text color no change:** Text color remains the same as in the enabled state\n   and should still pass 4.5:1 color contrast rules.\n4. **Icon color change:** Keeping embedded icons in the component for context\n   but displaying that icons are not interactive with color and cursor changes.\n\n## Visual guidance\n\nRead-only states use subtle changes to a component’s style to emphasize critical\ninformation and de-emphasize or remove icon signifiers.\n\n### Structure\n\nComponents should maintain the same structure and spacing used in the\ncomponent’s enabled state. In most cases, elements in the enabled state are\npresent in the read-only state.\n\n#### Selection controls\n\nSelection controls offer users a selection from pre-determined options. Common\nselection controls include: checkboxes, radio buttons, toggles, dropdowns,\nselects, combo boxes, and multiselects.\n\n<Row>\n<Column colLg={12}>\n\n![Read-only states for selection controls.](/images/read-only-selection-controls.png)\n\n<Caption>Read-only states for selection controls.</Caption>\n\n</Column>\n</Row>\n\n#### Bound entry controls\n\nBound entry controls allow users to input numeric data, like dates, times, and\nnumeric values. Common bound entry controls include: number inputs, sliders,\ndate pickers, and time pickers.\n\n<Row>\n<Column colLg={12}>\n\n![Read-only states for bound entry controls.](/images/read-only-bound-entry-controls.png)\n\n<Caption>Read-only states for bound entry controls.</Caption>\n\n</Column>\n</Row>\n\n### Interactive elements\n\nInteractive elements included in a component’s enabled state should be removed\nor modified for its read-only state. Changes to color are used to indicate a\nmodification to interactive elements and a change in their purpose from\ninteractive to informative. Color changes to field backgrounds, interactive\nelements, and icon signifiers are used to de-emphasize unavailable affordances\nin a component’s read-only state. The color of key informational elements (text,\nicons, and visualizations) should remain the same as the component’s enabled\nstate. Below are a few examples of components comparing their read-only and\nenabled states.\n\n#### Component fields\n\nThe default style component field background colors blend in with the overall UI\nor layer background for read-only states, whereas fluid component field\nbackgrounds retain the same enabled state background color.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Read-only\">\n\n![Read-only state for default and fluid component text field backgrounds.](images/read-only-component-fields.png)\n\n</Tab>\n\n<Tab label=\"Enabled\">\n\n![Enabled state for default and fluid component text field backgrounds.](images/read-only-component-fields-enabled.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n#### Component borders\n\nIn some cases, the border of controls in components changes color to emphasize\nselected items for read-only states and de-emphasizes control interactivity.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Read-only\">\n\n![Read-only state for component controls.](images/read-only-component-controls.png)\n\n</Tab>\n\n<Tab label=\"Enabled\">\n\n![Enabled state for component controls.](images/read-only-component-controls-enabled.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n#### Component icon signifiers\n\nSignifier icons included in a component’s enabled state, like chevron arrow\nicons, close icons, and calendar icons, should use the `$icon-disabled` color\ntoken.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Read-only\">\n\n![Read-only state for default and fluid time picker icon signifiers.](images/read-only-component-icon-signifiers.png)\n\n</Tab>\n\n<Tab label=\"Enabled\">\n\n![Enabled state for default and fluid time picker icon signifiers.](images/read-only-component-icon-signifiers-enabled.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n### Best practices\n\n#### State readability\n\nDon’t use a disabled state for components if they need to be read by the user.\nUnlike read-only states, disabled states are not read by screen readers and do\nnot pass visual contrast, making them inaccessible if they need to be\ninterpreted.\n\n#### Read-only viewports\n\nDo maintain a component’s disabled state when in a read-only view. Don’t change\na component’s state from disabled to read-only because of an active read-only\nview; some states should remain disabled depending on the use case.\n\n#### Disabled versus read-only states\n\nDo use a disabled state when a component is temporarily unavailable pending user\naction. Don’t change a component’s state from disabled to a read-only state.\nAlternatively, don’t use a read-only state to replace a disabled state.\n\n<DoDontRow>\n<DoDont\ntype=\"do\"\ncolMd={6} colLg={6}\ncaption=\"Do use if the component is not interactable but should be read by the user.\">\n\n![Do use if the component is not interactable but should be read by the user.](./images/read-only-do-1.png)\n\n</DoDont>\n<DoDont\ncolMd={6} colLg={6}\ntype=\"dont\"\ncaption=\"Don’t use disabled states in place of read-only states.\">\n\n![Don’t use disabled states in place of read-only states.](./images/read-only-dont-1.png)\n\n</DoDont>\n</DoDontRow>\n\n### Interactions\n\n#### Mouse\n\nThe arrow cursor reinforces that a component is in a read-only state and is not\ninteractive. The cursor's state reflects a component's shift in focus from\ninteractive to informative.\n\n<Row>\n<Column colLg={8}>\n\n![Read-only state arrow cursor.](/images/read-only-cursor.png)\n\n<Caption>Read-only state arrow cursor.</Caption>\n\n</Column>\n</Row>\n\n#### Keyboard\n\nInteractive operations included in a component’s enabled state should be removed\nor modified for its read-only state. The component should remain navigable with\na keyboard.\n\n## Content\n\nComponents should include the same content used in the component’s enabled\nstate. However, when the content in the enabled state is instructive, like a\ndropdown with no current selection, the content may need to change to be\ninformative.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Read-only\">\n\n![Read-only content for a dropdown with no selection.](images/read-only-content.png)\n\n</Tab>\n\n<Tab label=\"Enabled\">\n\n![Enabled content for a dropdown with no selection.](images/read-only-content-enabled.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n## Accessibility\n\nWhen considering keyboard accessibility,  it can be helpful to distinguish\nbetween navigation and operation. A component that can be reached by keyboard is\nnavigable. Read-only components remain navigable so that users can review the\ninformation they contain. This contrasts with disabled components, which cannot\nbe reached by a keyboard. However, read-only components are not operable,\nmeaning users can neither manipulate nor alter their values.\n\n## Related\n\n#### Components\n\n- [Checkbox](/components/checkbox/usage)\n- [Date picker](/components/date-picker/usage/)\n- [Dropdown](/components/dropdown/usage/)\n- [Number input](/components/number-input/usage/)\n- [Radio button](/components/radio-button/usage/)\n- [Slider](/components/slider/usage/)\n- [Text area](/components/text-input/usage/#text-area)\n- [Text input](/components/text-input/usage/#text-input)\n- [Toggle](/components/toggle/usage/)\n\n#### Patterns\n\n[Disabled states](https://carbondesignsystem.com/patterns/disabled-states/)\n\n#### Carbon for IBM Products\n\n[Read-only canvas](https://pages.github.ibm.com/cdai-design/pal/patterns/canvas/read-only-canvas)\n\n## References\n\n- MDN contributors,\n  [HTML attribute: read-only](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly),\n  (Mozilla Developer, 2022)\n- Aaron Gustafson,\n  [Web Forum Conundrum: disabled or read-only?](https://www.aaron-gustafson.com/notebook/web-form-conundrum-disabled-or-read-only/),\n  (2017)\n- W3 Schools,\n  [HTML Input Attributes](https://www.w3schools.com/html/html_form_attributes.asp),\n  (2022)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"0695bd789d68301aa406763149ba891b","owner":"gatsby-plugin-mdx","counter":4913},"frontmatter":{"title":"Read-only states","description":"Read-only states are applied to components that users can review but not modify and remove a component’s interactive functions."},"exports":{},"rawBody":"---\ntitle: Read-only states\ndescription:\n  Read-only states are applied to components that users can review but not\n  modify and remove a component’s interactive functions.\n---\n\n<PageDescription>\n\nRead-only states are applied to components when the user is allowed to review\nbut not modify the component. It removes all interactive functions from the\ncomponent.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Overview</AnchorLink>\n  <AnchorLink>Formatting</AnchorLink>\n  <AnchorLink>Visual guidance</AnchorLink>\n  <AnchorLink>Content</AnchorLink>\n  <AnchorLink>Accessibility</AnchorLink>\n  <AnchorLink>Related</AnchorLink>\n  <AnchorLink>References</AnchorLink>\n  <AnchorLink>Feedback</AnchorLink>\n</AnchorLinks>\n\n## Overview\n\nA read-only state is applied only to components the user can modify when toggled\nto enabled. Read-only states are considered active, and the data they contain\ncan be used in an application’s processes. This state change transforms a\ncomponent’s purpose to be purely informative rather than interactive.\n\n<Row>\n<Column colLg={12}>\n\n![Form component read-only states in context.](/images/read-only-full-image.png)\n\n<Caption>Form component read-only states in context.</Caption>\n\n</Column>\n</Row>\n\n### When to use\n\nThere are three main use cases that initiate a read-only state:\n\n| Use case            | Description                                                                                                     |\n| ------------------- | --------------------------------------------------------------------------------------------------------------- |\n| Application process | An application’s process temporarily restricts a user from modifying the component until the process completes. |\n| Locked              | An application restricts the number of users that can modify the component at the same time.                    |\n| Permissions         | A user’s credentials allow them to view the component but not modify it.                                        |\n\n### When not to use\n\n- If the component does not have an enabled state, do not use a read-only state\n  to display static information.\n- As an alternative to a disabled state, read-only and disabled states serve\n  different purposes. For example, when a component is temporarily unavailable\n  pending user actions or decisions (such as completing a form or choosing an\n  option), the component's state should be temporarily disabled, not read-only.\n- If the component would otherwise be disabled, components in a disabled state\n  should not change to a read-only state.\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={8}>\n\n![Read-only state anatomy.](/images/read-only-anatomy.png)\n\n<Caption>Read-only state anatomy.</Caption>\n\n</Column>\n</Row>\n\n1. **Background color change:** Having a transparent background for fields.\n2. **Border color change:** De-emphasizing selection and clickability to make\n   information more readable.\n3. **Text color no change:** Text color remains the same as in the enabled state\n   and should still pass 4.5:1 color contrast rules.\n4. **Icon color change:** Keeping embedded icons in the component for context\n   but displaying that icons are not interactive with color and cursor changes.\n\n## Visual guidance\n\nRead-only states use subtle changes to a component’s style to emphasize critical\ninformation and de-emphasize or remove icon signifiers.\n\n### Structure\n\nComponents should maintain the same structure and spacing used in the\ncomponent’s enabled state. In most cases, elements in the enabled state are\npresent in the read-only state.\n\n#### Selection controls\n\nSelection controls offer users a selection from pre-determined options. Common\nselection controls include: checkboxes, radio buttons, toggles, dropdowns,\nselects, combo boxes, and multiselects.\n\n<Row>\n<Column colLg={12}>\n\n![Read-only states for selection controls.](/images/read-only-selection-controls.png)\n\n<Caption>Read-only states for selection controls.</Caption>\n\n</Column>\n</Row>\n\n#### Bound entry controls\n\nBound entry controls allow users to input numeric data, like dates, times, and\nnumeric values. Common bound entry controls include: number inputs, sliders,\ndate pickers, and time pickers.\n\n<Row>\n<Column colLg={12}>\n\n![Read-only states for bound entry controls.](/images/read-only-bound-entry-controls.png)\n\n<Caption>Read-only states for bound entry controls.</Caption>\n\n</Column>\n</Row>\n\n### Interactive elements\n\nInteractive elements included in a component’s enabled state should be removed\nor modified for its read-only state. Changes to color are used to indicate a\nmodification to interactive elements and a change in their purpose from\ninteractive to informative. Color changes to field backgrounds, interactive\nelements, and icon signifiers are used to de-emphasize unavailable affordances\nin a component’s read-only state. The color of key informational elements (text,\nicons, and visualizations) should remain the same as the component’s enabled\nstate. Below are a few examples of components comparing their read-only and\nenabled states.\n\n#### Component fields\n\nThe default style component field background colors blend in with the overall UI\nor layer background for read-only states, whereas fluid component field\nbackgrounds retain the same enabled state background color.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Read-only\">\n\n![Read-only state for default and fluid component text field backgrounds.](images/read-only-component-fields.png)\n\n</Tab>\n\n<Tab label=\"Enabled\">\n\n![Enabled state for default and fluid component text field backgrounds.](images/read-only-component-fields-enabled.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n#### Component borders\n\nIn some cases, the border of controls in components changes color to emphasize\nselected items for read-only states and de-emphasizes control interactivity.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Read-only\">\n\n![Read-only state for component controls.](images/read-only-component-controls.png)\n\n</Tab>\n\n<Tab label=\"Enabled\">\n\n![Enabled state for component controls.](images/read-only-component-controls-enabled.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n#### Component icon signifiers\n\nSignifier icons included in a component’s enabled state, like chevron arrow\nicons, close icons, and calendar icons, should use the `$icon-disabled` color\ntoken.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Read-only\">\n\n![Read-only state for default and fluid time picker icon signifiers.](images/read-only-component-icon-signifiers.png)\n\n</Tab>\n\n<Tab label=\"Enabled\">\n\n![Enabled state for default and fluid time picker icon signifiers.](images/read-only-component-icon-signifiers-enabled.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n### Best practices\n\n#### State readability\n\nDon’t use a disabled state for components if they need to be read by the user.\nUnlike read-only states, disabled states are not read by screen readers and do\nnot pass visual contrast, making them inaccessible if they need to be\ninterpreted.\n\n#### Read-only viewports\n\nDo maintain a component’s disabled state when in a read-only view. Don’t change\na component’s state from disabled to read-only because of an active read-only\nview; some states should remain disabled depending on the use case.\n\n#### Disabled versus read-only states\n\nDo use a disabled state when a component is temporarily unavailable pending user\naction. Don’t change a component’s state from disabled to a read-only state.\nAlternatively, don’t use a read-only state to replace a disabled state.\n\n<DoDontRow>\n<DoDont\ntype=\"do\"\ncolMd={6} colLg={6}\ncaption=\"Do use if the component is not interactable but should be read by the user.\">\n\n![Do use if the component is not interactable but should be read by the user.](./images/read-only-do-1.png)\n\n</DoDont>\n<DoDont\ncolMd={6} colLg={6}\ntype=\"dont\"\ncaption=\"Don’t use disabled states in place of read-only states.\">\n\n![Don’t use disabled states in place of read-only states.](./images/read-only-dont-1.png)\n\n</DoDont>\n</DoDontRow>\n\n### Interactions\n\n#### Mouse\n\nThe arrow cursor reinforces that a component is in a read-only state and is not\ninteractive. The cursor's state reflects a component's shift in focus from\ninteractive to informative.\n\n<Row>\n<Column colLg={8}>\n\n![Read-only state arrow cursor.](/images/read-only-cursor.png)\n\n<Caption>Read-only state arrow cursor.</Caption>\n\n</Column>\n</Row>\n\n#### Keyboard\n\nInteractive operations included in a component’s enabled state should be removed\nor modified for its read-only state. The component should remain navigable with\na keyboard.\n\n## Content\n\nComponents should include the same content used in the component’s enabled\nstate. However, when the content in the enabled state is instructive, like a\ndropdown with no current selection, the content may need to change to be\ninformative.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Read-only\">\n\n![Read-only content for a dropdown with no selection.](images/read-only-content.png)\n\n</Tab>\n\n<Tab label=\"Enabled\">\n\n![Enabled content for a dropdown with no selection.](images/read-only-content-enabled.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n## Accessibility\n\nWhen considering keyboard accessibility,  it can be helpful to distinguish\nbetween navigation and operation. A component that can be reached by keyboard is\nnavigable. Read-only components remain navigable so that users can review the\ninformation they contain. This contrasts with disabled components, which cannot\nbe reached by a keyboard. However, read-only components are not operable,\nmeaning users can neither manipulate nor alter their values.\n\n## Related\n\n#### Components\n\n- [Checkbox](/components/checkbox/usage)\n- [Date picker](/components/date-picker/usage/)\n- [Dropdown](/components/dropdown/usage/)\n- [Number input](/components/number-input/usage/)\n- [Radio button](/components/radio-button/usage/)\n- [Slider](/components/slider/usage/)\n- [Text area](/components/text-input/usage/#text-area)\n- [Text input](/components/text-input/usage/#text-input)\n- [Toggle](/components/toggle/usage/)\n\n#### Patterns\n\n[Disabled states](https://carbondesignsystem.com/patterns/disabled-states/)\n\n#### Carbon for IBM Products\n\n[Read-only canvas](https://pages.github.ibm.com/cdai-design/pal/patterns/canvas/read-only-canvas)\n\n## References\n\n- MDN contributors,\n  [HTML attribute: read-only](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly),\n  (Mozilla Developer, 2022)\n- Aaron Gustafson,\n  [Web Forum Conundrum: disabled or read-only?](https://www.aaron-gustafson.com/notebook/web-form-conundrum-disabled-or-read-only/),\n  (2017)\n- W3 Schools,\n  [HTML Input Attributes](https://www.w3schools.com/html/html_form_attributes.asp),\n  (2022)\n\n## Feedback\n\nHelp us improve this pattern by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/patterns/read-only-states-pattern/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}