{"componentChunkName":"component---src-pages-components-inline-loading-usage-mdx","path":"/components/inline-loading/usage/","result":{"pageContext":{"frontmatter":{"title":"Inline loading","description":"The inline loading component provides visual feedback that a user's action is being processed.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/inline-loading/usage.mdx","titleType":"prepend","MdxNode":{"id":"5780ebba-a916-54c3-b29d-f14c340a274b","children":[],"parent":"c9a5a115-1da0-5b50-bed1-8f69591fb599","internal":{"content":"---\ntitle: Inline loading\ndescription:\n  The inline loading component provides visual feedback that a user's action is\n  being processed.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nThe inline loading component provides visual feedback that data is being\nprocessed.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nInline loading spinners are used when performing actions. They notify to the\nuser that their request is being processed. Although they do not provide details\nabout what is occurring on the back-end, they reassure the user that their\naction is being processed.\n\nCommon actions that benefit from inline loading include any create, update, or\ndelete actions that may have a lot of data to process. It can be used in a\ntable, after a primary or secondary button click, or even in a modal.\n\n### When to use\n\n- Use an inline loading component for any action that cannot be performed\n  instantly and will only require a short time to process.\n- Use when retrieving or refreshing small data amounts, such as status.\n\n### When not to use\n\n- Don't use inline loading for full page loads, use skeleton states instead.\n- Don't trigger inline loading on more than one item or action at a time, unless\n  on initial page load or refresh.\n\n## Live demo\n\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-inlineloading--default',\n    },\n    {\n      label: 'Ux Example',\n      variant: 'components-inlineloading--ux-example',\n    },\n  ]}\n/>\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline loading](images/inline-loading-anatomy.png)\n\n</Column>\n</Row>\n\n1. **Loading status**: indicates the state of the loading sequence (active,\n   inactive, finished, error).\n2. **Label (optional)**: assistive text that explains the loading status.\n\n### Placement\n\nWhen inline loading temporarily replaces content, it should appear in the same\nspot as the content it replaced and maintain the same alignment.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline loading placement](images/inline-loading-alignment.png)\n\n</Column>\n</Row>\n\n## Content\n\n### Main elements\n\n#### Label (optional)\n\n- Descriptive loading text for the action is optional, but encouraged. If you\n  have limited room or find adding text to be unnecessary you can just run\n  through the animations.\n- The label should describe the state of the action being performed. For\n  example, if the status is active while a form is being saved, then the label\n  should say “Saving ...”.\n- Once the loading status changes to finished, the label should change. For\n  example, when saving is finished, it would read “Saved”.\n- If the loading status changes to error, then the label should change to tell\n  the user that an error or failure has occurred.\n\n### Further guidance\n\nFor further content guidance, see Carbon's\n[content guidelines](/guidelines/content/overview).\n\n## Behaviors\n\n### States\n\nThere are four states to inline loading: inactive, active, success, and error.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline loading states](images/inline-loading-states.png)\n\n</Column>\n</Row>\n\n#### Inactive\n\nThe inactive loading state is when no data is being loaded. Inactive has no\nvisual indicator.\n\n#### Active\n\nThe active loading state indicates that the action is still in progress.\n\n#### Success\n\nThe success loading state indicates that the action completed successfully. The\nsuccess state is active for 1.5 seconds before calling an optional function\n`onSuccess`. Use the `onSuccess` function to refetch new data, close a modal, or\nreset a form. If no function is specified the success state will last\nindefinitely.\n\n#### Error\n\nThe error loading state indicates that the action did not successfully complete.\nIf an error occurs, the inline loading component becomes inactive and an inline\nnotification or error handling within the form should appear.\n\n### Interactions\n\nAny interactive elements associated with the item that is loading should be\ndisabled until the loading is complete. For example, in a file uploader the item\nthat is loading is disabled until fully uploaded. If the inline loading is being\nused to submit a form, the form fields should be disabled until the loading is\ncomplete.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline loading with disabled elements](images/inline-loading-interactions.png)\n\n</Column>\n</Row>\n\n### Modifiers\n\nIf an inline loading icon can gain context from an label, it can be used by\nitself without a visible label. It is most commonly used this way inside a field\ninput.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a standalone spinner](images/inline-loading-modifier.png)\n\n</Column>\n</Row>\n\n## Related\n\n- [Loading](/components/loading/usage)\n- [Skeleton states](https://www.carbondesignsystem.com/patterns/loading-pattern#skeleton-states)\n- [Loading pattern](/patterns/loading-pattern)\n- [File uploader](/components/file-uploader/usage)\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"77fbaec78c698c8dd84c0821016b171b","owner":"gatsby-plugin-mdx","counter":4766},"frontmatter":{"title":"Inline loading","description":"The inline loading component provides visual feedback that a user's action is being processed.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Inline loading\ndescription:\n  The inline loading component provides visual feedback that a user's action is\n  being processed.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nThe inline loading component provides visual feedback that data is being\nprocessed.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nInline loading spinners are used when performing actions. They notify to the\nuser that their request is being processed. Although they do not provide details\nabout what is occurring on the back-end, they reassure the user that their\naction is being processed.\n\nCommon actions that benefit from inline loading include any create, update, or\ndelete actions that may have a lot of data to process. It can be used in a\ntable, after a primary or secondary button click, or even in a modal.\n\n### When to use\n\n- Use an inline loading component for any action that cannot be performed\n  instantly and will only require a short time to process.\n- Use when retrieving or refreshing small data amounts, such as status.\n\n### When not to use\n\n- Don't use inline loading for full page loads, use skeleton states instead.\n- Don't trigger inline loading on more than one item or action at a time, unless\n  on initial page load or refresh.\n\n## Live demo\n\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-inlineloading--default',\n    },\n    {\n      label: 'Ux Example',\n      variant: 'components-inlineloading--ux-example',\n    },\n  ]}\n/>\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline loading](images/inline-loading-anatomy.png)\n\n</Column>\n</Row>\n\n1. **Loading status**: indicates the state of the loading sequence (active,\n   inactive, finished, error).\n2. **Label (optional)**: assistive text that explains the loading status.\n\n### Placement\n\nWhen inline loading temporarily replaces content, it should appear in the same\nspot as the content it replaced and maintain the same alignment.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline loading placement](images/inline-loading-alignment.png)\n\n</Column>\n</Row>\n\n## Content\n\n### Main elements\n\n#### Label (optional)\n\n- Descriptive loading text for the action is optional, but encouraged. If you\n  have limited room or find adding text to be unnecessary you can just run\n  through the animations.\n- The label should describe the state of the action being performed. For\n  example, if the status is active while a form is being saved, then the label\n  should say “Saving ...”.\n- Once the loading status changes to finished, the label should change. For\n  example, when saving is finished, it would read “Saved”.\n- If the loading status changes to error, then the label should change to tell\n  the user that an error or failure has occurred.\n\n### Further guidance\n\nFor further content guidance, see Carbon's\n[content guidelines](/guidelines/content/overview).\n\n## Behaviors\n\n### States\n\nThere are four states to inline loading: inactive, active, success, and error.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline loading states](images/inline-loading-states.png)\n\n</Column>\n</Row>\n\n#### Inactive\n\nThe inactive loading state is when no data is being loaded. Inactive has no\nvisual indicator.\n\n#### Active\n\nThe active loading state indicates that the action is still in progress.\n\n#### Success\n\nThe success loading state indicates that the action completed successfully. The\nsuccess state is active for 1.5 seconds before calling an optional function\n`onSuccess`. Use the `onSuccess` function to refetch new data, close a modal, or\nreset a form. If no function is specified the success state will last\nindefinitely.\n\n#### Error\n\nThe error loading state indicates that the action did not successfully complete.\nIf an error occurs, the inline loading component becomes inactive and an inline\nnotification or error handling within the form should appear.\n\n### Interactions\n\nAny interactive elements associated with the item that is loading should be\ndisabled until the loading is complete. For example, in a file uploader the item\nthat is loading is disabled until fully uploaded. If the inline loading is being\nused to submit a form, the form fields should be disabled until the loading is\ncomplete.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline loading with disabled elements](images/inline-loading-interactions.png)\n\n</Column>\n</Row>\n\n### Modifiers\n\nIf an inline loading icon can gain context from an label, it can be used by\nitself without a visible label. It is most commonly used this way inside a field\ninput.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a standalone spinner](images/inline-loading-modifier.png)\n\n</Column>\n</Row>\n\n## Related\n\n- [Loading](/components/loading/usage)\n- [Skeleton states](https://www.carbondesignsystem.com/patterns/loading-pattern#skeleton-states)\n- [Loading pattern](/patterns/loading-pattern)\n- [File uploader](/components/file-uploader/usage)\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/components/inline-loading/usage.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}