{"componentChunkName":"component---src-pages-developing-react-tutorial-step-1-mdx","path":"/developing/react-tutorial/step-1/","result":{"pageContext":{"frontmatter":{"title":"1. Installing Carbon","description":"Welcome to Carbon! This tutorial will guide you in creating a React app using Next.js with the Carbon Design System.","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up","FAQ"]},"relativePagePath":"/developing/react-tutorial/step-1.mdx","titleType":"prepend","MdxNode":{"id":"7b641858-446b-5b75-ab43-58920bc37fb0","children":[],"parent":"c18f631d-ee34-570a-b849-0c699b7a33fc","internal":{"content":"---\ntitle: 1. Installing Carbon\ndescription:\n  Welcome to Carbon! This tutorial will guide you in creating a React app using\n  Next.js with the Carbon Design System.\ntabs:\n  [\n    'Overview',\n    'Step 1',\n    'Step 2',\n    'Step 3',\n    'Step 4',\n    'Step 5',\n    'Wrapping up',\n    'FAQ',\n  ]\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nStarting from a base Create Next App, let's install Carbon and begin using\nCarbon components. By the end you will have a Next.js app that uses the UI Shell\nto navigate between pages.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Fork, clone and branch</AnchorLink>\n<AnchorLink>Build and start</AnchorLink>\n<AnchorLink>Install Carbon</AnchorLink>\n<AnchorLink>Install and build Sass</AnchorLink>\n<AnchorLink>Add UI Shell</AnchorLink>\n<AnchorLink>Create pages</AnchorLink>\n<AnchorLink>Add routing</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n## Preview\n\nA\n[preview](https://carbon-tutorial-nextjs-nrt4ljsgl-carbon-design-system.vercel.app/)\nof what you will build:\n\n<Preview\n  height=\"200\"\n  title=\"Carbon Next Tutorial Step 1\"\n  src=\"https://carbon-tutorial-nextjs-nrt4ljsgl-carbon-design-system.vercel.app/\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n/>\n\n## Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial-nextjs](https://github.com/carbon-design-system/carbon-tutorial-nextjs)\nthat we'll use as a starting point for each step.\n\n### Fork\n\nTo begin, fork\n[carbon-tutorial-nextjs](https://github.com/carbon-design-system/carbon-tutorial-nextjs)\nusing your GitHub account. Please note when forking you must untick “Copy the\nmain branch only” so you can access all branches / steps of the tutorial.\n\n### Clone\n\nGo to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory.\n\n```bash\ngit clone [your fork SSH/HTTPS]\ncd carbon-tutorial-nextjs\n```\n\n### Add upstream remote\n\nAdd a remote called `upstream` so we can eventually submit a pull request once\nyou have completed this tutorial step. There are two choices: SSH or HTTPS\n\n#### SSH\n\n```bash\ngit remote add upstream git@github.com:carbon-design-system/carbon-tutorial-nextjs.git\n```\n\n#### HTTPS\n\n```bash\ngit remote add upstream https://github.com/carbon-design-system/carbon-tutorial-nextjs.git\n```\n\nVerify that your forked repository remotes are correct:\n\n```bash\ngit remote -v\n```\n\nYour terminal should output something like this:\n\n```bash\norigin\t[your forked repo] (fetch)\norigin\t[your forked repo] (push)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-nextjs.git (fetch)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-nextjs.git (push)\n```\n\n### Branch\n\nNow that we have our repository set up, let's check out the branch for this\ntutorial step's starting point. Run the two commands:\n\n```bash\ngit fetch upstream\ngit checkout -b v11-next-step-1 upstream/v11-next-step-1\n```\n\n## Build and start\n\nWe have the repository forked to your GitHub account, cloned down to your\nmachine, and the starting branch checked out. Next, install the Next.js app's\ndependencies with:\n\n```bash\nyarn\n```\n\nAfter the dependencies are installed, create a build with:\n\n```bash\nyarn build\n```\n\nAfter the build and dependencies are installed, you can start the app with:\n\n```bash\nyarn dev\n```\n\nThis is a Next.js 13 app with a home page, its root layout and a global style\nsheet.\n\nYour default browser should open up with an empty page that says:\n`Hello Carbon! Well, not quite yet. This is the starting point for the Carbon React tutorial.`\n\n## Install Carbon\n\nEven though we installed existing dependencies, we've yet to install our v11\nCarbon package, `@carbon/react`, which contains everything you need to build\nwith.\n\nStop your development server with `CTRL-C` and install Carbon dependencies with:\n\n```bash\nyarn add @carbon/react@1.33.0\n```\n\n## Install and build Sass\n\nWe need to run a Sass build as the Carbon styles are authored in Sass, so run\nthe following command to install `sass` as a dependency.\n\n```bash\nyarn add sass@1.63.6\n```\n\nThen, start the app again. If your app's currently running, you'll need to\nrestart it for the new environment variable to be used.\n\n```bash\nyarn dev\n```\n\nThe app looks as it did before. Next, let's prepare our app for a Sass build.\n\nIn `src` directory, rename `globals.css` as `globals.scss` and change the import\nin `layout.js` from `global.css` to `globals.scss`.\n\n### Import carbon-component styles\n\nIn `globals.scss`, import the Carbon styles by adding the following at the top\nof the file:\n\n```scss path=src/app/globals.scss\n@use '@carbon/react';\n\n/// Remove overrides once Carbon bugs are fixed upstream.\n/// Need grid option to not add page gutters at large viewports, to also use when nesting grids\n/// @link https://github.com/carbon-design-system/carbon/issues/2792\n@media (min-width: 42rem) {\n  .cds--grid--no-gutter {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n}\n\n/// Padding was introduced in 10.3.0, needs an option to let grid set the viewport gutter\n/// @link https://github.com/carbon-design-system/carbon/issues/3010\n.cds--content {\n  margin-top: 3rem;\n  background: var(--cds-background);\n}\n```\n\nIn Next.js 13 there is a global style sheet and then every page has it own,\noptional, style sheet.\n\nNext, we'll import a `Button` from Carbon to test that our dependencies are\nworking properly. At the top of `page.js`, import the `Button` by adding the\nfollowing:\n\n```javascript path=src/app/page.js\n'use client';\nimport { Button } from '@carbon/react';\n```\n\nWe need `use client` since the Carbon components we use are all client\ncomponents. In Next 13 pages are pulled in as children to layout files (see\nRootLayout `src/app/layout.js`) and these are always server side components.\n\nIn the `Page` component return, you can now replace:\n\n```html path=src/app/page.js\n<div>\n  Hello Carbon! Well, not quite yet. This is the starting point for the Carbon\n  React tutorial.\n</div>\n```\n\nwith:\n\n```jsx path=src/app/page.js\n<Button>Button</Button>\n```\n\nCongratulations, you've imported your first component! You should see a Carbon\nstyled button on the page.\n\n## Add UI Shell\n\nNext, we're going to create a React component called `TutorialHeader` to use\nwith the UI Shell Carbon component. In the `src` directory, create a\n`components` directory and inside of that, a `TutorialHeader` directory. Create\nthe following files inside `src/components/TutorialHeader`:\n\n```bash\nsrc/components/TutorialHeader\n├──_tutorial-header.scss\n└──TutorialHeader.js\n```\n\n### Add UI Shell Sass\n\nNext, in `globals.scss`, we'll import our `TutorialHeader` styles. Add this line\nto the top of the file:\n\n```scss path=src/app/globals.scss\n@use '@/components/TutorialHeader/tutorial-header';\n```\n\n### Import and export the header\n\nNext we'll import our Carbon UI Shell components into `TutorialHeader.js`. Set\nup the file like so:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from '@carbon/react';\n\nconst TutorialHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label=\"Carbon Tutorial\">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label=\"Open menu\"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName href=\"/\" prefix=\"IBM\">\n          Carbon Tutorial\n        </HeaderName>\n        <HeaderNavigation aria-label=\"Carbon Tutorial\">\n          <HeaderMenuItem href=\"/repos\">Repositories</HeaderMenuItem>\n        </HeaderNavigation>\n        <SideNav\n          aria-label=\"Side navigation\"\n          expanded={isSideNavExpanded}\n          isPersistent={false}\n        >\n          <SideNavItems>\n            <HeaderSideNavItems>\n              <HeaderMenuItem href=\"/repos\">Repositories</HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems>\n        </SideNav>\n        <HeaderGlobalBar />\n      </Header>\n    )}\n  />\n);\n\nexport default TutorialHeader;\n```\n\n<InlineNotification>\n\n**Note:** you can find a description of the different components used in the UI\nShell in our\n[@carbon/react](https://github.com/carbon-design-system/carbon/tree/main/packages/react/src/components/UIShell)\npackage.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** When creating navigation headers, it's important to have a\n`Skip to content` link so keyboard users can skip the navigation items and go\nstraight to the main content.\n\n</InlineNotification>\n\n### Import icons\n\nFirst we will install the icons we will use in the header\n\n```bash\nyarn add @carbon/icons-react\n```\n\nNow let's import the icons. In the `TutorialHeader.js` file, we need to import\neach individual icon we will use.\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport { Switcher, Notification, UserAvatar } from '@carbon/icons-react';\n```\n\nThen we need to add the `HeaderGlobalAction` component inside of the\n`HeaderGlobalBar` where we will add our icons. These represent actions in the\nheader a user can make. Replace:\n\n```html path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderGlobalBar />\n```\n\nWith:\n\n```jsx path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderGlobalBar>\n  <HeaderGlobalAction aria-label=\"Notifications\" tooltipAlignment=\"center\">\n    <Notification size={20} />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label=\"User Avatar\" tooltipAlignment=\"center\">\n    <UserAvatar size={20} />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label=\"App Switcher\" tooltipAlignment=\"end\">\n    <Switcher size={20} />\n  </HeaderGlobalAction>\n</HeaderGlobalBar>\n```\n\n### Render the header\n\nNext we'll render our UI Shell by importing our `TutorialHeader` component and\n`Content` into a provider components in the Root Layout. We do this because\nlayout components in Next.js 13 are server-side components.\n\n<InlineNotification>\n\n**Note:** We can wrap the `{children}` in Root Layout with a Provider component\nthat will use to hold the components we want across all pages. See this\n[explanation](https://nextjs.org/docs/getting-started/react-essentials#rendering-third-party-context-providers-in-server-components)\nin Next docs.\n\n</InlineNotification>\n\n```javascript path=src/app/layout.js\nimport './globals.scss';\nimport { Providers } from './providers';\n\nexport const metadata = {\n  title: 'Carbon + Next13',\n  description: 'IBM Carbon Tutorial with Next.js 13',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\nCreate a `providers.js` file within the app folder with the following content.\n\n```javascript path=src/app/providers.js\n'use client';\n\nimport TutorialHeader from '@/components/TutorialHeader/TutorialHeader';\nimport { Content } from '@carbon/react';\n\nexport function Providers({ children }) {\n  return (\n    <div>\n      <TutorialHeader />\n      <Content>{children}</Content>\n    </div>\n  );\n}\n```\n\nYou should now see a styled UI Shell header and a button below it.\n\n## Create pages\n\nNext thing we need to do is create the files for our content. We already have a\nfolder called `app` in `src`. This should be a sibling of `src/components`.\n\nSince our app will have two pages, we'll create two folders in `src/app`.\n\n```bash\nsrc/app\n├── home\n└── repos\n```\n\nNext.js uses these folders for page routing which is built into the framework,\nwe do not need separate React routing. In each there is a `page.js` and\noptionally a `layout.js` and styling sheet.\n\nCreate the following files in the `home` folder:\n\n```bash\nsrc/app/home\n├── _landing-page.scss\n└── page.js\n```\n\nCreate the following files in the `repos` folder:\n\n```bash\nsrc/app/repos\n├── _repo-page.scss\n└── page.js\n```\n\n### Set up content Sass\n\nNext, we'll import our content Sass files in `globals.scss`, like so:\n\n```scss path=src/app/globals.scss\n@use '@/app/home/landing-page';\n@use '@/app/repos/repo-page';\n```\n\n### Import and export content pages\n\nNow that our stylesheets are set up, we need to create our pages' components.\nStarting with `LandingPage`, just like with our header, we need to export the\ncomponent in `javascript path=src/app/home/page.js` by adding:\n\n```javascript path=src/app/home/page.js\n`use client`;\n\nexport default function LandingPage() {\n  return <div>LANDING PAGE</div>;\n}\n```\n\nAnd we will add this into our root page:\n\n```javascript path=src/app/page.js\nimport LandingPage from './home/page';\n\nexport default function Page() {\n  return <LandingPage />;\n}\n```\n\nWe'll repeat this process with `RepoPage`.\n\n```javascript path=src/app/repos/page.js\n`use client`;\n\nexport default function RepoPage() {\n  return <div>REPO PAGE</div>;\n}\n```\n\nNavigate to the repos page by adding `/repos` at the end of your locally hosted\nsite to see your repos page.\n\nAwesome! We've just created our content pages with automatic page routing\ncourtesy of Next.js.\n\nAfter that we need to do a couple of quick fixes to the UI Shell to work with\nNext.js links.\n\nAdd the `Link` import in `TutorialHeader.js`:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport Link from 'next/link';\n```\n\nWe need to use the `Link` component instead of the default anchor elements to\nprevent full page reload when navigating to different pages in Next.js\napplications. To use `Link`, we wrap `HeaderName` component and pass through\n`href` elements to it:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<Link href=\"/\" passHref legacyBehavior>\n  <HeaderName prefix=\"IBM\">Carbon Tutorial</HeaderName>\n</Link>\n```\n\nDo the same with the components `HeaderNavigation` and `HeaderSideNavItems` that\ncontain `href=\"/repos\"`, updating them to:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderNavigation aria-label=\"Carbon Tutorial\">\n  <Link href=\"/repos\" passHref legacyBehavior>\n    <HeaderMenuItem>Repositories</HeaderMenuItem>\n  </Link>\n</HeaderNavigation>\n```\n\nand the following:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderSideNavItems>\n  <Link href=\"/repos\" passHref legacyBehavior>\n    <HeaderMenuItem>Repositories</HeaderMenuItem>\n  </Link>\n</HeaderSideNavItems>\n```\n\nYou should now have a working header that routes to different pages without full\npage reload! However, our page does not match the design specs. We need to\nchange the header theme to `g100` to match the specs.\n\nIn `providers.js` we will add inline theming for our navigation. First, we need\nto import our new `Theme` component.\n\n```javascript path=src/app/providers.js\nimport { Content, Theme } from '@carbon/react';\n```\n\nThen, we will wrap `Theme` around our header, and set the zoned theme using the\n`theme` prop, which accepts one of four strings: `\"white\"`, `\"g10\"`, `\"g90\"` or\n`\"g100\"`.\n\n```javascript path=src/app/providers.js\n<div>\n  <Theme theme=\"g100\">\n    <TutorialHeader />\n  </Theme>\n  <Content>{children}</Content>\n</div>\n```\n\nWe have one last thing to fix before we're done. Because we changed the header\ntheme to dark, the `<HeaderGlobalAction>` tooltips are now light instead of\ndark, and when you scroll the page, it blends into the content. To fix this,\nwe'll add some overriding styles in `_tutorial-header.scss`:\n\n```scss path=src/components/TutorialHeader/_tutorial-header.scss\n@use '@carbon/react/scss/colors';\n\n// overriding header tooltip bg color\n// because the navigation is dark themed while the content is white\n// which means the dark theme tooltip bg blends into the white content bg\n.cds--header__global .cds--popover-content {\n  background-color: colors.$gray-20;\n}\n\n.cds--header__global .cds--popover-caret {\n  background-color: colors.$gray-20;\n}\n```\n\n## Submit pull request\n\nWe're going to submit a pull request to verify completion of this tutorial step\nand demonstrate a couple of related concepts.\n\n### Continuous integration (CI) check\n\nWe have a `ci-check` script defined in `package.json` that verifies file\nformatting for files that have been touched since the last Git commit with a\ntool called [Prettier](https://prettier.io). You'd typically also have that\nscript run your test suite as part of your CI build. Go ahead and make sure\neverything looks good with:\n\n```bash\nyarn ci-check\n```\n\n<InlineNotification>\n\n**Note:** If the `ci-check` is giving an error, it's likely that some of your\nsource files are not properly formatted. This could happen if your text editor\nisn't formatting with Prettier on save. To get `ci-check` to pass, run\n`yarn format` then re-run `yarn ci-check`.\n\n</InlineNotification>\n\n### Git commit and push\n\nBefore we can create a pull request, stage and commit all of your changes:\n\n```bash\ngit add --all && git commit -m \"feat(tutorial): complete step 1\"\n```\n\n<InlineNotification>\n\n**Note:** You'll notice that your commit includes binaries in the `.yarn/cache`\nfolder. That's expected as the repository is configured to run\n[Yarn offline](https://yarnpkg.com/blog/2016/11/24/offline-mirror) for more\nreliable builds. Future tutorial steps that don't install new packages won't\nhave `.yarn/cache` commit changes.\n\n</InlineNotification>\n\nThen, push to your repository:\n\n```bash\ngit push origin v11-next-step-1\n```\n\n<InlineNotification>\n\n**Note:** If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n[create a personal access token for the command line](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line).\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If you receive a `non-fast-forward` error, it's likely that your\nforked repository is behind the original repository and needs to be updated.\nThis can happen if the tutorial was updated after you began working on it. To\nfix, run `git pull upstream v11-next-step-1` to merge the changes into your\nbranch, then you can try pushing again. Or, you can\n[manually merge](https://help.github.com/en/articles/syncing-a-fork) in the\nupstream changes.\n\n</InlineNotification>\n\n### Pull request (PR)\n\nFinally, visit\n[carbon-react-tutorial](https://github.com/carbon-design-system/carbon-tutorial-nextjs)\nto \"Compare & pull request\". In doing so, make sure that you are comparing to\n`v11-next-step-1` into `base: v11-next-step-1`. Take notice of the\n[Netlify](https://www.netlify.com) bot that deploys a preview of your PR every\ntime that you push new commits. These previews can be shared and viewed by\nanybody to assist the PR review process.\n\n<InlineNotification>\n\n**Note:** Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We'll close your PR so we can keep the repository's remote branches\npristine and ready for the next person!\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If your PR fails the CircleCI test with the error\n`Can't make a request in offline mode`, try running the following command:\n`rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install`.\nAdd and commit the changes once this completes, and try pushing again.\n\n</InlineNotification>\n","type":"Mdx","contentDigest":"05ea918a5b7115d3f2c871ac550a760c","owner":"gatsby-plugin-mdx","counter":4832},"frontmatter":{"title":"1. Installing Carbon","description":"Welcome to Carbon! This tutorial will guide you in creating a React app using Next.js with the Carbon Design System.","tabs":["Overview","Step 1","Step 2","Step 3","Step 4","Step 5","Wrapping up","FAQ"]},"exports":{},"rawBody":"---\ntitle: 1. Installing Carbon\ndescription:\n  Welcome to Carbon! This tutorial will guide you in creating a React app using\n  Next.js with the Carbon Design System.\ntabs:\n  [\n    'Overview',\n    'Step 1',\n    'Step 2',\n    'Step 3',\n    'Step 4',\n    'Step 5',\n    'Wrapping up',\n    'FAQ',\n  ]\n---\n\nimport Preview from 'components/Preview';\n\n<PageDescription>\n\nStarting from a base Create Next App, let's install Carbon and begin using\nCarbon components. By the end you will have a Next.js app that uses the UI Shell\nto navigate between pages.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Fork, clone and branch</AnchorLink>\n<AnchorLink>Build and start</AnchorLink>\n<AnchorLink>Install Carbon</AnchorLink>\n<AnchorLink>Install and build Sass</AnchorLink>\n<AnchorLink>Add UI Shell</AnchorLink>\n<AnchorLink>Create pages</AnchorLink>\n<AnchorLink>Add routing</AnchorLink>\n<AnchorLink>Submit pull request</AnchorLink>\n\n</AnchorLinks>\n\n## Preview\n\nA\n[preview](https://carbon-tutorial-nextjs-nrt4ljsgl-carbon-design-system.vercel.app/)\nof what you will build:\n\n<Preview\n  height=\"200\"\n  title=\"Carbon Next Tutorial Step 1\"\n  src=\"https://carbon-tutorial-nextjs-nrt4ljsgl-carbon-design-system.vercel.app/\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n/>\n\n## Fork, clone and branch\n\nThis tutorial has an accompanying GitHub repository called\n[carbon-tutorial-nextjs](https://github.com/carbon-design-system/carbon-tutorial-nextjs)\nthat we'll use as a starting point for each step.\n\n### Fork\n\nTo begin, fork\n[carbon-tutorial-nextjs](https://github.com/carbon-design-system/carbon-tutorial-nextjs)\nusing your GitHub account. Please note when forking you must untick “Copy the\nmain branch only” so you can access all branches / steps of the tutorial.\n\n### Clone\n\nGo to your forked repository, copy the SSH or HTTPS URL and in your terminal run\nthe two commands to get the repository in your local file system and enter that\ndirectory.\n\n```bash\ngit clone [your fork SSH/HTTPS]\ncd carbon-tutorial-nextjs\n```\n\n### Add upstream remote\n\nAdd a remote called `upstream` so we can eventually submit a pull request once\nyou have completed this tutorial step. There are two choices: SSH or HTTPS\n\n#### SSH\n\n```bash\ngit remote add upstream git@github.com:carbon-design-system/carbon-tutorial-nextjs.git\n```\n\n#### HTTPS\n\n```bash\ngit remote add upstream https://github.com/carbon-design-system/carbon-tutorial-nextjs.git\n```\n\nVerify that your forked repository remotes are correct:\n\n```bash\ngit remote -v\n```\n\nYour terminal should output something like this:\n\n```bash\norigin\t[your forked repo] (fetch)\norigin\t[your forked repo] (push)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-nextjs.git (fetch)\nupstream\tgit@github.com:carbon-design-system/carbon-tutorial-nextjs.git (push)\n```\n\n### Branch\n\nNow that we have our repository set up, let's check out the branch for this\ntutorial step's starting point. Run the two commands:\n\n```bash\ngit fetch upstream\ngit checkout -b v11-next-step-1 upstream/v11-next-step-1\n```\n\n## Build and start\n\nWe have the repository forked to your GitHub account, cloned down to your\nmachine, and the starting branch checked out. Next, install the Next.js app's\ndependencies with:\n\n```bash\nyarn\n```\n\nAfter the dependencies are installed, create a build with:\n\n```bash\nyarn build\n```\n\nAfter the build and dependencies are installed, you can start the app with:\n\n```bash\nyarn dev\n```\n\nThis is a Next.js 13 app with a home page, its root layout and a global style\nsheet.\n\nYour default browser should open up with an empty page that says:\n`Hello Carbon! Well, not quite yet. This is the starting point for the Carbon React tutorial.`\n\n## Install Carbon\n\nEven though we installed existing dependencies, we've yet to install our v11\nCarbon package, `@carbon/react`, which contains everything you need to build\nwith.\n\nStop your development server with `CTRL-C` and install Carbon dependencies with:\n\n```bash\nyarn add @carbon/react@1.33.0\n```\n\n## Install and build Sass\n\nWe need to run a Sass build as the Carbon styles are authored in Sass, so run\nthe following command to install `sass` as a dependency.\n\n```bash\nyarn add sass@1.63.6\n```\n\nThen, start the app again. If your app's currently running, you'll need to\nrestart it for the new environment variable to be used.\n\n```bash\nyarn dev\n```\n\nThe app looks as it did before. Next, let's prepare our app for a Sass build.\n\nIn `src` directory, rename `globals.css` as `globals.scss` and change the import\nin `layout.js` from `global.css` to `globals.scss`.\n\n### Import carbon-component styles\n\nIn `globals.scss`, import the Carbon styles by adding the following at the top\nof the file:\n\n```scss path=src/app/globals.scss\n@use '@carbon/react';\n\n/// Remove overrides once Carbon bugs are fixed upstream.\n/// Need grid option to not add page gutters at large viewports, to also use when nesting grids\n/// @link https://github.com/carbon-design-system/carbon/issues/2792\n@media (min-width: 42rem) {\n  .cds--grid--no-gutter {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n}\n\n/// Padding was introduced in 10.3.0, needs an option to let grid set the viewport gutter\n/// @link https://github.com/carbon-design-system/carbon/issues/3010\n.cds--content {\n  margin-top: 3rem;\n  background: var(--cds-background);\n}\n```\n\nIn Next.js 13 there is a global style sheet and then every page has it own,\noptional, style sheet.\n\nNext, we'll import a `Button` from Carbon to test that our dependencies are\nworking properly. At the top of `page.js`, import the `Button` by adding the\nfollowing:\n\n```javascript path=src/app/page.js\n'use client';\nimport { Button } from '@carbon/react';\n```\n\nWe need `use client` since the Carbon components we use are all client\ncomponents. In Next 13 pages are pulled in as children to layout files (see\nRootLayout `src/app/layout.js`) and these are always server side components.\n\nIn the `Page` component return, you can now replace:\n\n```html path=src/app/page.js\n<div>\n  Hello Carbon! Well, not quite yet. This is the starting point for the Carbon\n  React tutorial.\n</div>\n```\n\nwith:\n\n```jsx path=src/app/page.js\n<Button>Button</Button>\n```\n\nCongratulations, you've imported your first component! You should see a Carbon\nstyled button on the page.\n\n## Add UI Shell\n\nNext, we're going to create a React component called `TutorialHeader` to use\nwith the UI Shell Carbon component. In the `src` directory, create a\n`components` directory and inside of that, a `TutorialHeader` directory. Create\nthe following files inside `src/components/TutorialHeader`:\n\n```bash\nsrc/components/TutorialHeader\n├──_tutorial-header.scss\n└──TutorialHeader.js\n```\n\n### Add UI Shell Sass\n\nNext, in `globals.scss`, we'll import our `TutorialHeader` styles. Add this line\nto the top of the file:\n\n```scss path=src/app/globals.scss\n@use '@/components/TutorialHeader/tutorial-header';\n```\n\n### Import and export the header\n\nNext we'll import our Carbon UI Shell components into `TutorialHeader.js`. Set\nup the file like so:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport {\n  Header,\n  HeaderContainer,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuButton,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n  SideNav,\n  SideNavItems,\n  HeaderSideNavItems,\n} from '@carbon/react';\n\nconst TutorialHeader = () => (\n  <HeaderContainer\n    render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n      <Header aria-label=\"Carbon Tutorial\">\n        <SkipToContent />\n        <HeaderMenuButton\n          aria-label=\"Open menu\"\n          onClick={onClickSideNavExpand}\n          isActive={isSideNavExpanded}\n        />\n        <HeaderName href=\"/\" prefix=\"IBM\">\n          Carbon Tutorial\n        </HeaderName>\n        <HeaderNavigation aria-label=\"Carbon Tutorial\">\n          <HeaderMenuItem href=\"/repos\">Repositories</HeaderMenuItem>\n        </HeaderNavigation>\n        <SideNav\n          aria-label=\"Side navigation\"\n          expanded={isSideNavExpanded}\n          isPersistent={false}\n        >\n          <SideNavItems>\n            <HeaderSideNavItems>\n              <HeaderMenuItem href=\"/repos\">Repositories</HeaderMenuItem>\n            </HeaderSideNavItems>\n          </SideNavItems>\n        </SideNav>\n        <HeaderGlobalBar />\n      </Header>\n    )}\n  />\n);\n\nexport default TutorialHeader;\n```\n\n<InlineNotification>\n\n**Note:** you can find a description of the different components used in the UI\nShell in our\n[@carbon/react](https://github.com/carbon-design-system/carbon/tree/main/packages/react/src/components/UIShell)\npackage.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** When creating navigation headers, it's important to have a\n`Skip to content` link so keyboard users can skip the navigation items and go\nstraight to the main content.\n\n</InlineNotification>\n\n### Import icons\n\nFirst we will install the icons we will use in the header\n\n```bash\nyarn add @carbon/icons-react\n```\n\nNow let's import the icons. In the `TutorialHeader.js` file, we need to import\neach individual icon we will use.\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport { Switcher, Notification, UserAvatar } from '@carbon/icons-react';\n```\n\nThen we need to add the `HeaderGlobalAction` component inside of the\n`HeaderGlobalBar` where we will add our icons. These represent actions in the\nheader a user can make. Replace:\n\n```html path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderGlobalBar />\n```\n\nWith:\n\n```jsx path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderGlobalBar>\n  <HeaderGlobalAction aria-label=\"Notifications\" tooltipAlignment=\"center\">\n    <Notification size={20} />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label=\"User Avatar\" tooltipAlignment=\"center\">\n    <UserAvatar size={20} />\n  </HeaderGlobalAction>\n  <HeaderGlobalAction aria-label=\"App Switcher\" tooltipAlignment=\"end\">\n    <Switcher size={20} />\n  </HeaderGlobalAction>\n</HeaderGlobalBar>\n```\n\n### Render the header\n\nNext we'll render our UI Shell by importing our `TutorialHeader` component and\n`Content` into a provider components in the Root Layout. We do this because\nlayout components in Next.js 13 are server-side components.\n\n<InlineNotification>\n\n**Note:** We can wrap the `{children}` in Root Layout with a Provider component\nthat will use to hold the components we want across all pages. See this\n[explanation](https://nextjs.org/docs/getting-started/react-essentials#rendering-third-party-context-providers-in-server-components)\nin Next docs.\n\n</InlineNotification>\n\n```javascript path=src/app/layout.js\nimport './globals.scss';\nimport { Providers } from './providers';\n\nexport const metadata = {\n  title: 'Carbon + Next13',\n  description: 'IBM Carbon Tutorial with Next.js 13',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n```\n\nCreate a `providers.js` file within the app folder with the following content.\n\n```javascript path=src/app/providers.js\n'use client';\n\nimport TutorialHeader from '@/components/TutorialHeader/TutorialHeader';\nimport { Content } from '@carbon/react';\n\nexport function Providers({ children }) {\n  return (\n    <div>\n      <TutorialHeader />\n      <Content>{children}</Content>\n    </div>\n  );\n}\n```\n\nYou should now see a styled UI Shell header and a button below it.\n\n## Create pages\n\nNext thing we need to do is create the files for our content. We already have a\nfolder called `app` in `src`. This should be a sibling of `src/components`.\n\nSince our app will have two pages, we'll create two folders in `src/app`.\n\n```bash\nsrc/app\n├── home\n└── repos\n```\n\nNext.js uses these folders for page routing which is built into the framework,\nwe do not need separate React routing. In each there is a `page.js` and\noptionally a `layout.js` and styling sheet.\n\nCreate the following files in the `home` folder:\n\n```bash\nsrc/app/home\n├── _landing-page.scss\n└── page.js\n```\n\nCreate the following files in the `repos` folder:\n\n```bash\nsrc/app/repos\n├── _repo-page.scss\n└── page.js\n```\n\n### Set up content Sass\n\nNext, we'll import our content Sass files in `globals.scss`, like so:\n\n```scss path=src/app/globals.scss\n@use '@/app/home/landing-page';\n@use '@/app/repos/repo-page';\n```\n\n### Import and export content pages\n\nNow that our stylesheets are set up, we need to create our pages' components.\nStarting with `LandingPage`, just like with our header, we need to export the\ncomponent in `javascript path=src/app/home/page.js` by adding:\n\n```javascript path=src/app/home/page.js\n`use client`;\n\nexport default function LandingPage() {\n  return <div>LANDING PAGE</div>;\n}\n```\n\nAnd we will add this into our root page:\n\n```javascript path=src/app/page.js\nimport LandingPage from './home/page';\n\nexport default function Page() {\n  return <LandingPage />;\n}\n```\n\nWe'll repeat this process with `RepoPage`.\n\n```javascript path=src/app/repos/page.js\n`use client`;\n\nexport default function RepoPage() {\n  return <div>REPO PAGE</div>;\n}\n```\n\nNavigate to the repos page by adding `/repos` at the end of your locally hosted\nsite to see your repos page.\n\nAwesome! We've just created our content pages with automatic page routing\ncourtesy of Next.js.\n\nAfter that we need to do a couple of quick fixes to the UI Shell to work with\nNext.js links.\n\nAdd the `Link` import in `TutorialHeader.js`:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\nimport Link from 'next/link';\n```\n\nWe need to use the `Link` component instead of the default anchor elements to\nprevent full page reload when navigating to different pages in Next.js\napplications. To use `Link`, we wrap `HeaderName` component and pass through\n`href` elements to it:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<Link href=\"/\" passHref legacyBehavior>\n  <HeaderName prefix=\"IBM\">Carbon Tutorial</HeaderName>\n</Link>\n```\n\nDo the same with the components `HeaderNavigation` and `HeaderSideNavItems` that\ncontain `href=\"/repos\"`, updating them to:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderNavigation aria-label=\"Carbon Tutorial\">\n  <Link href=\"/repos\" passHref legacyBehavior>\n    <HeaderMenuItem>Repositories</HeaderMenuItem>\n  </Link>\n</HeaderNavigation>\n```\n\nand the following:\n\n```javascript path=src/components/TutorialHeader/TutorialHeader.js\n<HeaderSideNavItems>\n  <Link href=\"/repos\" passHref legacyBehavior>\n    <HeaderMenuItem>Repositories</HeaderMenuItem>\n  </Link>\n</HeaderSideNavItems>\n```\n\nYou should now have a working header that routes to different pages without full\npage reload! However, our page does not match the design specs. We need to\nchange the header theme to `g100` to match the specs.\n\nIn `providers.js` we will add inline theming for our navigation. First, we need\nto import our new `Theme` component.\n\n```javascript path=src/app/providers.js\nimport { Content, Theme } from '@carbon/react';\n```\n\nThen, we will wrap `Theme` around our header, and set the zoned theme using the\n`theme` prop, which accepts one of four strings: `\"white\"`, `\"g10\"`, `\"g90\"` or\n`\"g100\"`.\n\n```javascript path=src/app/providers.js\n<div>\n  <Theme theme=\"g100\">\n    <TutorialHeader />\n  </Theme>\n  <Content>{children}</Content>\n</div>\n```\n\nWe have one last thing to fix before we're done. Because we changed the header\ntheme to dark, the `<HeaderGlobalAction>` tooltips are now light instead of\ndark, and when you scroll the page, it blends into the content. To fix this,\nwe'll add some overriding styles in `_tutorial-header.scss`:\n\n```scss path=src/components/TutorialHeader/_tutorial-header.scss\n@use '@carbon/react/scss/colors';\n\n// overriding header tooltip bg color\n// because the navigation is dark themed while the content is white\n// which means the dark theme tooltip bg blends into the white content bg\n.cds--header__global .cds--popover-content {\n  background-color: colors.$gray-20;\n}\n\n.cds--header__global .cds--popover-caret {\n  background-color: colors.$gray-20;\n}\n```\n\n## Submit pull request\n\nWe're going to submit a pull request to verify completion of this tutorial step\nand demonstrate a couple of related concepts.\n\n### Continuous integration (CI) check\n\nWe have a `ci-check` script defined in `package.json` that verifies file\nformatting for files that have been touched since the last Git commit with a\ntool called [Prettier](https://prettier.io). You'd typically also have that\nscript run your test suite as part of your CI build. Go ahead and make sure\neverything looks good with:\n\n```bash\nyarn ci-check\n```\n\n<InlineNotification>\n\n**Note:** If the `ci-check` is giving an error, it's likely that some of your\nsource files are not properly formatted. This could happen if your text editor\nisn't formatting with Prettier on save. To get `ci-check` to pass, run\n`yarn format` then re-run `yarn ci-check`.\n\n</InlineNotification>\n\n### Git commit and push\n\nBefore we can create a pull request, stage and commit all of your changes:\n\n```bash\ngit add --all && git commit -m \"feat(tutorial): complete step 1\"\n```\n\n<InlineNotification>\n\n**Note:** You'll notice that your commit includes binaries in the `.yarn/cache`\nfolder. That's expected as the repository is configured to run\n[Yarn offline](https://yarnpkg.com/blog/2016/11/24/offline-mirror) for more\nreliable builds. Future tutorial steps that don't install new packages won't\nhave `.yarn/cache` commit changes.\n\n</InlineNotification>\n\nThen, push to your repository:\n\n```bash\ngit push origin v11-next-step-1\n```\n\n<InlineNotification>\n\n**Note:** If your Git remote protocol is HTTPS instead of SSH, you may be\nprompted to authenticate with GitHub when you push changes. If your GitHub\naccount has two-factor authentication enabled, we recommend that you follow\nthese instructions to\n[create a personal access token for the command line](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line).\nThat lets you use your token instead of password when performing Git operations\nover HTTPS.\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If you receive a `non-fast-forward` error, it's likely that your\nforked repository is behind the original repository and needs to be updated.\nThis can happen if the tutorial was updated after you began working on it. To\nfix, run `git pull upstream v11-next-step-1` to merge the changes into your\nbranch, then you can try pushing again. Or, you can\n[manually merge](https://help.github.com/en/articles/syncing-a-fork) in the\nupstream changes.\n\n</InlineNotification>\n\n### Pull request (PR)\n\nFinally, visit\n[carbon-react-tutorial](https://github.com/carbon-design-system/carbon-tutorial-nextjs)\nto \"Compare & pull request\". In doing so, make sure that you are comparing to\n`v11-next-step-1` into `base: v11-next-step-1`. Take notice of the\n[Netlify](https://www.netlify.com) bot that deploys a preview of your PR every\ntime that you push new commits. These previews can be shared and viewed by\nanybody to assist the PR review process.\n\n<InlineNotification>\n\n**Note:** Expect your tutorial step PRs to be reviewed by the Carbon team but\nnot merged. We'll close your PR so we can keep the repository's remote branches\npristine and ready for the next person!\n\n</InlineNotification>\n\n<InlineNotification>\n\n**Note:** If your PR fails the CircleCI test with the error\n`Can't make a request in offline mode`, try running the following command:\n`rm -rf .yarn-offline-mirror node_modules && yarn cache clean && yarn install`.\nAdd and commit the changes once this completes, and try pushing again.\n\n</InlineNotification>\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/developing/react-tutorial/step-1.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}