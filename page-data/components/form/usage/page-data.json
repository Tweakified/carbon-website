{"componentChunkName":"component---src-pages-components-form-usage-mdx","path":"/components/form/usage/","result":{"pageContext":{"frontmatter":{"title":"Form","description":"Forms are used for submitting data. Consider each field and what value the data will provide.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/form/usage.mdx","titleType":"prepend","MdxNode":{"id":"f87699a0-9a7e-563d-8148-0025491943b9","children":[],"parent":"f5e9b968-f803-598f-a23e-ceb0440f626c","internal":{"content":"---\ntitle: Form\ndescription:\n  Forms are used for submitting data. Consider each field and what value the\n  data will provide.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nA form is a group of related input controls that allows users to provide data or\nconfigure options.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Additional guidance</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nThe form component is configurable to fit various use cases and layouts. It is\npurposely simple out of the box, and users are responsible for configuring it to\nsuit their needs. For in-depth design guidance on the different ways to\nconfigure and extend a form, see the\n[form pattern](/patterns/forms-pattern/#spacing).\n\n## Live demo\n\n<StorybookDemo\n  themeSelector\n  tall\n  wide\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-form--default',\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-fluidform--default',\n    },\n  ]}\n/>\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Default\">\n\n![Anatomy of a default form](images/form-usage-1.png)\n\n</Tab>\n\n<Tab label=\"Fluid\">\n\n![Anatomy of a fluid form](images/form-usage-1-fluid.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n1. **Header** (optional): The addition of a title and description as a header\n   that can provide the user with additional context or instructions.\n2. **Form body**: Area where users provide information. Information can be\n   entered through various input fields, including text fields, checkboxes, and\n   many other types. Input components contain labels and helper text that the\n   user submits correct data.\n3. **Footer**: Provides actions that allow users to submit or cancel the data\n   entered in the form.\n\n### Styling\n\nForms can use two styles of inputs: default and fluid. They share the same\nfunctionality but look visually different and have different alignment rules.\n\n| Style   | Appearance                                                                                                                                                                                                         | Alignment                                                                         | Use case                                                                                                                                     |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| Default | Uses a traditional style of input where the label is positioned outside and above the input field. Default forms can use any of the three default input field sizes: small (32px), medium (40px), or large (48px). | Form inputs are equally stacked with 32px/2rem padding separating each component. | Use when white space is needed between input components, if smaller components are required, or in productive moments like in complex forms. |\n| Fluid   | An alternative input style where the label is placed inside the input field and aligned with the user input text. Fluid inputs only have one size at the height of 64px.                                           | Form inputs are stacked flush to one another with 0px of padding between them.    | Use in expressive moments or where larger form components can aid in emphasizing the featured form.                                          |\n\n<Row>\n<Column colLg={12}>\n\n![Examples of a default and fluid form styles](images/form-usage-2.png)\n\n</Column>\n</Row>\n\n### Alignment\n\nIn a form, input components should vertically align with all other form\ncomponents. Whether a form aligns flush to grid columns or hangs in the gutters\ndepends on the style of form input you are using as well as the gutter mode.\nDefault forms typically use a wide gutter mode and align flush to the grid\ncolumns prioritizing vertical label alignment. Fluid forms use the condensed\ngrid and can hang into the gutter without causing label misalignment. Fluid\nforms are architectural and remain cohesive by never allowing vertical or\nhorizontal space between inputs.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do align default form inputs and labels to the grid columns using the wide gutter mode.\">\n\n![An example showing a properly aligned default inputs](images/form-usage-3-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Don’t hang default inputs into the grid gutters. Doing so will cause labels to misalign with other form elements.\">\n\n![An example showing incorrectly aligned default inputs](images/form-usage-3-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do stack fluid components flush to one another with no spacing between them using the condensed gutter mode.\">\n\n![An example showing a properly stacked fluid inputs](images/form-usage-4-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Don’t add vertical or horizontal space between fluid components. Fluid forms are architectural and should remain a cohesive unit.\">\n\n![An example showing incorrectly arranged fluid inputs](images/form-usage-4-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Two column forms\n\nIf a form has more than one column, then the columns should be proportional and\nalign to grid columns when possible. The space between form columns is\ndetermined by the gutter mode you are using; default forms use the wide gutter\nmode with 32px padding between form columns, versus fluid forms use the\ncondensed gutter mode with 1px padding. The narrow gutter mode (16px) is\ntypically not used in forms as it often places the text in the gutter.\n\n<Row>\n<Column colLg={8}>\n\n![Examples of two column forms](images/form-usage-5.png)\n\n</Column>\n</Row>\n\nWhen using two columns, the row should respond as a group. For example, if the\nleft column form item becomes invalid and pushes form content down to\naccommodate space for an error message, then the accompanying right form item\nwill also grow to account for the needed space.\n\n<Row>\n<Column colLg={8}>\n\n![Examples of an invalid state with two columns](images/form-usage-5b.png)\n\n</Column>\n</Row>\n\n### Vertical spacing\n\nThe typical recommended vertical spacing between components is 32px. For all\nguidance and recommendation for spacing for forms, see the\n[form pattern](/patterns/forms-pattern/#spacing).\n\n## Content\n\n### Labels\n\nEffective labeling helps users understand what information to enter into a text\ninput. Text fields should always have a label. There are rare instances where\nthe context of an input negates the need for a visible label, but we advise you\nto consult an accessibility expert before proceeding with a label-less design.\n\n#### Best practices for labels\n\n- Use sentence-style capitalization for all labels except for product names and\n  proper nouns.\n- Keep the label short and concise.\n- Do not use colons after label names.\n\n### Default values\n\nWhere possible, add programmatic assistance. Detect and pre-fill inputs to\nreduce errors and save time. When the software can’t determine the value that\nbelongs in an input, use type-ahead to make suggestions. Use sentence-case for\ndefault values, detected values, and auto-completion text.\n\n### Helper text\n\nOptional helper text is pertinent information that assists the user in correctly\ncompleting a field. Helper text should always be available when the input is\nfocused. It is often used to explain the correct data format. Helper text\nappears as persistent text under a default input (helper text is not available\nin fluid input, which uses tooltips instead). Helper text is the preferred\nmethod of assisting users because it is always visible for the user to reference\nwithout additional effort.\n\n#### Best practices for helper text\n\n- Use sentence-style capitalization, and in most cases, write the text as full\n  sentences with punctuation.\n- When used, helper text that appears persistently underneath the field is\n  replaced by an error or warning message if a state change occurs.\n\n### Tooltip help\n\nTooltips can be added inline with a form label if additional non-pertinent\ninformation is needed to assist the user in correctly completing a field, such\nas context setting. Tooltip content may include more in-depth information about\nthe field or the options the user is choosing from. Links to additional\ninformation or references may also be included if needed. In certain situations\nwhere complex instructions or additional context would be appropriate, tooltips\ncan be used in addition to the helper text. However, it is recommended that all\npertinent assistive information to form completion—such as format content—be\npresented simply and directly as helper text under the field and not be in a\ntooltip.\n\n<Row>\n<Column colLg={8}>\n\n![Example of text input with a tooltip](images/form-usage-6.png)\n\n</Column>\n</Row>\n\n#### Tooltips in fluid components\n\nFluid inputs are an exception to the no critical information in tooltips rule.\nDue to their architectural nature, fluid inputs do not provide the allotted\nspace under the field needed for helper text. All assistive text whether\npertinent or additional, is provided through a tooltip when using fluid inputs.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a fluid input using a tooltip for help](images/form-usage-7.png)\n\n</Column>\n</Row>\n\n### Placeholder text\n\nOptional placeholder text is text that appears inside an input field at a lower\ncontrast than the user input text. It provides hints or examples of what to\nenter. Placeholder text disappears after the user begins entering data into the\ninput. As such, it should not be used as a replacement for a persistent label\nnor should it contain crucial information. Sometimes providing an example of the\nkind of thing the user might enter is useful. Using certain examples as\nplaceholder text is allowed but it still should not contain essential\ninformation.\n\n#### Best practices for placeholder text\n\n- Use sentence-style capitalization, and in most cases, write the text as a\n  direct statement without punctuation.\n- Placeholder text is not required and by default not shown in text input\n  fields.\n- Placeholder text can be harmful to user interactions and should only be added\n  when necessary.\n\n<Row>\n<Column colLg={8}>\n\n![Example of appropriate placeholder text](images/form-usage-8.png)\n\n</Column>\n</Row>\n\n### Further guidance\n\nFor further content guidance, see Carbon’s\n[content guidelines](/guidelines/content/overview/).\n\n## Behaviors\n\n### Optional versus required fields\n\nForms items can be labeled as either optional or required depending on several\nfactors. A common distinction in IBM products for using required or optional is\nthe forms complexity.\n\n1. **Simple forms** - generally shorter and/or user- or consumer-oriented; such\n   as sign-up and contact forms and checkout screens. Most of the fields will\n   tend to be required.\n2. **Complex forms** - generally longer and product-oriented; contain properties\n   and settings that are used to configure Enterprise software.  Although they\n   will usually contain at least one required field, the majority of the fields\n   will tend to be optional.\n\nNote if the majority of the fields are **required** or **optional**, as the\noverall number of form fields for your entire product should inform your\ntreatment. The pattern used should be consistent throughout your product, or at\nminimum, consistent between all of the same types of form within your product.\n\n- If the majority of the fields are required, mark **only** the optional field\n  labels with _(optional)_.\n- If the majority of the fields are optional, mark **only** the required field\n  labels with _(required)_.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Optional\">\n\n![Example of a short user sign-up form using the optional pattern](images/form-usage-optional.png)\n\n</Tab>\n\n<Tab label=\"Required\">\n\n![Example of product configuration properties using the required pattern](images/form-usage-required.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n### Form controls\n\nCarbon provides a variety of data input components that enable a user to enter\nor select data. The components are divided into three different interaction\ntypes.\n\n| Type                                                         | Overview                                                                                                                                                                                                            |\n| ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Free form inputs](/patterns/forms-pattern/#text-inputs)     | Free-form text inputs are the most commonly used components in forms. They allow a user to enter any configuration of letters or numbers. Common free-form inputs include: text input and text area.                |\n| [Selection controls](/patterns/forms-pattern/#data-inputs)   | Selection controls offer users a selection from pre-determined options. Common selection controls include: checkboxes, radio buttons, file uploaders, toggles, and select lists (combo box and multiselect).        |\n| [Bound entry controls](/patterns/forms-pattern/#data-inputs) | Bound entry controls allow users to input numeric data, like dates and times and may restrict user input to a certain range. Common bound entry controls include: number input, date picker, and slider components. |\n\n### States\n\nThe following are common states that can be applied to components when used in a\nform.\n\n| State       | When to use                                                                                                                                                                                                                                                       |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Enabled_   | When a text input is live but a user is not directly interacting with it. This is commonly referred to as the default or normal state of the component. An enabled text input field can contain no content, placeholder text, or user generate content.           |\n| _Active_    | When a user is actively typing content into the field.                                                                                                                                                                                                            |\n| _Focus_     | When a user `tabs` to or clicks on the text input, it becomes focused, indicating the user has successfully navigated to the component.                                                                                                                           |\n| _Error_     | When the user input is invalid or a required text input has not been filled in. It can also be triggered due to a system error. This state requires a user response before data can be submitted or saved.                                                        |\n| _Warning_   | When you need to call the user's attention to an exception condition. The condition might not be an error but can cause problems if not resolved.                                                                                                                 |\n| _Disabled_  | When the user is not allowed to interact with the text input due to either permissions, dependencies, or pre-requisites. The disabled state completely removes the interactive function from a component. The styling is not subject to WCAG contrast compliance. |\n| _Skeleton_  | Use on an initial page load to indicate that the text input has not yet fully loaded.                                                                                                                                                                             |\n| _Read-only_ | _Coming soon!_                                                                                                                                                                                                                                                    |\n\n<Row>\n<Column colLg={12}>\n\n<Tabs>\n\n<Tab label=\"Default\">\n\n![Examples of default input states](images/form-usage-states-fixed.png)\n\n</Tab>\n\n<Tab label=\"Fluid\">\n\n![Examples fluid input states](images/form-usage-states-fluid.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n## Additional guidance\n\nThe form pattern provides additional and elaborative guidance to the information\nfound with the form component. Below is a list of key sections available in the\npattern.\n\n| Topic                                                                             | Overview                                                                                                        |\n| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- |\n| [Buttons in forms](/patterns/forms-pattern/#buttons])                             | Provides guidance on button alignment, emphasis, placement, and naming in relation to a form.                   |\n| [Errors and validation](/patterns/forms-pattern/#errors-and-validation)           | Effective and immediate error messaging can help the user to understand the problem and how to fix it.          |\n| [Form layout](/patterns/forms-pattern/#designing-a-form)                          | Additional guidance around layout, spacing, and columns in a form.                                              |\n| [Designing for longer forms](/patterns/forms-pattern/#designing-for-longer-forms) | Techniques to help make longer forms less overwhelming, including guidance for accordion and multistep forms.   |\n| [Form variants](/patterns/forms-pattern/#variants)                                | Forms may be presented as dedicated pages, side panels, or dialogs depending on the use case and the situation. |\n\n## Related\n\n<Row>\n<Column colSm={2} colMd={2} colLg={3}>\n\n#### Components\n\n- [Button](/components/button/usage) <br/>\n- [Checkbox](/components/checkbox/usage) <br/>\n- [Combo box](http://react.carbondesignsystem.com/?path=/story/combobox--default)\n  <br />\n- [Multiselect](http://react.carbondesignsystem.com/?path=/story/multiselect--default)\n  <br />\n- [Password input](http://react.carbondesignsystem.com/?path=/story/textinput--toggle-password-visibility)\n  <br />\n- [Radio button](/components/radio-button/usage) <br/>\n- [Text area](http://react.carbondesignsystem.com/?path=/story/textarea--default)\n  <br />\n- [Text input](/components/text-input/usage) <br/>\n- [Toggle](/components/toggle/usage) <br/>\n\n</Column>\n<Column colSm={2} colMd={2} colLg={3}>\n\n#### Patterns\n\n- [Dialogs](/patterns/dialog-pattern) <br/>\n- [Notifications](/patterns/notification-pattern) <br/>\n\n</Column>\n</Row>\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"049012ce284cc1e5a77774cc58f4c701","owner":"gatsby-plugin-mdx","counter":4827},"frontmatter":{"title":"Form","description":"Forms are used for submitting data. Consider each field and what value the data will provide.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Form\ndescription:\n  Forms are used for submitting data. Consider each field and what value the\n  data will provide.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nA form is a group of related input controls that allows users to provide data or\nconfigure options.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Behaviors</AnchorLink>\n<AnchorLink>Additional guidance</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nThe form component is configurable to fit various use cases and layouts. It is\npurposely simple out of the box, and users are responsible for configuring it to\nsuit their needs. For in-depth design guidance on the different ways to\nconfigure and extend a form, see the\n[form pattern](/patterns/forms-pattern/#spacing).\n\n## Live demo\n\n<StorybookDemo\n  themeSelector\n  tall\n  wide\n  url=\"https://react.carbondesignsystem.com\"\n  variants={[\n    {\n      label: 'Default',\n      variant: 'components-form--default',\n    },\n    {\n      label: 'Fluid (unstable)',\n      variant: 'experimental-fluidform--default',\n    },\n  ]}\n/>\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Default\">\n\n![Anatomy of a default form](images/form-usage-1.png)\n\n</Tab>\n\n<Tab label=\"Fluid\">\n\n![Anatomy of a fluid form](images/form-usage-1-fluid.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n1. **Header** (optional): The addition of a title and description as a header\n   that can provide the user with additional context or instructions.\n2. **Form body**: Area where users provide information. Information can be\n   entered through various input fields, including text fields, checkboxes, and\n   many other types. Input components contain labels and helper text that the\n   user submits correct data.\n3. **Footer**: Provides actions that allow users to submit or cancel the data\n   entered in the form.\n\n### Styling\n\nForms can use two styles of inputs: default and fluid. They share the same\nfunctionality but look visually different and have different alignment rules.\n\n| Style   | Appearance                                                                                                                                                                                                         | Alignment                                                                         | Use case                                                                                                                                     |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |\n| Default | Uses a traditional style of input where the label is positioned outside and above the input field. Default forms can use any of the three default input field sizes: small (32px), medium (40px), or large (48px). | Form inputs are equally stacked with 32px/2rem padding separating each component. | Use when white space is needed between input components, if smaller components are required, or in productive moments like in complex forms. |\n| Fluid   | An alternative input style where the label is placed inside the input field and aligned with the user input text. Fluid inputs only have one size at the height of 64px.                                           | Form inputs are stacked flush to one another with 0px of padding between them.    | Use in expressive moments or where larger form components can aid in emphasizing the featured form.                                          |\n\n<Row>\n<Column colLg={12}>\n\n![Examples of a default and fluid form styles](images/form-usage-2.png)\n\n</Column>\n</Row>\n\n### Alignment\n\nIn a form, input components should vertically align with all other form\ncomponents. Whether a form aligns flush to grid columns or hangs in the gutters\ndepends on the style of form input you are using as well as the gutter mode.\nDefault forms typically use a wide gutter mode and align flush to the grid\ncolumns prioritizing vertical label alignment. Fluid forms use the condensed\ngrid and can hang into the gutter without causing label misalignment. Fluid\nforms are architectural and remain cohesive by never allowing vertical or\nhorizontal space between inputs.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do align default form inputs and labels to the grid columns using the wide gutter mode.\">\n\n![An example showing a properly aligned default inputs](images/form-usage-3-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Don’t hang default inputs into the grid gutters. Doing so will cause labels to misalign with other form elements.\">\n\n![An example showing incorrectly aligned default inputs](images/form-usage-3-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do stack fluid components flush to one another with no spacing between them using the condensed gutter mode.\">\n\n![An example showing a properly stacked fluid inputs](images/form-usage-4-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Don’t add vertical or horizontal space between fluid components. Fluid forms are architectural and should remain a cohesive unit.\">\n\n![An example showing incorrectly arranged fluid inputs](images/form-usage-4-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Two column forms\n\nIf a form has more than one column, then the columns should be proportional and\nalign to grid columns when possible. The space between form columns is\ndetermined by the gutter mode you are using; default forms use the wide gutter\nmode with 32px padding between form columns, versus fluid forms use the\ncondensed gutter mode with 1px padding. The narrow gutter mode (16px) is\ntypically not used in forms as it often places the text in the gutter.\n\n<Row>\n<Column colLg={8}>\n\n![Examples of two column forms](images/form-usage-5.png)\n\n</Column>\n</Row>\n\nWhen using two columns, the row should respond as a group. For example, if the\nleft column form item becomes invalid and pushes form content down to\naccommodate space for an error message, then the accompanying right form item\nwill also grow to account for the needed space.\n\n<Row>\n<Column colLg={8}>\n\n![Examples of an invalid state with two columns](images/form-usage-5b.png)\n\n</Column>\n</Row>\n\n### Vertical spacing\n\nThe typical recommended vertical spacing between components is 32px. For all\nguidance and recommendation for spacing for forms, see the\n[form pattern](/patterns/forms-pattern/#spacing).\n\n## Content\n\n### Labels\n\nEffective labeling helps users understand what information to enter into a text\ninput. Text fields should always have a label. There are rare instances where\nthe context of an input negates the need for a visible label, but we advise you\nto consult an accessibility expert before proceeding with a label-less design.\n\n#### Best practices for labels\n\n- Use sentence-style capitalization for all labels except for product names and\n  proper nouns.\n- Keep the label short and concise.\n- Do not use colons after label names.\n\n### Default values\n\nWhere possible, add programmatic assistance. Detect and pre-fill inputs to\nreduce errors and save time. When the software can’t determine the value that\nbelongs in an input, use type-ahead to make suggestions. Use sentence-case for\ndefault values, detected values, and auto-completion text.\n\n### Helper text\n\nOptional helper text is pertinent information that assists the user in correctly\ncompleting a field. Helper text should always be available when the input is\nfocused. It is often used to explain the correct data format. Helper text\nappears as persistent text under a default input (helper text is not available\nin fluid input, which uses tooltips instead). Helper text is the preferred\nmethod of assisting users because it is always visible for the user to reference\nwithout additional effort.\n\n#### Best practices for helper text\n\n- Use sentence-style capitalization, and in most cases, write the text as full\n  sentences with punctuation.\n- When used, helper text that appears persistently underneath the field is\n  replaced by an error or warning message if a state change occurs.\n\n### Tooltip help\n\nTooltips can be added inline with a form label if additional non-pertinent\ninformation is needed to assist the user in correctly completing a field, such\nas context setting. Tooltip content may include more in-depth information about\nthe field or the options the user is choosing from. Links to additional\ninformation or references may also be included if needed. In certain situations\nwhere complex instructions or additional context would be appropriate, tooltips\ncan be used in addition to the helper text. However, it is recommended that all\npertinent assistive information to form completion—such as format content—be\npresented simply and directly as helper text under the field and not be in a\ntooltip.\n\n<Row>\n<Column colLg={8}>\n\n![Example of text input with a tooltip](images/form-usage-6.png)\n\n</Column>\n</Row>\n\n#### Tooltips in fluid components\n\nFluid inputs are an exception to the no critical information in tooltips rule.\nDue to their architectural nature, fluid inputs do not provide the allotted\nspace under the field needed for helper text. All assistive text whether\npertinent or additional, is provided through a tooltip when using fluid inputs.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a fluid input using a tooltip for help](images/form-usage-7.png)\n\n</Column>\n</Row>\n\n### Placeholder text\n\nOptional placeholder text is text that appears inside an input field at a lower\ncontrast than the user input text. It provides hints or examples of what to\nenter. Placeholder text disappears after the user begins entering data into the\ninput. As such, it should not be used as a replacement for a persistent label\nnor should it contain crucial information. Sometimes providing an example of the\nkind of thing the user might enter is useful. Using certain examples as\nplaceholder text is allowed but it still should not contain essential\ninformation.\n\n#### Best practices for placeholder text\n\n- Use sentence-style capitalization, and in most cases, write the text as a\n  direct statement without punctuation.\n- Placeholder text is not required and by default not shown in text input\n  fields.\n- Placeholder text can be harmful to user interactions and should only be added\n  when necessary.\n\n<Row>\n<Column colLg={8}>\n\n![Example of appropriate placeholder text](images/form-usage-8.png)\n\n</Column>\n</Row>\n\n### Further guidance\n\nFor further content guidance, see Carbon’s\n[content guidelines](/guidelines/content/overview/).\n\n## Behaviors\n\n### Optional versus required fields\n\nForms items can be labeled as either optional or required depending on several\nfactors. A common distinction in IBM products for using required or optional is\nthe forms complexity.\n\n1. **Simple forms** - generally shorter and/or user- or consumer-oriented; such\n   as sign-up and contact forms and checkout screens. Most of the fields will\n   tend to be required.\n2. **Complex forms** - generally longer and product-oriented; contain properties\n   and settings that are used to configure Enterprise software.  Although they\n   will usually contain at least one required field, the majority of the fields\n   will tend to be optional.\n\nNote if the majority of the fields are **required** or **optional**, as the\noverall number of form fields for your entire product should inform your\ntreatment. The pattern used should be consistent throughout your product, or at\nminimum, consistent between all of the same types of form within your product.\n\n- If the majority of the fields are required, mark **only** the optional field\n  labels with _(optional)_.\n- If the majority of the fields are optional, mark **only** the required field\n  labels with _(required)_.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"Optional\">\n\n![Example of a short user sign-up form using the optional pattern](images/form-usage-optional.png)\n\n</Tab>\n\n<Tab label=\"Required\">\n\n![Example of product configuration properties using the required pattern](images/form-usage-required.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n### Form controls\n\nCarbon provides a variety of data input components that enable a user to enter\nor select data. The components are divided into three different interaction\ntypes.\n\n| Type                                                         | Overview                                                                                                                                                                                                            |\n| ------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Free form inputs](/patterns/forms-pattern/#text-inputs)     | Free-form text inputs are the most commonly used components in forms. They allow a user to enter any configuration of letters or numbers. Common free-form inputs include: text input and text area.                |\n| [Selection controls](/patterns/forms-pattern/#data-inputs)   | Selection controls offer users a selection from pre-determined options. Common selection controls include: checkboxes, radio buttons, file uploaders, toggles, and select lists (combo box and multiselect).        |\n| [Bound entry controls](/patterns/forms-pattern/#data-inputs) | Bound entry controls allow users to input numeric data, like dates and times and may restrict user input to a certain range. Common bound entry controls include: number input, date picker, and slider components. |\n\n### States\n\nThe following are common states that can be applied to components when used in a\nform.\n\n| State       | When to use                                                                                                                                                                                                                                                       |\n| ----------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Enabled_   | When a text input is live but a user is not directly interacting with it. This is commonly referred to as the default or normal state of the component. An enabled text input field can contain no content, placeholder text, or user generate content.           |\n| _Active_    | When a user is actively typing content into the field.                                                                                                                                                                                                            |\n| _Focus_     | When a user `tabs` to or clicks on the text input, it becomes focused, indicating the user has successfully navigated to the component.                                                                                                                           |\n| _Error_     | When the user input is invalid or a required text input has not been filled in. It can also be triggered due to a system error. This state requires a user response before data can be submitted or saved.                                                        |\n| _Warning_   | When you need to call the user's attention to an exception condition. The condition might not be an error but can cause problems if not resolved.                                                                                                                 |\n| _Disabled_  | When the user is not allowed to interact with the text input due to either permissions, dependencies, or pre-requisites. The disabled state completely removes the interactive function from a component. The styling is not subject to WCAG contrast compliance. |\n| _Skeleton_  | Use on an initial page load to indicate that the text input has not yet fully loaded.                                                                                                                                                                             |\n| _Read-only_ | _Coming soon!_                                                                                                                                                                                                                                                    |\n\n<Row>\n<Column colLg={12}>\n\n<Tabs>\n\n<Tab label=\"Default\">\n\n![Examples of default input states](images/form-usage-states-fixed.png)\n\n</Tab>\n\n<Tab label=\"Fluid\">\n\n![Examples fluid input states](images/form-usage-states-fluid.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n## Additional guidance\n\nThe form pattern provides additional and elaborative guidance to the information\nfound with the form component. Below is a list of key sections available in the\npattern.\n\n| Topic                                                                             | Overview                                                                                                        |\n| --------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------- |\n| [Buttons in forms](/patterns/forms-pattern/#buttons])                             | Provides guidance on button alignment, emphasis, placement, and naming in relation to a form.                   |\n| [Errors and validation](/patterns/forms-pattern/#errors-and-validation)           | Effective and immediate error messaging can help the user to understand the problem and how to fix it.          |\n| [Form layout](/patterns/forms-pattern/#designing-a-form)                          | Additional guidance around layout, spacing, and columns in a form.                                              |\n| [Designing for longer forms](/patterns/forms-pattern/#designing-for-longer-forms) | Techniques to help make longer forms less overwhelming, including guidance for accordion and multistep forms.   |\n| [Form variants](/patterns/forms-pattern/#variants)                                | Forms may be presented as dedicated pages, side panels, or dialogs depending on the use case and the situation. |\n\n## Related\n\n<Row>\n<Column colSm={2} colMd={2} colLg={3}>\n\n#### Components\n\n- [Button](/components/button/usage) <br/>\n- [Checkbox](/components/checkbox/usage) <br/>\n- [Combo box](http://react.carbondesignsystem.com/?path=/story/combobox--default)\n  <br />\n- [Multiselect](http://react.carbondesignsystem.com/?path=/story/multiselect--default)\n  <br />\n- [Password input](http://react.carbondesignsystem.com/?path=/story/textinput--toggle-password-visibility)\n  <br />\n- [Radio button](/components/radio-button/usage) <br/>\n- [Text area](http://react.carbondesignsystem.com/?path=/story/textarea--default)\n  <br />\n- [Text input](/components/text-input/usage) <br/>\n- [Toggle](/components/toggle/usage) <br/>\n\n</Column>\n<Column colSm={2} colMd={2} colLg={3}>\n\n#### Patterns\n\n- [Dialogs](/patterns/dialog-pattern) <br/>\n- [Notifications](/patterns/notification-pattern) <br/>\n\n</Column>\n</Row>\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/components/form/usage.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}