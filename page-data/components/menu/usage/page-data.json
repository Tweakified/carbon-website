{"componentChunkName":"component---src-pages-components-menu-usage-mdx","path":"/components/menu/usage/","result":{"pageContext":{"frontmatter":{"title":"Menu","description":"A menu is a list of interactive options that appears when users interact with an element or perform a specific action.","tabs":["Usage","Style","Code","Accessibility"]},"relativePagePath":"/components/menu/usage.mdx","titleType":"prepend","MdxNode":{"id":"e1fabf5a-3133-5a76-895a-c9f0226411e0","children":[],"parent":"14562c3e-75f6-563e-ad49-399069cf2982","internal":{"content":"---\ntitle: Menu\ndescription:\n  A menu is a list of interactive options that appears when users interact with\n  an element or perform a specific action.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nA menu is a list of interactive options that appears when users interact with an\nelement or perform a specific action.\n\n</PageDescription>\n\n<InlineNotification>\n\n**New in Carbon v11!** Menu is a new component we have added to our system and\nis only available in v11.\n\n</InlineNotification>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Universal behaviors</AnchorLink>\n<AnchorLink>Modifiers</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nA menu is a disclosure component that appears with a set of actions relevant to\na specific control, interface area, data element, or application view.\nTypically, this context is determined by the user's current selection prior to\ninvoking the menu. Menus can be opened from components such as menu buttons or\nthrough right-clicking.\n\nThis guidance will help you understand how to format, structure, and use the\nmenu component effectively.\n\n<Row>\n<Column colLg={8}>\n\n![Overview image of menu](images/usage-menu-overview.png)\n\n</Column>\n</Row>\n\n### When to use\n\n#### Declutter interface\n\nIn general, use menus to hide less frequently used or advanced options until\nusers specifically need them. This keeps the interface clean and focused on\nessential elements.\n\n#### Context menu\n\nContext menus are triggered by a right-click interaction. A context menu is a\ndefined list of options in a menu that appears above all other content on a page\nand is related to the selected content or element it was triggered from.\n\n#### Customizable actions\n\nMenus can speed up interactions for advanced users who are already familiar with\nthe application. These users often rely on shortcuts and context-specific\nactions to work more efficiently.\n\n### When not to use\n\n#### Form submission\n\nWhen submitting a form with a static list of options for users to choose from,\nor when filtering, use a\n[dropdown](https://www.carbondesignsystem.com/components/dropdown/usage) instead\nof a menu.\n\n#### Complex inputs\n\nWhen many or complex inputs are used collectively, use a\n[popover](https://www.carbondesignsystem.com/components/popover/usage) instead\nof a menu.\n\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  tall\n  variants={[\n    {\n      label: 'Menu',\n      variant: 'components-menu--playground',\n    },\n  ]}\n/>\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={12}>\n\n![Menu anatomy diagram](images/usage-menu-anatomy.png)\n\n</Column>\n</Row>\n\n1. **Trigger**: Elements that are triggered to display a list of available\n   actions. These menu triggers can include a menu button, a combo button, and\n   an overflow menu within menu buttons. Menus can also be opened when\n   right-clicking on a page or specific element, like a column, or a row.\n\n2. **Action item**: A menu item that can be activated to apply its action on\n   certain elements. This item can be accompanied by a submenu indicator or\n   keyboard shortcuts.\n\n3. **Divider**: A rule that indicates different sections within the menu.\n\n4. **Submenu indicator**: A caret icon that indicates a submenu.\n\n5. **Keyboard shortcut**: Certain action items may also have keyboard shortcuts.\n\n6. **Menu**: A container displays the open state and contains a list of actions\n   that can be selected.\n\n7. **Selected item**: An item that can be selected. The selection can be single\n   or multi-selected.\n\n8. **Submenu**: A nested level off of the primary level.\n\n### Sizing\n\n#### Height\n\nMenu items come in four sizes: extra small, small, medium, and large. See more\nabout size specifications on the\n[style](https://www.carbondesignsystem.com/components/menu/style) tab. When\nusing a menu button trigger, the height of the menu item (singular) reflects the\nsize of the button being used.\n\n<InlineNotification>\n\n**Note** Currently, Carbon does not support the extra-small size for\n[buttons](https://carbondesignsystem.com/components/button/usage/), only for\nrows or menu items. Therefore, this menu size cannot be utilized with menu\nbutton triggers. However, the extra-small menu size remains available for\nimplementation in other contexts if needed.\n\n</InlineNotification>\n\n| Size        | Height (px / rem) |\n| ----------- | ----------------- |\n| Extra small | 24 / 1.5          |\n| Small       | 32 / 2            |\n| Medium      | 40 / 2.5          |\n| Large       | 48 / 3            |\n\n<Row>\n<Column colLg={8}>\n\n![Menu height](images/usage-menu-height.png)\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do match the height of the menu buttons and the menu\">\n\n![Do match the height of the menu buttons and the menu](images/usage-sizing-height-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not mix the height of the menu buttons and the menu\">\n\n![Do not mix the height of the menu buttons and the menu](images/usage-sizing-height-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Width\n\nBy default, the [menu button](/components/menu-buttons/usage/#menu-button) and\n[combo button](/components/menu-buttons/usage/#combo-button) follow the\n[button structure style](/components/button/style#structure), and the menu\nmaintains a minimum width of 160px to prevent a narrow appearance.\n\n<Row>\n<Column colLg={8}>\n\n![Menu width](images/usage-menu-width-menu-button-default.png)\n\n<Caption>\n  Menu default width when both button label and menu option labels are short\n</Caption>\n\n</Column>\n</Row>\n\nIf the menu item labels become longer, the menu button and combo button remain\nthe same size, while the menu component can expand up to a maximum of 288px.\nConversely, if the button labels become longer, the menu component should not\nappear narrower but should extend to match the width of the menu buttons.\n\nIf you opt for\n[fluid-width default buttons](https://carbondesignsystem.com/components/button/usage/#alignment),\nboth the menu button (or the combo button) and the menu should have the same\nwidth.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do use the minimum width\">\n\n![Do use the minimum width of menu](images/usage-menu-width-do-1.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not narrow the menu to fit with other elements\">\n\n![Do not narrow the menu to fit with other elements](images/usage-menu-width-dont-1.png)\n\n  </DoDont>\n</DoDontRow>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do match the width when the menu button or combo button label becomes longer\">\n\n![Do match the width when the menu button or combo button labels become longer](images/usage-menu-width-do-2.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not make the menu appear shorter than the menu button or combo buttons\">\n\n![Do not make the menu appear shorter than the menu button or combo button](images/usage-menu-width-dont-2.png)\n\n  </DoDont>\n</DoDontRow>\n\nGhost buttons only adhere to the\n[button](https://carbondesignsystem.com/components/button/usage/) style. This is\nbecause enlarging the ghost button's width to match the menu's width would\nresult in the caret appearing disconnected from its associated button,\nespecially when the menu button is in its closed state.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do use default ghost button in all cases\">\n\n![Do use default ghost button in all cases](images/usage-menu-ghost-button-width-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use fluid ghost button in any cases\">\n\n![Do not use fluid ghost button in any cases](images/usage-menu-ghost-button-width-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Alignment\n\n#### Default\n\nBy default, combo button, menu button, or overflow button remains positioned at\nthe top, to the left or right side of the menu when it is open, depending on the\navailable space and layout.\n\n<Row>\n<Column colLg={8}>\n\n![Menu default alignments](images/usage-menu-alignment-menu-button-default.png)\n\n<Caption>\n  Menu default width when both button label and menu item labels are short{' '}\n</Caption>\n\n</Column>\n</Row>\n\n#### Alternatives\n\nAlternatively, open menus can be positioned at the bottom, to the left or right\nof its associated menu button trigger, depending on the available space and\nlayout.\n\n<Row>\n<Column colLg={8}>\n\n![Menu alternative alignments](images/usage-menu-alignment-menu-button-alternatives.png)\n\n</Column>\n</Row>\n\n#### Action items\n\nEnsuring consistent alignment when combining single or multi-select items with\nnon-select items will improve the menu's readability.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do create a consistent alignment with unselected and selected items\">\n\n![Do create a consistent alignment with unselected and selected items](images/usage-menu-alignment-item-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not create mixed alignments with unselected and selected items\">\n\n![Do not create mixed alignments with unselected and selected items](images/usage-menu-alignment-item-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Right to left (RTL)\n\nFor RTL (right-to-left) languages, the entire menu is mirrored horizontally,\nincluding the direction of the caret and keyboard shortcuts.\n\n<Row>\n<Column colLg={8}>\n\n![Menu alignment right to left](images/usage-menu-RTL.png)\n\n</Column>\n</Row>\n\n## Content\n\n### Main elements\n\n#### Overflow\n\nConsider using short and precise labels for menu items. However, when deciding\nto truncate long menu items, use a tooltip on hover to reveal the full text.\n\n<Row>\n<Column colLg={8}>\n\n![An overflow example for menu items](images/usage-menu-overflow-truncate.png)\n\n<Caption>Tooltip helps clarify the truncated text</Caption>\n</Column>\n</Row>\n\n#### Ordering and grouping\n\nTo aid discoverability, arrange menu items in a meaningful sequence that aligns\nwith the order of operations. To help users focus on the most relevant options,\nplace the ones used most often at the top.\n\nWhen there is a significant amount of menu items, it's advisable to group them\ninto sections, separated by divider lines.\n\n<Row>\n<Column colLg={8}>\n\n![Ordering and grouping](images/usage-menu-ordering.png)\n\n<Caption>\n  Example shows how menu items are grouped into meaningful sections\n</Caption>\n</Column>\n</Row>\n\n#### Number of items within a menu\n\nExpansive lists of options in menus can overwhelm users. With context menu and\noverflow menu, keep the list length manageable by including no more than 12\nitems to help users scan through items easily without having to scroll. With\n[menu buttons](/components/menu-buttons/usage), keep the menu list smaller with\nunder 5 items.\n\n<Row>\n<Column colLg={4}>\n\n![Do consider including as fewer items as possible](images/usage-menu-number-items-do.png)\n\n<Caption>\n  Do consider including as few items as possible\n</Caption>\n</Column>\n\n<Column colLg={4}>\n\n![Do not overload choices](images/usage-menu-number-items-dont.png)\n\n<Caption>\n Do not overload choices\n</Caption>\n</Column>\n</Row>\n\n### Submenus\n\nA submenu is a menu item with the caret icon on the right, offering additional\nrelated commands. While submenus can help tidy up a context menu and make its\noptions clearer, introducing multiple levels of submenus can make the user\nexperience more complex and harder to navigate. Avoid multiple levels of nesting\nwhen it comes to submenus.\n\n#### Actions associated with a shared label\n\nWhen a term appears in more than two menu items in the same group, consider\neliminating the recurring term in the submenu label to help people predict its\ncontent and scan easily.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do omit recurring term\">\n\n![Do omit recurring term](images/usage-image-submenus-title-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not repeat the same term from the submenu trigger\">\n\n![Do not repeat the same term from the submenu trigger](images/usage-image-submenus-title-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Further guidance\n\nFor further content guidance, see Carbon's\n[content guidelines](/guidelines/content/overview).\n\n## Universal behaviors\n\n### States\n\nMenu items have seven states: **enabled**, **hover**, **focus**, **focus** and\n**hover**, **danger hover**, **danger hover and focus**, and **disabled**. Learn\nmore about states on the [style](/components/menu/style/) tab.\n\n| State                    | When to use                                                                                                                                                                                                                                               |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Enabled_                | When an action in the list is live but a user is not directly interacting with it. This is commonly referred to as the default or normal state of the component.                                                                                          |\n| _Hover_                  | When a user’s mouse cursor is hovering over the menu item in menus or submenus.                                                                                                                                                                           |\n| _Focus_                  | When a user tabs to or clicks on a menu trigger. This will open up the menu list. The first item in the menu list has the focus state as default.                                                                                                         |\n| _Focus and hover_        | When an item is in the focus state but the user’s mouse cursor is hovering over the item row.                                                                                                                                                             |\n| _Danger hover_           | When an action could have destructive effects on the user’s data (for example, delete or remove).                                                                                                                                                         |\n| _Danger hover and focus_ | When a user tabs to a destructive menu item that has the danger hover state.                                                                                                                                                                              |\n| _Disabled_               | When an action is not able to be performed at a certain time, but will be possible to be performed by that user, at another point in time. Actions that are permissions-based should be hidden if it is never possible for a user to perform that action. |\n\n### Interactions\n\n#### Mouse\n\nOnce the menu opens by clicking on a menu button trigger or right-clicking on an\narea, users can:\n\n- Select or deselect an item by clicking on it\n- Hover over the item with the caret icon to reveal additional options or\n  actions from that item\n- Click outside of the menu area to close it\n\n<Row>\n<Column colLg={8}>\n\n![Mouse interactions on menus](images/usage-interactions-mouse.png)\n\n<Caption>Mouse interactions on menu</Caption>\n</Column>\n</Row>\n\n#### Keyboard\n\nOnce the menu opens by pressing `Return` or `Enter` on the menu trigger, users\ncan:\n\n- Press `Up` and `Down` arrows to navigate between menu options\n- Press `Return` or `Enter` or `Right` arrow on the item with the caret icon to\n  reveal additional options\n- Press `Return` or `Enter` on an item to select or deselect it\n- Press `Escape` to close it\n\n### Responsive behaviors\n\nOnce the menu opens, the first option is highlighted. Users can then move\nthrough the list of options to activate or select one item at a time. Once users\nactivate or select a menu item, the menu closes.\n\nActivating a menu item can trigger the following:\n\n- Open a dialog box\n- Set a value (which can perform an action or serve as a selected/deselected\n  option in the menu)\n- Open a new page (typically in a new window or tab)\n- Initiate a new user task (potentially involving multiple steps)\n- Save or close something\n- Expand a submenu (though this can also occur without activation)\n- Undo or redo a user action\n- Perform various actions (e.g., editing actions like cut, paste, copy, format;\n  application actions such as checking for updates)\n- Open a sidebar or toolbar\n- Access an existing page\n- Adjust the current window(s) (e.g., minimize, split, arrange, swap)\n- No action other than closing the menu\n\n## Modifiers\n\n#### Dividers\n\nDivider lines serve the purpose of categorizing related actions into appropriate\nsections, while also distinguishing actions that might have a significant impact\non the user's data, such as deleting an app or service.\n\n<Row>\n<Column colLg={8}>\n\n![Divider in menus](images/usage-menu-divider.png)\n\n</Column>\n</Row>\n\n#### Keyboard shortcuts\n\nA menu item can display related values, like a caret indicator for accessing a\nsubmenu or a keyboard shortcut linked to the action.\n\n<Row>\n<Column colLg={8}>\n\n![Divider in menus](images/usage-menu-shortcut.png)\n\n</Column>\n</Row>\n\n### Single-select and multi-select\n\nSingle-select or multi-select has the same visual with the checkmark in front of\nthe menu item.\n\n<Row>\n<Column colLg={4}>\n\n![Single-select example](images/usage-menu-single-select.png)\n\n</Column>\n\n<Column colLg={4}>\n\n![Multi-select example](images/usage-menu-multi-select.png)\n\n</Column>\n</Row>\n\n### Danger state\n\nA danger hover state can be applied to actions that could cause significant\nchanges, such as delete.\n\n<Row>\n<Column colLg={8}>\n\n![Danger state example](images/usage-menu-danger-state.png)\n\n</Column>\n</Row>\n\n## Related\n\n#### Menu buttons\n\nTo understand how to use menus with other specific menu button triggers, see\n[menu buttons](/components/menu-buttons/usage).\n\n#### Dropdown\n\nTo understand how the menu component can be used differently from the dropdown\ncomponent, see [dropdown](/components/dropdown/usage).\n\n#### Popover\n\nThe popover component is visually similar to menu, but is used for different\npurposes. See [popover](/components/dropdown/usage) for more information.\n\n## References\n\n- Anna Kaley,\n  [Contextual Menus: Delivering Relevant Tools for Tasks](https://www.nngroup.com/articles/contextual-menus/)\n  (Nielsen Norman Group, 2019)\n\n- Michael Villar,\n  [Building like it's 1984: A comprehensive guide to creating intuitive context menus](https://height.app/blog/guide-to-build-context-menus#:~:text=Context%20menus%20are%20menus%20that,different%20operating%20systems%20and%20apps.)\n  (Height, 2022)\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","type":"Mdx","contentDigest":"b9d6430d043ccedf2f734b88efc168cf","owner":"gatsby-plugin-mdx","counter":4389},"frontmatter":{"title":"Menu","description":"A menu is a list of interactive options that appears when users interact with an element or perform a specific action.","tabs":["Usage","Style","Code","Accessibility"]},"exports":{},"rawBody":"---\ntitle: Menu\ndescription:\n  A menu is a list of interactive options that appears when users interact with\n  an element or perform a specific action.\ntabs: ['Usage', 'Style', 'Code', 'Accessibility']\n---\n\n<PageDescription>\n\nA menu is a list of interactive options that appears when users interact with an\nelement or perform a specific action.\n\n</PageDescription>\n\n<InlineNotification>\n\n**New in Carbon v11!** Menu is a new component we have added to our system and\nis only available in v11.\n\n</InlineNotification>\n\n<AnchorLinks>\n\n<AnchorLink>Overview</AnchorLink>\n<AnchorLink>Live demo</AnchorLink>\n<AnchorLink>Formatting</AnchorLink>\n<AnchorLink>Content</AnchorLink>\n<AnchorLink>Universal behaviors</AnchorLink>\n<AnchorLink>Modifiers</AnchorLink>\n<AnchorLink>Related</AnchorLink>\n<AnchorLink>References</AnchorLink>\n<AnchorLink>Feedback</AnchorLink>\n\n</AnchorLinks>\n\n## Overview\n\nA menu is a disclosure component that appears with a set of actions relevant to\na specific control, interface area, data element, or application view.\nTypically, this context is determined by the user's current selection prior to\ninvoking the menu. Menus can be opened from components such as menu buttons or\nthrough right-clicking.\n\nThis guidance will help you understand how to format, structure, and use the\nmenu component effectively.\n\n<Row>\n<Column colLg={8}>\n\n![Overview image of menu](images/usage-menu-overview.png)\n\n</Column>\n</Row>\n\n### When to use\n\n#### Declutter interface\n\nIn general, use menus to hide less frequently used or advanced options until\nusers specifically need them. This keeps the interface clean and focused on\nessential elements.\n\n#### Context menu\n\nContext menus are triggered by a right-click interaction. A context menu is a\ndefined list of options in a menu that appears above all other content on a page\nand is related to the selected content or element it was triggered from.\n\n#### Customizable actions\n\nMenus can speed up interactions for advanced users who are already familiar with\nthe application. These users often rely on shortcuts and context-specific\nactions to work more efficiently.\n\n### When not to use\n\n#### Form submission\n\nWhen submitting a form with a static list of options for users to choose from,\nor when filtering, use a\n[dropdown](https://www.carbondesignsystem.com/components/dropdown/usage) instead\nof a menu.\n\n#### Complex inputs\n\nWhen many or complex inputs are used collectively, use a\n[popover](https://www.carbondesignsystem.com/components/popover/usage) instead\nof a menu.\n\n<StorybookDemo\n  themeSelector\n  url=\"https://react.carbondesignsystem.com\"\n  tall\n  variants={[\n    {\n      label: 'Menu',\n      variant: 'components-menu--playground',\n    },\n  ]}\n/>\n\n## Formatting\n\n### Anatomy\n\n<Row>\n<Column colLg={12}>\n\n![Menu anatomy diagram](images/usage-menu-anatomy.png)\n\n</Column>\n</Row>\n\n1. **Trigger**: Elements that are triggered to display a list of available\n   actions. These menu triggers can include a menu button, a combo button, and\n   an overflow menu within menu buttons. Menus can also be opened when\n   right-clicking on a page or specific element, like a column, or a row.\n\n2. **Action item**: A menu item that can be activated to apply its action on\n   certain elements. This item can be accompanied by a submenu indicator or\n   keyboard shortcuts.\n\n3. **Divider**: A rule that indicates different sections within the menu.\n\n4. **Submenu indicator**: A caret icon that indicates a submenu.\n\n5. **Keyboard shortcut**: Certain action items may also have keyboard shortcuts.\n\n6. **Menu**: A container displays the open state and contains a list of actions\n   that can be selected.\n\n7. **Selected item**: An item that can be selected. The selection can be single\n   or multi-selected.\n\n8. **Submenu**: A nested level off of the primary level.\n\n### Sizing\n\n#### Height\n\nMenu items come in four sizes: extra small, small, medium, and large. See more\nabout size specifications on the\n[style](https://www.carbondesignsystem.com/components/menu/style) tab. When\nusing a menu button trigger, the height of the menu item (singular) reflects the\nsize of the button being used.\n\n<InlineNotification>\n\n**Note** Currently, Carbon does not support the extra-small size for\n[buttons](https://carbondesignsystem.com/components/button/usage/), only for\nrows or menu items. Therefore, this menu size cannot be utilized with menu\nbutton triggers. However, the extra-small menu size remains available for\nimplementation in other contexts if needed.\n\n</InlineNotification>\n\n| Size        | Height (px / rem) |\n| ----------- | ----------------- |\n| Extra small | 24 / 1.5          |\n| Small       | 32 / 2            |\n| Medium      | 40 / 2.5          |\n| Large       | 48 / 3            |\n\n<Row>\n<Column colLg={8}>\n\n![Menu height](images/usage-menu-height.png)\n\n</Column>\n</Row>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do match the height of the menu buttons and the menu\">\n\n![Do match the height of the menu buttons and the menu](images/usage-sizing-height-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not mix the height of the menu buttons and the menu\">\n\n![Do not mix the height of the menu buttons and the menu](images/usage-sizing-height-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Width\n\nBy default, the [menu button](/components/menu-buttons/usage/#menu-button) and\n[combo button](/components/menu-buttons/usage/#combo-button) follow the\n[button structure style](/components/button/style#structure), and the menu\nmaintains a minimum width of 160px to prevent a narrow appearance.\n\n<Row>\n<Column colLg={8}>\n\n![Menu width](images/usage-menu-width-menu-button-default.png)\n\n<Caption>\n  Menu default width when both button label and menu option labels are short\n</Caption>\n\n</Column>\n</Row>\n\nIf the menu item labels become longer, the menu button and combo button remain\nthe same size, while the menu component can expand up to a maximum of 288px.\nConversely, if the button labels become longer, the menu component should not\nappear narrower but should extend to match the width of the menu buttons.\n\nIf you opt for\n[fluid-width default buttons](https://carbondesignsystem.com/components/button/usage/#alignment),\nboth the menu button (or the combo button) and the menu should have the same\nwidth.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do use the minimum width\">\n\n![Do use the minimum width of menu](images/usage-menu-width-do-1.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not narrow the menu to fit with other elements\">\n\n![Do not narrow the menu to fit with other elements](images/usage-menu-width-dont-1.png)\n\n  </DoDont>\n</DoDontRow>\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do match the width when the menu button or combo button label becomes longer\">\n\n![Do match the width when the menu button or combo button labels become longer](images/usage-menu-width-do-2.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not make the menu appear shorter than the menu button or combo buttons\">\n\n![Do not make the menu appear shorter than the menu button or combo button](images/usage-menu-width-dont-2.png)\n\n  </DoDont>\n</DoDontRow>\n\nGhost buttons only adhere to the\n[button](https://carbondesignsystem.com/components/button/usage/) style. This is\nbecause enlarging the ghost button's width to match the menu's width would\nresult in the caret appearing disconnected from its associated button,\nespecially when the menu button is in its closed state.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do use default ghost button in all cases\">\n\n![Do use default ghost button in all cases](images/usage-menu-ghost-button-width-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not use fluid ghost button in any cases\">\n\n![Do not use fluid ghost button in any cases](images/usage-menu-ghost-button-width-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Alignment\n\n#### Default\n\nBy default, combo button, menu button, or overflow button remains positioned at\nthe top, to the left or right side of the menu when it is open, depending on the\navailable space and layout.\n\n<Row>\n<Column colLg={8}>\n\n![Menu default alignments](images/usage-menu-alignment-menu-button-default.png)\n\n<Caption>\n  Menu default width when both button label and menu item labels are short{' '}\n</Caption>\n\n</Column>\n</Row>\n\n#### Alternatives\n\nAlternatively, open menus can be positioned at the bottom, to the left or right\nof its associated menu button trigger, depending on the available space and\nlayout.\n\n<Row>\n<Column colLg={8}>\n\n![Menu alternative alignments](images/usage-menu-alignment-menu-button-alternatives.png)\n\n</Column>\n</Row>\n\n#### Action items\n\nEnsuring consistent alignment when combining single or multi-select items with\nnon-select items will improve the menu's readability.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do create a consistent alignment with unselected and selected items\">\n\n![Do create a consistent alignment with unselected and selected items](images/usage-menu-alignment-item-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not create mixed alignments with unselected and selected items\">\n\n![Do not create mixed alignments with unselected and selected items](images/usage-menu-alignment-item-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n#### Right to left (RTL)\n\nFor RTL (right-to-left) languages, the entire menu is mirrored horizontally,\nincluding the direction of the caret and keyboard shortcuts.\n\n<Row>\n<Column colLg={8}>\n\n![Menu alignment right to left](images/usage-menu-RTL.png)\n\n</Column>\n</Row>\n\n## Content\n\n### Main elements\n\n#### Overflow\n\nConsider using short and precise labels for menu items. However, when deciding\nto truncate long menu items, use a tooltip on hover to reveal the full text.\n\n<Row>\n<Column colLg={8}>\n\n![An overflow example for menu items](images/usage-menu-overflow-truncate.png)\n\n<Caption>Tooltip helps clarify the truncated text</Caption>\n</Column>\n</Row>\n\n#### Ordering and grouping\n\nTo aid discoverability, arrange menu items in a meaningful sequence that aligns\nwith the order of operations. To help users focus on the most relevant options,\nplace the ones used most often at the top.\n\nWhen there is a significant amount of menu items, it's advisable to group them\ninto sections, separated by divider lines.\n\n<Row>\n<Column colLg={8}>\n\n![Ordering and grouping](images/usage-menu-ordering.png)\n\n<Caption>\n  Example shows how menu items are grouped into meaningful sections\n</Caption>\n</Column>\n</Row>\n\n#### Number of items within a menu\n\nExpansive lists of options in menus can overwhelm users. With context menu and\noverflow menu, keep the list length manageable by including no more than 12\nitems to help users scan through items easily without having to scroll. With\n[menu buttons](/components/menu-buttons/usage), keep the menu list smaller with\nunder 5 items.\n\n<Row>\n<Column colLg={4}>\n\n![Do consider including as fewer items as possible](images/usage-menu-number-items-do.png)\n\n<Caption>\n  Do consider including as few items as possible\n</Caption>\n</Column>\n\n<Column colLg={4}>\n\n![Do not overload choices](images/usage-menu-number-items-dont.png)\n\n<Caption>\n Do not overload choices\n</Caption>\n</Column>\n</Row>\n\n### Submenus\n\nA submenu is a menu item with the caret icon on the right, offering additional\nrelated commands. While submenus can help tidy up a context menu and make its\noptions clearer, introducing multiple levels of submenus can make the user\nexperience more complex and harder to navigate. Avoid multiple levels of nesting\nwhen it comes to submenus.\n\n#### Actions associated with a shared label\n\nWhen a term appears in more than two menu items in the same group, consider\neliminating the recurring term in the submenu label to help people predict its\ncontent and scan easily.\n\n<DoDontRow>\n  <DoDont type=\"do\" caption=\"Do omit recurring term\">\n\n![Do omit recurring term](images/usage-image-submenus-title-do.png)\n\n  </DoDont>\n  <DoDont type=\"dont\" caption=\"Do not repeat the same term from the submenu trigger\">\n\n![Do not repeat the same term from the submenu trigger](images/usage-image-submenus-title-dont.png)\n\n  </DoDont>\n</DoDontRow>\n\n### Further guidance\n\nFor further content guidance, see Carbon's\n[content guidelines](/guidelines/content/overview).\n\n## Universal behaviors\n\n### States\n\nMenu items have seven states: **enabled**, **hover**, **focus**, **focus** and\n**hover**, **danger hover**, **danger hover and focus**, and **disabled**. Learn\nmore about states on the [style](/components/menu/style/) tab.\n\n| State                    | When to use                                                                                                                                                                                                                                               |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| _Enabled_                | When an action in the list is live but a user is not directly interacting with it. This is commonly referred to as the default or normal state of the component.                                                                                          |\n| _Hover_                  | When a user’s mouse cursor is hovering over the menu item in menus or submenus.                                                                                                                                                                           |\n| _Focus_                  | When a user tabs to or clicks on a menu trigger. This will open up the menu list. The first item in the menu list has the focus state as default.                                                                                                         |\n| _Focus and hover_        | When an item is in the focus state but the user’s mouse cursor is hovering over the item row.                                                                                                                                                             |\n| _Danger hover_           | When an action could have destructive effects on the user’s data (for example, delete or remove).                                                                                                                                                         |\n| _Danger hover and focus_ | When a user tabs to a destructive menu item that has the danger hover state.                                                                                                                                                                              |\n| _Disabled_               | When an action is not able to be performed at a certain time, but will be possible to be performed by that user, at another point in time. Actions that are permissions-based should be hidden if it is never possible for a user to perform that action. |\n\n### Interactions\n\n#### Mouse\n\nOnce the menu opens by clicking on a menu button trigger or right-clicking on an\narea, users can:\n\n- Select or deselect an item by clicking on it\n- Hover over the item with the caret icon to reveal additional options or\n  actions from that item\n- Click outside of the menu area to close it\n\n<Row>\n<Column colLg={8}>\n\n![Mouse interactions on menus](images/usage-interactions-mouse.png)\n\n<Caption>Mouse interactions on menu</Caption>\n</Column>\n</Row>\n\n#### Keyboard\n\nOnce the menu opens by pressing `Return` or `Enter` on the menu trigger, users\ncan:\n\n- Press `Up` and `Down` arrows to navigate between menu options\n- Press `Return` or `Enter` or `Right` arrow on the item with the caret icon to\n  reveal additional options\n- Press `Return` or `Enter` on an item to select or deselect it\n- Press `Escape` to close it\n\n### Responsive behaviors\n\nOnce the menu opens, the first option is highlighted. Users can then move\nthrough the list of options to activate or select one item at a time. Once users\nactivate or select a menu item, the menu closes.\n\nActivating a menu item can trigger the following:\n\n- Open a dialog box\n- Set a value (which can perform an action or serve as a selected/deselected\n  option in the menu)\n- Open a new page (typically in a new window or tab)\n- Initiate a new user task (potentially involving multiple steps)\n- Save or close something\n- Expand a submenu (though this can also occur without activation)\n- Undo or redo a user action\n- Perform various actions (e.g., editing actions like cut, paste, copy, format;\n  application actions such as checking for updates)\n- Open a sidebar or toolbar\n- Access an existing page\n- Adjust the current window(s) (e.g., minimize, split, arrange, swap)\n- No action other than closing the menu\n\n## Modifiers\n\n#### Dividers\n\nDivider lines serve the purpose of categorizing related actions into appropriate\nsections, while also distinguishing actions that might have a significant impact\non the user's data, such as deleting an app or service.\n\n<Row>\n<Column colLg={8}>\n\n![Divider in menus](images/usage-menu-divider.png)\n\n</Column>\n</Row>\n\n#### Keyboard shortcuts\n\nA menu item can display related values, like a caret indicator for accessing a\nsubmenu or a keyboard shortcut linked to the action.\n\n<Row>\n<Column colLg={8}>\n\n![Divider in menus](images/usage-menu-shortcut.png)\n\n</Column>\n</Row>\n\n### Single-select and multi-select\n\nSingle-select or multi-select has the same visual with the checkmark in front of\nthe menu item.\n\n<Row>\n<Column colLg={4}>\n\n![Single-select example](images/usage-menu-single-select.png)\n\n</Column>\n\n<Column colLg={4}>\n\n![Multi-select example](images/usage-menu-multi-select.png)\n\n</Column>\n</Row>\n\n### Danger state\n\nA danger hover state can be applied to actions that could cause significant\nchanges, such as delete.\n\n<Row>\n<Column colLg={8}>\n\n![Danger state example](images/usage-menu-danger-state.png)\n\n</Column>\n</Row>\n\n## Related\n\n#### Menu buttons\n\nTo understand how to use menus with other specific menu button triggers, see\n[menu buttons](/components/menu-buttons/usage).\n\n#### Dropdown\n\nTo understand how the menu component can be used differently from the dropdown\ncomponent, see [dropdown](/components/dropdown/usage).\n\n#### Popover\n\nThe popover component is visually similar to menu, but is used for different\npurposes. See [popover](/components/dropdown/usage) for more information.\n\n## References\n\n- Anna Kaley,\n  [Contextual Menus: Delivering Relevant Tools for Tasks](https://www.nngroup.com/articles/contextual-menus/)\n  (Nielsen Norman Group, 2019)\n\n- Michael Villar,\n  [Building like it's 1984: A comprehensive guide to creating intuitive context menus](https://height.app/blog/guide-to-build-context-menus#:~:text=Context%20menus%20are%20menus%20that,different%20operating%20systems%20and%20apps.)\n  (Height, 2022)\n\n## Feedback\n\nHelp us improve this component by providing feedback, asking questions, and\nleaving any other comments on\n[GitHub](https://github.com/carbon-design-system/carbon-website/issues/new?assignees=&labels=feedback&template=feedback.md).\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/components/menu/usage.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}