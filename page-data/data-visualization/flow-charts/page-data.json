{"componentChunkName":"component---src-pages-data-visualization-flow-charts-index-mdx","path":"/data-visualization/flow-charts/","result":{"pageContext":{"frontmatter":{"title":"Flow Charts","description":"Uncover intricate data relationships and flows, providing valuable insights into complex data sets."},"relativePagePath":"/data-visualization/flow-charts/index.mdx","titleType":"prepend","MdxNode":{"id":"7aee6e5d-048e-5199-a47d-82fd4907230b","children":[],"parent":"b432090d-e3d3-5a9f-83c9-213730d22e2e","internal":{"content":"---\ntitle: Flow Charts\ndescription:\n  Uncover intricate data relationships and flows, providing valuable insights\n  into complex data sets.\n---\n\nimport {\n  complexChartDemoGroups,\n  getDemoGroupByTitle,\n} from '../../../data/data-visualization';\n\nimport { AnchorLinks, AnchorLink } from 'gatsby-theme-carbon';\nimport ChartDemoGroup from '../../../components/data-visualization/ChartDemoGroup.js';\n\n<PageDescription>\n\nUncover intricate data relationships and flows, providing valuable insights into\ncomplex data sets.\n\n</PageDescription>\n\n<InlineNotification>\n\n**Note:** Some of the charts below are not included in the carbon-charts\nrepository yet. To see our roadmap, make feature requests, or contribute, please\ngo to the\n[carbon-charts repository](https://github.com/carbon-design-system/carbon-charts).\n\n</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Alluvial/sankey diagrams</AnchorLink>\n  <AnchorLink>Network diagrams</AnchorLink>\n  <AnchorLink>Parallel coordinates</AnchorLink>\n  <AnchorLink>Tree diagrams</AnchorLink>\n</AnchorLinks>\n\n## Alluvial/sankey diagrams\n\nAlluvial, or Sankey diagrams, are a type flow diagram designed to show two\nindicators of a dataset and how records distribute among them, highlighting\ncorrelations.\n\nMultiple blocks of two indicators can be placed next to each other creating a\nwider alluvial diagram but it’s crucial to consider that this specific kind of\nchart does not show correlations between indicators that are not directly\nconnected. This is usually emphasized using a different set of colors for each\nblock.\n\n<div>\n  <ChartDemoGroup demoGroup={getDemoGroupByTitle('alluvial')} light={true} />\n</div>\n\n## Network diagrams\n\nA network diagram is a way of visually representing network architecture. It\nmaps out network structure with a variety of icons and connecting lines. It’s\nideal for sharing the layout of a network because the visual presentation makes\nit easier for users to understand complex connections at a glance. These\ndiagrams are especially useful for isolating problems or when designing a new\nsystem.\n\n### Building blocks\n\nCarbon Charts offers building blocks for network diagrams in the form of\n**React** & **Angular** components.\n\nNote that Carbon Charts does not provide layouts for diagrams. You can utilize\nthese components alongside graphing libraries (such as elkjs), or by composing\nyour own layouts.\n\n**Getting started guides:**\n\n- [React](https://carbon-design-system.github.io/carbon-charts/react/?path=/story/diagrams--start-here)\n- [Angular](https://carbon-design-system.github.io/carbon-charts/angular/?path=/story/diagrams--start-here)\n\nHere's an example using elkjs in react\n\n<iframe\n  src=\"https://codesandbox.io/embed/carbon-charts-react-elkjs-diagram-b9xyp?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  style={{\n    width: '100%',\n    height: '500px',\n    border: '0',\n    borderRadius: '4px',\n    overflow: 'hidden',\n  }}\n  title=\"carbon-charts-react-elkjs-diagram\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<Row>\n<Column  colLg={12} colMd={8} colSm={4} >\n\n![Network diagram swimlane graph, organic view](images/06_adv_tree_928.png)\n\n<Caption>Example of a network diagram in a swimlane graph from QRadar</Caption>\n\n</Column>\n</Row>\n\n### Node types\n\nThis specific network diagram is comprised of parent and child nodes. In the\nQRadar example, parent nodes convey the story of what happened in an\ninvestigation and can be clustered based on relationship type. Child nodes\nappear under parent nodes and can also be clustered.\n\nNetwork diagrams use the same scale controls that apply to the rest of the data\nvisualization components, however they appear in a floating tile, enabling the\nuser to zoom and pan simultaneously. It’s also helpful to include the expand and\ncollapse all nodes feature, which gives users the ability to easily navigate\nbetween detailed and high-level views of the diagram.\n\n<Row>\n<Column  colLg={4} colMd={4} colSm={4} >\n\n![Floating zoom and pan detail](images/07_adv_tree_detail_288.png)\n\n<Caption>Detail of floating zoom and pan functionality</Caption>\n\n</Column>\n\n<Column  colLg={4} colMd={4} colSm={4} >\n\n![Child nodes detail](images/08_adv_tree_detail_288.png)\n\n<Caption>\n  Detail of child nodes clustered underneath master parent cluster\n</Caption>\n\n</Column>\n</Row>\n\n## Parallel coordinates\n\nParallel coordinate charts visualize individual data elements across multiple\nvariables. Each variable corresponds to a vertical axis and each data element is\ndisplayed as a series of connected points along the axes.\n\nThe parallel coordinate chart is the equivalent of a radar chart with axes —\nmaking it preferable for many use cases. Its strength is that each variable can\nbe completely different and even have its own scale (the units can even be\ndifferent).\n\n<Row>\n<Column  colLg={12} colMd={8} colSm={4} >\n\n![Parallel coordinate plot](images/new_adv_parallel_928.png)\n\n</Column>\n</Row>\n\n### Parallel coordinate behaviors\n\nHover effects that highlight a specific group or axis can be added to enhance\nbasic parallel coordinate charts. These charts can also include interactive\nfeatures like the brush component. By clicking and dragging along any axis, you\ncan specify a filter for that dimension. The brush component is also used in the\nupdated scatterplot matrix example. See the detail below.\n\n<Row>\n<Column  colLg={4} colMd={4} colSm={4} >\n\n![Brush component detail](images/new_adv_parallel_detail_01_288.png)\n\n<Caption>Detail of brush component behavior</Caption>\n\n</Column>\n\n<Column  colLg={4} colMd={4} colSm={4} >\n\n![Tooltip detail](images/new_adv_parallel_detail_02_288.png)\n\n<Caption>Detail of a comparative tooltip interaction on hover</Caption>\n\n</Column>\n</Row>\n\n## Tree diagrams\n\nCarbon Charts supports both tree diagrams and dendrograms. Although the two are\nvery similar, dendrograms tend to offer a more responsive layout for varying\nscreen sizes.\n\n<div>\n  <ChartDemoGroup demoGroup={getDemoGroupByTitle('tree')} light={true} />\n</div>\n","type":"Mdx","contentDigest":"4cb7d1289f858a06c27716e69043d2b9","owner":"gatsby-plugin-mdx","counter":4866},"frontmatter":{"title":"Flow Charts","description":"Uncover intricate data relationships and flows, providing valuable insights into complex data sets."},"exports":{},"rawBody":"---\ntitle: Flow Charts\ndescription:\n  Uncover intricate data relationships and flows, providing valuable insights\n  into complex data sets.\n---\n\nimport {\n  complexChartDemoGroups,\n  getDemoGroupByTitle,\n} from '../../../data/data-visualization';\n\nimport { AnchorLinks, AnchorLink } from 'gatsby-theme-carbon';\nimport ChartDemoGroup from '../../../components/data-visualization/ChartDemoGroup.js';\n\n<PageDescription>\n\nUncover intricate data relationships and flows, providing valuable insights into\ncomplex data sets.\n\n</PageDescription>\n\n<InlineNotification>\n\n**Note:** Some of the charts below are not included in the carbon-charts\nrepository yet. To see our roadmap, make feature requests, or contribute, please\ngo to the\n[carbon-charts repository](https://github.com/carbon-design-system/carbon-charts).\n\n</InlineNotification>\n\n<AnchorLinks>\n  <AnchorLink>Alluvial/sankey diagrams</AnchorLink>\n  <AnchorLink>Network diagrams</AnchorLink>\n  <AnchorLink>Parallel coordinates</AnchorLink>\n  <AnchorLink>Tree diagrams</AnchorLink>\n</AnchorLinks>\n\n## Alluvial/sankey diagrams\n\nAlluvial, or Sankey diagrams, are a type flow diagram designed to show two\nindicators of a dataset and how records distribute among them, highlighting\ncorrelations.\n\nMultiple blocks of two indicators can be placed next to each other creating a\nwider alluvial diagram but it’s crucial to consider that this specific kind of\nchart does not show correlations between indicators that are not directly\nconnected. This is usually emphasized using a different set of colors for each\nblock.\n\n<div>\n  <ChartDemoGroup demoGroup={getDemoGroupByTitle('alluvial')} light={true} />\n</div>\n\n## Network diagrams\n\nA network diagram is a way of visually representing network architecture. It\nmaps out network structure with a variety of icons and connecting lines. It’s\nideal for sharing the layout of a network because the visual presentation makes\nit easier for users to understand complex connections at a glance. These\ndiagrams are especially useful for isolating problems or when designing a new\nsystem.\n\n### Building blocks\n\nCarbon Charts offers building blocks for network diagrams in the form of\n**React** & **Angular** components.\n\nNote that Carbon Charts does not provide layouts for diagrams. You can utilize\nthese components alongside graphing libraries (such as elkjs), or by composing\nyour own layouts.\n\n**Getting started guides:**\n\n- [React](https://carbon-design-system.github.io/carbon-charts/react/?path=/story/diagrams--start-here)\n- [Angular](https://carbon-design-system.github.io/carbon-charts/angular/?path=/story/diagrams--start-here)\n\nHere's an example using elkjs in react\n\n<iframe\n  src=\"https://codesandbox.io/embed/carbon-charts-react-elkjs-diagram-b9xyp?fontsize=14&hidenavigation=1&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  style={{\n    width: '100%',\n    height: '500px',\n    border: '0',\n    borderRadius: '4px',\n    overflow: 'hidden',\n  }}\n  title=\"carbon-charts-react-elkjs-diagram\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n\n<Row>\n<Column  colLg={12} colMd={8} colSm={4} >\n\n![Network diagram swimlane graph, organic view](images/06_adv_tree_928.png)\n\n<Caption>Example of a network diagram in a swimlane graph from QRadar</Caption>\n\n</Column>\n</Row>\n\n### Node types\n\nThis specific network diagram is comprised of parent and child nodes. In the\nQRadar example, parent nodes convey the story of what happened in an\ninvestigation and can be clustered based on relationship type. Child nodes\nappear under parent nodes and can also be clustered.\n\nNetwork diagrams use the same scale controls that apply to the rest of the data\nvisualization components, however they appear in a floating tile, enabling the\nuser to zoom and pan simultaneously. It’s also helpful to include the expand and\ncollapse all nodes feature, which gives users the ability to easily navigate\nbetween detailed and high-level views of the diagram.\n\n<Row>\n<Column  colLg={4} colMd={4} colSm={4} >\n\n![Floating zoom and pan detail](images/07_adv_tree_detail_288.png)\n\n<Caption>Detail of floating zoom and pan functionality</Caption>\n\n</Column>\n\n<Column  colLg={4} colMd={4} colSm={4} >\n\n![Child nodes detail](images/08_adv_tree_detail_288.png)\n\n<Caption>\n  Detail of child nodes clustered underneath master parent cluster\n</Caption>\n\n</Column>\n</Row>\n\n## Parallel coordinates\n\nParallel coordinate charts visualize individual data elements across multiple\nvariables. Each variable corresponds to a vertical axis and each data element is\ndisplayed as a series of connected points along the axes.\n\nThe parallel coordinate chart is the equivalent of a radar chart with axes —\nmaking it preferable for many use cases. Its strength is that each variable can\nbe completely different and even have its own scale (the units can even be\ndifferent).\n\n<Row>\n<Column  colLg={12} colMd={8} colSm={4} >\n\n![Parallel coordinate plot](images/new_adv_parallel_928.png)\n\n</Column>\n</Row>\n\n### Parallel coordinate behaviors\n\nHover effects that highlight a specific group or axis can be added to enhance\nbasic parallel coordinate charts. These charts can also include interactive\nfeatures like the brush component. By clicking and dragging along any axis, you\ncan specify a filter for that dimension. The brush component is also used in the\nupdated scatterplot matrix example. See the detail below.\n\n<Row>\n<Column  colLg={4} colMd={4} colSm={4} >\n\n![Brush component detail](images/new_adv_parallel_detail_01_288.png)\n\n<Caption>Detail of brush component behavior</Caption>\n\n</Column>\n\n<Column  colLg={4} colMd={4} colSm={4} >\n\n![Tooltip detail](images/new_adv_parallel_detail_02_288.png)\n\n<Caption>Detail of a comparative tooltip interaction on hover</Caption>\n\n</Column>\n</Row>\n\n## Tree diagrams\n\nCarbon Charts supports both tree diagrams and dendrograms. Although the two are\nvery similar, dendrograms tend to offer a more responsive layout for varying\nscreen sizes.\n\n<div>\n  <ChartDemoGroup demoGroup={getDemoGroupByTitle('tree')} light={true} />\n</div>\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/data-visualization/flow-charts/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}