{"componentChunkName":"component---src-pages-guidelines-color-usage-mdx","path":"/guidelines/color/usage/","result":{"pageContext":{"frontmatter":{"title":"Color","description":"Maintaining consistent and engaging digital interfaces throughout IBM, whether applications or experiences, demands extended guidance around color usage.","tabs":["Overview","Usage","Tokens","Code"]},"relativePagePath":"/guidelines/color/usage.mdx","titleType":"prepend","MdxNode":{"id":"f39cabfd-27e2-5e73-acaf-7ce86139e7e3","children":[],"parent":"c85fba00-2c6c-5ee9-adb2-838b00ca6f29","internal":{"content":"---\ntitle: Color\ndescription:\n  Maintaining consistent and engaging digital interfaces throughout IBM, whether\n  applications or experiences, demands extended guidance around color usage.\ntabs: ['Overview', 'Usage', 'Tokens', 'Code']\n---\n\n<PageDescription>\n\nImplementing complex color relationships can be challenging. Provided here are\nsome methods and techniques to help solve your product's color and theming\nneeds.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Implementing layering</AnchorLink>\n<AnchorLink>Layering tokens</AnchorLink>\n<AnchorLink>Contextual tokens</AnchorLink>\n<AnchorLink>Inline theming</AnchorLink>\n<AnchorLink>Light or dark mode</AnchorLink>\n\n</AnchorLinks>\n\n## Implementing layering\n\nThere are two ways to implement the\n[layering model](/guidelines/color/overview#layering-model) in a theme, either\nby using explicit tokens or contextual tokens. These techniques can be used\nindependently in a product or can be used together. Both methods produce the\nsame visual result, the difference lays in how you develop with them. Designers\nonly need to be concerned with the layering tokens.\n\nThe explicit layering tokens are standard design tokens. Each layering token\ncorresponds to a specific layer on the page and is used exactly like any other\ntoken from Carbon. Contextual tokens are a special case of layering tokens where\nthe value changes depending on where the token is used on a page. This type of\ntoken is incredibly useful for building reusable components that work across\nlayers.\n\n| Token type          | Definition                                                                                                                                |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| _Layering tokens_   | Explicit layerings tokens used to manually map the layering model onto components. They come in sets that pair with individual UI layers. |\n| _Contextual tokens_ | Abstract code tokens used to automatically map the layering model onto components depending on where it used on the page.                 |\n\n<Row>\n<Column colLg={12}>\n\n![Layering model token comparison](images/color-implementation-compare.png)\n\n</Column>\n</Row>\n\n<Caption>\n  A visual spec using layering tokens (left) versus contextual tokens (right).\n</Caption>\n\n<br />\n\n## Layering tokens\n\nLayering tokens are explicit tokens used to manually map the layering model onto\ncomponents. They are used just like any other color token, and in fact, are a\nreplacement for the `ui` color tokens from v10. Layering tokens come in\npredefined sets that coordinate with the different layer levels. For each layer\nthat a component needs to lives on a separate component variation must be built\nusing the tokens from that layer set.\n\n### When to use layering tokens\n\n- As an easy starting point when first working with the layering model, they are\n  exactly like the tokens you already know and love\n- When building components that may only need to be on one layer or have only\n  one color variant\n\n### How layering tokens work\n\nThere are four layers within a theme: base layer, layer 01, layer 02, and\nlayer 03. Layers stack one on top of the other in a set order. Each step in UI\ncolor (excluding interaction colors) is another layer and will require the use\nof a different set of layering tokens.\n\n<InlineNotification>\n\n**Migration note:** Previously, in v10 most color tokens had numeral endings,\nnow in v11 only layering tokens will have this distinction. For more\ninformation, see the [migration guide](/migrating/guide/design#color-tokens).\n\n</InlineNotification>\n\n#### Layer sets\n\nLayering tokens are divided into sets and are identified by a number (-00, -01,\n-02, -03) attached to the end of token name. Any token with an `-01` ending\nbelongs to the 01 layering set and so on. The exception are tokens in the base\nset which use `background` tokens without a number ending as well as tokens with\n`-00` classification.\n\nTokens from the same set are used together when building components. For\nexample, in a dropdown both the input and menu will use tokens from the same set\n(see image below). In addition to the `$layer` tokens, layer sets also include\nborder and field tokens, as well as interactive states tokens. A field is\nconsidered a layer on top of the background it is placed on, for example a field\nplaced on a `$layer-02` background will use `$field-03`. Border tokens however,\npair with its same number, for example `$field-03` pairs with\n`$border-strong-03` in a text input.\n\nNot all color tokens are part of a layer set. Some tokens groups, like `text`\nand `icon`, work across layers. For a list of the layering tokens, see the color\n[usage tab](/guidelines/color/usage).\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"White\">\n\n![Layer set tokens applied to dropdown in the White theme](images/color-implementation-layer-set-W.png)\n\n</Tab>\n\n<Tab label=\"Gray 10\">\n\n![Layer set tokens applied to dropdown in the Gray 10 theme](images/color-implementation-layer-set-G10.png)\n\n</Tab>\n\n<Tab label=\"Gray 90\">\n\n![Layer set tokens applied to dropdown in the Gray 90 theme](images/color-implementation-layer-set-G90.png)\n\n</Tab>\n\n<Tab label=\"Gray 100\">\n\n![Layer set tokens applied to dropdown in the Gray 100 theme](images/color-implementation-layer-set-G100.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n<Caption>\n  A dropdown using tokens from the four layer sets: base set (magenta), 01 layer\n  set (purple), 02 layer set (teal), and 03 layer set (cyan).\n</Caption>\n\n<br />\n\n#### Applying layering tokens in a layout\n\nReferencing the image below, the starting base layer is the page area behind and\nabove the tabs; it uses `$background` from the base set. The tab component is\nlayered on top of the page background to create the first layer. The selected\ntab uses `$layer-01` and the unselected tabs use `$layer-accent-01` which is not\nconsidered a proper layer but a supporting color for `$layer` inside of\ncomponents. The tab content area attached to the selected tab is also only one\nlayer above the base and so also uses `$layer-01` as its background.\n\nIn the tab’s main section, the text input field is placed on top\nof `$layer-01` making it a part of the next layer level and will use tokens from\nthe 02 layer set, so `$field-02` and `$border-strong-02`. Also a part of the\nsecond layer level are the tiles in the sub-section which includes the tile\nbackground `$layer-02` as well as the border between the\ntiles `$border-subtle-02`. However, components added on top of the tiles—the\ntext input and overflow menu—are considered part of third layer level and will\nuse tokens from the 03 layer set.\n\n<Row>\n<Column colLg={12}>\n\n<Tabs>\n\n<Tab label=\"White\">\n\n![In context layer set token example in the White theme](images/color-implementation-layer-set-2-W.png)\n\n</Tab>\n\n<Tab label=\"Gray 10\">\n\n![In context layer set token example in the Gray 10 theme](images/color-implementation-layer-set-2-G10.png)\n\n</Tab>\n\n<Tab label=\"Gray 90\">\n\n![In context layer set token example in the Gray 90 theme](images/color-implementation-layer-set-2-G90.png)\n\n</Tab>\n\n<Tab label=\"Gray 100\">\n\n![In context layer set token example in the Gray 100 theme](images/color-implementation-layer-set-2-G100.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n<Caption>\n  An example layout applying tokens from the four different layer sets: base set\n  (magenta), 01 layer set (purple), 02 layer set (teal), and 03 layer set\n  (cyan).\n</Caption>\n\n<br />\n\n#### Building components with layer tokens\n\nBuilding components with layering tokens works just like how you would have\nalways built component color variations in Carbon. For each layer that a\ncomponent lives on, a separate component variation must be built using the\ntokens from that layering set.\n\nSpec each component variant with its corresponding layering set. For elements\nthat are not part of the layer sets like type or icons, apply color tokens as\nyou normally would. Non-layer tokens will be the same across variants because\nthey have enough contrast not to need a change with each layer.\n\n<InlineNotification>\n\n**Migration note:** In v10, the additional color variants were known as\nthe light prop variants. The `light` variants now use the 02 layer set. These\nnew tokens also allow for a third color variant using the 03 layer set in\ncomponents that was not possible in v10.\n\n</InlineNotification>\n\n<Row>\n<Column colLg={8}>\n\n![Component spec example using layering tokens](images/color-implementation-layer-set-3.png)\n\n</Column>\n</Row>\n\n<Caption>\n  Example component spec in the white theme using the 01 layer set tokens.\n</Caption>\n\n## Contextual tokens\n\nContextual tokens are code specific tokens used to automatically map the\nlayering model onto components depending on where it used on the page. A\ncontextual token is aware of what layer it is placed on and will call the\ncorrect values for that layer. There is only one set of contextual tokens and\nthey require only one component variant to be built.\n\nContextual tokens can be used in place of layering tokens. The two types of\ntokens have similar token names except the contextual tokens do not have the\nnumber terminal. Contextual tokens keep the same name no matter which layer it\nsits on.\n\n### When to use contextual tokens\n\n- When building reusable components that need to work across layers.\n\n### How contextual tokens work\n\nLayering is still possible using the contextual tokens. However, the value of\nthe token is not fixed per theme like with a normal design token from the\nlayering sets. Contextual tokens have a variable value within a theme that is\ncontrolled through the use of a special component called the layer component.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"White\">\n\n![Layer set tokens applied to dropdown in the White theme](images/color-implementation-contextual-W.png)\n\n</Tab>\n\n<Tab label=\"Gray 10\">\n\n![Layer set tokens applied to dropdown in the Gray 10 theme](images/color-implementation-contextual-G10.png)\n\n</Tab>\n\n<Tab label=\"Gray 90\">\n\n![Layer set tokens applied to dropdown in the Gray 90 theme](images/color-implementation-contextual-G90.png)\n\n</Tab>\n\n<Tab label=\"Gray 100\">\n\n![Layer set tokens applied to dropdown in the Gray 100 theme](images/color-implementation-contextual-G100.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n<Caption>\n  A dropdown across three layers in a theme, all using the same contextual\n  tokens.\n</Caption>\n\n<br />\n\n#### Using the layer component\n\nThe layer component is used to render a single component on different layers.\nComponents built with contextual tokens when placed inside the layer component\nwill automatically map to the correct layer based on where it sits in the layer\nstructure. Components can be nested inside the layer component up to three\nlevel, the last level corresponding to the 03 layer set tokens. By default,\ntokens use the 01 layer set tokens in the first layer.\n\nFor more guidance on the layer component, go to the\n[Storybook](https://react.carbondesignsystem.com/?path=/docs/components-layer--default#layer).\n\n```css Layer component\n<Layer>\n  <ChildComponent />\n  <Layer>\n    <ChildComponent />\n    <Layer>\n      <ChildComponent />\n    </Layer>\n  </Layer>\n</Layer>\n```\n\n<br />\n\n#### Applying contextual layer tokens in a layout\n\nWhen applying contextual tokens, there are no layer sets so each layer uses the\nsame tokens but will be wrapped in a different level of the layer component. For\nexample, referencing the image below, the two text inputs are on different\nlayers and they both use the `$field` token but will render in different values\nbased on where it is nested in layer component. The tab content area is wrapped\nin the first level of the layer component (shown in purple) and therefore the\ntext input in the main section is nested in second level of layer component\n(shown in teal).\n\n<Row>\n<Column colLg={12}>\n\n<Tabs>\n\n<Tab label=\"White\">\n\n![In context contextual token example in the White theme](images/color-implementation-contextual-2-W.png)\n\n</Tab>\n\n<Tab label=\"Gray 10\">\n\n![In context contextual token example in the Gray 10 theme](images/color-implementation-contextual-2-G10.png)\n\n</Tab>\n\n<Tab label=\"Gray 90\">\n\n![In context contextual token example in the Gray 90 theme](images/color-implementation-contextual-2-G90.png)\n\n</Tab>\n\n<Tab label=\"Gray 100\">\n\n![In context contextual token example in the Gray 100 theme](images/color-implementation-contextual-2-G100.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n<Caption>\n  A layout using contextual tokens within a single theme. The components are\n  wrapped in the layer component to control the visual output: first layer\n  (purple), second nested layer (teal), and third nested layer (cyan).\n</Caption>\n\n### Building components with contextual tokens\n\nBuild a single component as you would normally but apply the contextual color\ntokens instead of the layer set tokens. Then in your product code wrap the\ncomponent in the layer component to express the nested layer visuals. Even if\nthe component is never used at other layer levels it is still acceptable and\nencouraged to use the contextual tokens.\n\n#### Designing for contextual tokens\n\nContextual tokens are only available in code and are not a part of the design\nassets. Designers should use the layer set tokens when creating assets but can\ninclude contextual tokens in their specs and redlines. To convert a layer set\ntoken to a contextual token, simply drop the numbers at the end of the token\nname.\n\n<Row>\n<Column colLg={8}>\n\n![Component spec example using contextual tokens](images/color-implementation-contextual-3.png)\n\n</Column>\n</Row>\n\n## Inline theming\n\nInline theming is used when a section of a UI needs to be a different theme from\nthe rest of the page. Inline theming allows themes to be nested within each\nother without needing custom styles or overrides.\n\nIn product, a common use-case for inline theming is applying a contrasting theme\nto the UI Shell or side panels. This is especially common in light themed\nproducts or light modes. For example, the majority of a page may use the White\ntheme while the UI Shell and the right side panels use an inline Gray 100 theme.\nThis type of theme pairing creates a high contrast moment that can add emphasis\nand focus to a work flow.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline themes](images/color-implementation-inline-1.png)\n\n</Column>\n</Row>\n\n### When to use inline theming\n\nOnly use inline theming for major shifts in color, like high contrast moments.\nThe more subtle transitions of color in a product are handled within each theme\nthrough the layering model tokens. It is unlikely that you'll need to inline a\nWhite theme within the Gray 10 theme or the Gray 90 theme within the Gray100\ntheme.\n\n### How inline theming works\n\nIn order to implement inline theming, you must use the Carbon color tokens and\nthemes. For the section of the product you want to inline theme, simply apply\nthe core Carbon tokens like you were doing for the rest of the page, then wrap\nthe targeted section in the Theme component to assign a new theme.\n\n#### Theme component\n\nThe theme component allows you to specify the theme for a page, or a portion of\na page. It is most often used to implement inline theming in order to specify\nwhat theme a section of the page should render with.\n\nFor more guidance on the theme component, go to the\n[Storybook](https://react.carbondesignsystem.com/?path=/docs/components-theme--default#theme).\n\n```css Theme component\n<Theme theme=\"g100\">\n  <ChildComponent />\n</Theme>\n```\n\n### Designing for inline theming\n\nWhen designing for inline theming, you'll need to pull assets that you want in\nyour frame from other theme library files in Figma. Assets will have the same\ntoken names across libraries but will show different values. Specify in the\ndesign deliverables which sections of the page will be using an inline theme.\n\n<Row>\n<Column colLg={12}>\n\n![Example of inline themes](images/color-implementation-inline-2.png)\n\n</Column>\n</Row>\n\n## Light or dark mode\n\nLight or dark mode is a theme setting that allows the end user to choose either\nan UI that is predominately light or dark in color. The UI will automatically\nswitch from using light colors backgrounds with dark color text to using dark\ncolor backgrounds with light color text.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline themes](images/color-light-dark.png)\n\n</Column>\n</Row>\n\n### When to use modes\n\nAdding the ability to change between a light or dark mode in your product is not\nrequired as an IBM product but is highly encouraged. Attention to detail,\ncustomization, and being at the forefront of innovation separates IBM over our\ncompetitors.\n\n#### Respecting our users preferences\n\nMost operating system nowadays (ex: MacOS, iOS, Windows, Android and\nLinux/GNOME 3) support dark and light modes, offering APIs so that websites and\napplication can automatically match users preferred mode. Many users prefer\nworking on dark themed IDEs and using dark mode in their machines.\n\n#### Creating optimal user conditions\n\nFor some users, choosing light versus dark mode is more than an aesthetic\nchoice. While some [research](https://www.nngroup.com/articles/dark-mode/) shows\nthat unimpaired sighted user preform better in light mode, it also shows that\ndark mode is better for people with cataract and related disorders. Dark mode\nemits less light and can therefor reduces eyes strain and help prevent headaches\nand migraine.\n\n### How modes works\n\nThe themes use color tokens to interpret which values are needed for each theme.\nIt is the color tokens that allows a UI to so easily switch from one mode to the\nnext. You cannot implement light or dark mode without using color tokens\neverywhere in your product. Hard coded values will not change when the mode is\nswitched.\n\n<Tabs>\n\n<Tab label=\"Light mode\">\n\n![Dashboard in light mode](images/color-implementation-mode-light.png)\n\n</Tab>\n\n<Tab label=\"Dark mode\">\n\n![Dashboard in dark mode](images/color-implementation-mode-dark.png)\n\n</Tab>\n\n</Tabs>\n\n### Designing for modes\n\nYou can build a light or dark mode by using the Carbon themes and color tokens.\nYour product will need to choose a light Carbon theme (White or Gray 10) and a\ndark Carbon theme (Gray 100 or Gray 90).  All color in your designs and\ncomponents whether Carbon, PAL or custom made should be redlined using the\nCarbon color tokens (it would also be to your advantage to use the color token\nlayer styles from the Carbon design asset libraries when designing).\n\nRedlining a design in one theme should be enough and not require duplicate\ndesigns. However, products teams may want to have design comps in multiple\nthemes. In Figma, we recommend that you duplicate your files, then swap your\ncurrent theme library for another. This replaces local instances with matching\ninstances from the other library. For step-by-step instructions, visit this\n[Figma tutorial](https://help.figma.com/hc/en-us/articles/4404856784663-Swap-style-and-component-libraries).\n\n#### Creating a mode control\n\nSince this is a user preference, you'll need to add a control somewhere in your\nproduct for the user to make a theme mode selection. This is commonly done in a\ndisplay setting, user profile, or account area. At the moment, the placement and\ndesign of this control is up to product teams, further guidance and designs for\na mode control in IBM products may be offered in the future.\n\n<Row>\n<Column colLg={12}>\n\n![Example of a color mode control](images/color-modes-control.png)\n\n</Column>\n</Row>\n\n<Caption>\n  In IBM Cloud (beta), the theme control can be accessed through the user\n  profile panel in the header (left). The \"Change theme\" link triggers a model\n  where the user can save their theme preference (right).\n</Caption>\n\n#### Inline themes with modes\n\nMixing themes inline is still allowed with light or dark mode. Mixing inline\ntheme contrast between elements in different modes is also allowed. It is very\ncommon for products to have side panels or UI shell elements be high contrast in\nlight mode but low contrast in dark mode. These relationships can be mapped in\ncode using the the\n[theme component](https://react.carbondesignsystem.com/?path=/docs/components-theme--default).\nNote that smaller components built with an inverse tokens (like tooltip) should\nremain high contrast when switching modes.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a color mode control](images/color-light-dark-inline.png)\n\n</Column>\n</Row>\n\n<Caption>\n  Light mode with an inline theme Gray 100 panel (left) and the dark mode\n  without an inline theme (right)\n</Caption>\n\n#### Consider illustrations \n\nYou'll need to account for illustrations and other imagery like pictograms\nchanging color between modes. Otherwise you may end up having very high contrast\nimages in one mode vs the other. Whenever possible, switch out assets entirely\nbettwen modes to reflect the theme either by using tokens in the svg code or\nmanually swapping out a png. When not possible, a low effort way to design\nimages for modes is to use transparent backgrounds.\n\n<InlineNotification>\n\n**Additional guidance:** Checkout some helpful PAL guidance around how to\nproperly treat illustrations, images, and pictograms in light or dark mode on\n[IBM Cloud PAL](https://pages.github.ibm.com/ibmcloud/pal/dark-mode-guidelines/designers/#illustrations-in-dark-mode),\n_for IBMers only_.\n\n</InlineNotification>\n\n<DoDontRow>\n  <DoDont\n    type=\"do\"\n    colLg={6}\n    caption=\"Use light colored assets, tones, and backgrounds for illustrations in the light themes (the best solution)\">\n\n![A light UI featuring a light themed illustration](./images/light-dark-mode-do-1.png)\n\n  </DoDont>\n  <DoDont\n    type=\"do\"\n    colLg={6}\n    caption=\"Use dark colored assets, tones, and backgrounds for illustrations in the dark themes (the best solution)\">\n\n![A dark UI featuring a dark themed illustration](./images/light-dark-mode-do-2.png)\n\n  </DoDont>\n</DoDontRow>\n\n<DoDontRow>\n <DoDont type=\"dont\" colLg={6} caption=\"Don’t use images with colored backgrounds when switching between modes because they will appear broken and in high contrast in the opposite mode\">\n\n![A dark UI featuring a light illustration with a white background](images/light-dark-mode-dont-1.png)\n\n  </DoDont>\n  <DoDont\n    type=\"do\"\n    colLg={6}\n    caption=\"If only one image is available between modes, use an image with a transparent background and swap the container color background to match the mode (acceptable solution)\">\n\n![A dark UI featuring a light themed illustration with a dark background](images/light-dark-mode-do-3.png)\n\n  </DoDont>\n</DoDontRow>\n","type":"Mdx","contentDigest":"0bb696f9bbbc976f39145c5487b173cd","owner":"gatsby-plugin-mdx","counter":5039},"frontmatter":{"title":"Color","description":"Maintaining consistent and engaging digital interfaces throughout IBM, whether applications or experiences, demands extended guidance around color usage.","tabs":["Overview","Usage","Tokens","Code"]},"exports":{},"rawBody":"---\ntitle: Color\ndescription:\n  Maintaining consistent and engaging digital interfaces throughout IBM, whether\n  applications or experiences, demands extended guidance around color usage.\ntabs: ['Overview', 'Usage', 'Tokens', 'Code']\n---\n\n<PageDescription>\n\nImplementing complex color relationships can be challenging. Provided here are\nsome methods and techniques to help solve your product's color and theming\nneeds.\n\n</PageDescription>\n\n<AnchorLinks>\n\n<AnchorLink>Implementing layering</AnchorLink>\n<AnchorLink>Layering tokens</AnchorLink>\n<AnchorLink>Contextual tokens</AnchorLink>\n<AnchorLink>Inline theming</AnchorLink>\n<AnchorLink>Light or dark mode</AnchorLink>\n\n</AnchorLinks>\n\n## Implementing layering\n\nThere are two ways to implement the\n[layering model](/guidelines/color/overview#layering-model) in a theme, either\nby using explicit tokens or contextual tokens. These techniques can be used\nindependently in a product or can be used together. Both methods produce the\nsame visual result, the difference lays in how you develop with them. Designers\nonly need to be concerned with the layering tokens.\n\nThe explicit layering tokens are standard design tokens. Each layering token\ncorresponds to a specific layer on the page and is used exactly like any other\ntoken from Carbon. Contextual tokens are a special case of layering tokens where\nthe value changes depending on where the token is used on a page. This type of\ntoken is incredibly useful for building reusable components that work across\nlayers.\n\n| Token type          | Definition                                                                                                                                |\n| ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| _Layering tokens_   | Explicit layerings tokens used to manually map the layering model onto components. They come in sets that pair with individual UI layers. |\n| _Contextual tokens_ | Abstract code tokens used to automatically map the layering model onto components depending on where it used on the page.                 |\n\n<Row>\n<Column colLg={12}>\n\n![Layering model token comparison](images/color-implementation-compare.png)\n\n</Column>\n</Row>\n\n<Caption>\n  A visual spec using layering tokens (left) versus contextual tokens (right).\n</Caption>\n\n<br />\n\n## Layering tokens\n\nLayering tokens are explicit tokens used to manually map the layering model onto\ncomponents. They are used just like any other color token, and in fact, are a\nreplacement for the `ui` color tokens from v10. Layering tokens come in\npredefined sets that coordinate with the different layer levels. For each layer\nthat a component needs to lives on a separate component variation must be built\nusing the tokens from that layer set.\n\n### When to use layering tokens\n\n- As an easy starting point when first working with the layering model, they are\n  exactly like the tokens you already know and love\n- When building components that may only need to be on one layer or have only\n  one color variant\n\n### How layering tokens work\n\nThere are four layers within a theme: base layer, layer 01, layer 02, and\nlayer 03. Layers stack one on top of the other in a set order. Each step in UI\ncolor (excluding interaction colors) is another layer and will require the use\nof a different set of layering tokens.\n\n<InlineNotification>\n\n**Migration note:** Previously, in v10 most color tokens had numeral endings,\nnow in v11 only layering tokens will have this distinction. For more\ninformation, see the [migration guide](/migrating/guide/design#color-tokens).\n\n</InlineNotification>\n\n#### Layer sets\n\nLayering tokens are divided into sets and are identified by a number (-00, -01,\n-02, -03) attached to the end of token name. Any token with an `-01` ending\nbelongs to the 01 layering set and so on. The exception are tokens in the base\nset which use `background` tokens without a number ending as well as tokens with\n`-00` classification.\n\nTokens from the same set are used together when building components. For\nexample, in a dropdown both the input and menu will use tokens from the same set\n(see image below). In addition to the `$layer` tokens, layer sets also include\nborder and field tokens, as well as interactive states tokens. A field is\nconsidered a layer on top of the background it is placed on, for example a field\nplaced on a `$layer-02` background will use `$field-03`. Border tokens however,\npair with its same number, for example `$field-03` pairs with\n`$border-strong-03` in a text input.\n\nNot all color tokens are part of a layer set. Some tokens groups, like `text`\nand `icon`, work across layers. For a list of the layering tokens, see the color\n[usage tab](/guidelines/color/usage).\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"White\">\n\n![Layer set tokens applied to dropdown in the White theme](images/color-implementation-layer-set-W.png)\n\n</Tab>\n\n<Tab label=\"Gray 10\">\n\n![Layer set tokens applied to dropdown in the Gray 10 theme](images/color-implementation-layer-set-G10.png)\n\n</Tab>\n\n<Tab label=\"Gray 90\">\n\n![Layer set tokens applied to dropdown in the Gray 90 theme](images/color-implementation-layer-set-G90.png)\n\n</Tab>\n\n<Tab label=\"Gray 100\">\n\n![Layer set tokens applied to dropdown in the Gray 100 theme](images/color-implementation-layer-set-G100.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n<Caption>\n  A dropdown using tokens from the four layer sets: base set (magenta), 01 layer\n  set (purple), 02 layer set (teal), and 03 layer set (cyan).\n</Caption>\n\n<br />\n\n#### Applying layering tokens in a layout\n\nReferencing the image below, the starting base layer is the page area behind and\nabove the tabs; it uses `$background` from the base set. The tab component is\nlayered on top of the page background to create the first layer. The selected\ntab uses `$layer-01` and the unselected tabs use `$layer-accent-01` which is not\nconsidered a proper layer but a supporting color for `$layer` inside of\ncomponents. The tab content area attached to the selected tab is also only one\nlayer above the base and so also uses `$layer-01` as its background.\n\nIn the tab’s main section, the text input field is placed on top\nof `$layer-01` making it a part of the next layer level and will use tokens from\nthe 02 layer set, so `$field-02` and `$border-strong-02`. Also a part of the\nsecond layer level are the tiles in the sub-section which includes the tile\nbackground `$layer-02` as well as the border between the\ntiles `$border-subtle-02`. However, components added on top of the tiles—the\ntext input and overflow menu—are considered part of third layer level and will\nuse tokens from the 03 layer set.\n\n<Row>\n<Column colLg={12}>\n\n<Tabs>\n\n<Tab label=\"White\">\n\n![In context layer set token example in the White theme](images/color-implementation-layer-set-2-W.png)\n\n</Tab>\n\n<Tab label=\"Gray 10\">\n\n![In context layer set token example in the Gray 10 theme](images/color-implementation-layer-set-2-G10.png)\n\n</Tab>\n\n<Tab label=\"Gray 90\">\n\n![In context layer set token example in the Gray 90 theme](images/color-implementation-layer-set-2-G90.png)\n\n</Tab>\n\n<Tab label=\"Gray 100\">\n\n![In context layer set token example in the Gray 100 theme](images/color-implementation-layer-set-2-G100.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n<Caption>\n  An example layout applying tokens from the four different layer sets: base set\n  (magenta), 01 layer set (purple), 02 layer set (teal), and 03 layer set\n  (cyan).\n</Caption>\n\n<br />\n\n#### Building components with layer tokens\n\nBuilding components with layering tokens works just like how you would have\nalways built component color variations in Carbon. For each layer that a\ncomponent lives on, a separate component variation must be built using the\ntokens from that layering set.\n\nSpec each component variant with its corresponding layering set. For elements\nthat are not part of the layer sets like type or icons, apply color tokens as\nyou normally would. Non-layer tokens will be the same across variants because\nthey have enough contrast not to need a change with each layer.\n\n<InlineNotification>\n\n**Migration note:** In v10, the additional color variants were known as\nthe light prop variants. The `light` variants now use the 02 layer set. These\nnew tokens also allow for a third color variant using the 03 layer set in\ncomponents that was not possible in v10.\n\n</InlineNotification>\n\n<Row>\n<Column colLg={8}>\n\n![Component spec example using layering tokens](images/color-implementation-layer-set-3.png)\n\n</Column>\n</Row>\n\n<Caption>\n  Example component spec in the white theme using the 01 layer set tokens.\n</Caption>\n\n## Contextual tokens\n\nContextual tokens are code specific tokens used to automatically map the\nlayering model onto components depending on where it used on the page. A\ncontextual token is aware of what layer it is placed on and will call the\ncorrect values for that layer. There is only one set of contextual tokens and\nthey require only one component variant to be built.\n\nContextual tokens can be used in place of layering tokens. The two types of\ntokens have similar token names except the contextual tokens do not have the\nnumber terminal. Contextual tokens keep the same name no matter which layer it\nsits on.\n\n### When to use contextual tokens\n\n- When building reusable components that need to work across layers.\n\n### How contextual tokens work\n\nLayering is still possible using the contextual tokens. However, the value of\nthe token is not fixed per theme like with a normal design token from the\nlayering sets. Contextual tokens have a variable value within a theme that is\ncontrolled through the use of a special component called the layer component.\n\n<Row>\n<Column colLg={8}>\n\n<Tabs>\n\n<Tab label=\"White\">\n\n![Layer set tokens applied to dropdown in the White theme](images/color-implementation-contextual-W.png)\n\n</Tab>\n\n<Tab label=\"Gray 10\">\n\n![Layer set tokens applied to dropdown in the Gray 10 theme](images/color-implementation-contextual-G10.png)\n\n</Tab>\n\n<Tab label=\"Gray 90\">\n\n![Layer set tokens applied to dropdown in the Gray 90 theme](images/color-implementation-contextual-G90.png)\n\n</Tab>\n\n<Tab label=\"Gray 100\">\n\n![Layer set tokens applied to dropdown in the Gray 100 theme](images/color-implementation-contextual-G100.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n<Caption>\n  A dropdown across three layers in a theme, all using the same contextual\n  tokens.\n</Caption>\n\n<br />\n\n#### Using the layer component\n\nThe layer component is used to render a single component on different layers.\nComponents built with contextual tokens when placed inside the layer component\nwill automatically map to the correct layer based on where it sits in the layer\nstructure. Components can be nested inside the layer component up to three\nlevel, the last level corresponding to the 03 layer set tokens. By default,\ntokens use the 01 layer set tokens in the first layer.\n\nFor more guidance on the layer component, go to the\n[Storybook](https://react.carbondesignsystem.com/?path=/docs/components-layer--default#layer).\n\n```css Layer component\n<Layer>\n  <ChildComponent />\n  <Layer>\n    <ChildComponent />\n    <Layer>\n      <ChildComponent />\n    </Layer>\n  </Layer>\n</Layer>\n```\n\n<br />\n\n#### Applying contextual layer tokens in a layout\n\nWhen applying contextual tokens, there are no layer sets so each layer uses the\nsame tokens but will be wrapped in a different level of the layer component. For\nexample, referencing the image below, the two text inputs are on different\nlayers and they both use the `$field` token but will render in different values\nbased on where it is nested in layer component. The tab content area is wrapped\nin the first level of the layer component (shown in purple) and therefore the\ntext input in the main section is nested in second level of layer component\n(shown in teal).\n\n<Row>\n<Column colLg={12}>\n\n<Tabs>\n\n<Tab label=\"White\">\n\n![In context contextual token example in the White theme](images/color-implementation-contextual-2-W.png)\n\n</Tab>\n\n<Tab label=\"Gray 10\">\n\n![In context contextual token example in the Gray 10 theme](images/color-implementation-contextual-2-G10.png)\n\n</Tab>\n\n<Tab label=\"Gray 90\">\n\n![In context contextual token example in the Gray 90 theme](images/color-implementation-contextual-2-G90.png)\n\n</Tab>\n\n<Tab label=\"Gray 100\">\n\n![In context contextual token example in the Gray 100 theme](images/color-implementation-contextual-2-G100.png)\n\n</Tab>\n\n</Tabs>\n\n</Column>\n</Row>\n\n<Caption>\n  A layout using contextual tokens within a single theme. The components are\n  wrapped in the layer component to control the visual output: first layer\n  (purple), second nested layer (teal), and third nested layer (cyan).\n</Caption>\n\n### Building components with contextual tokens\n\nBuild a single component as you would normally but apply the contextual color\ntokens instead of the layer set tokens. Then in your product code wrap the\ncomponent in the layer component to express the nested layer visuals. Even if\nthe component is never used at other layer levels it is still acceptable and\nencouraged to use the contextual tokens.\n\n#### Designing for contextual tokens\n\nContextual tokens are only available in code and are not a part of the design\nassets. Designers should use the layer set tokens when creating assets but can\ninclude contextual tokens in their specs and redlines. To convert a layer set\ntoken to a contextual token, simply drop the numbers at the end of the token\nname.\n\n<Row>\n<Column colLg={8}>\n\n![Component spec example using contextual tokens](images/color-implementation-contextual-3.png)\n\n</Column>\n</Row>\n\n## Inline theming\n\nInline theming is used when a section of a UI needs to be a different theme from\nthe rest of the page. Inline theming allows themes to be nested within each\nother without needing custom styles or overrides.\n\nIn product, a common use-case for inline theming is applying a contrasting theme\nto the UI Shell or side panels. This is especially common in light themed\nproducts or light modes. For example, the majority of a page may use the White\ntheme while the UI Shell and the right side panels use an inline Gray 100 theme.\nThis type of theme pairing creates a high contrast moment that can add emphasis\nand focus to a work flow.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline themes](images/color-implementation-inline-1.png)\n\n</Column>\n</Row>\n\n### When to use inline theming\n\nOnly use inline theming for major shifts in color, like high contrast moments.\nThe more subtle transitions of color in a product are handled within each theme\nthrough the layering model tokens. It is unlikely that you'll need to inline a\nWhite theme within the Gray 10 theme or the Gray 90 theme within the Gray100\ntheme.\n\n### How inline theming works\n\nIn order to implement inline theming, you must use the Carbon color tokens and\nthemes. For the section of the product you want to inline theme, simply apply\nthe core Carbon tokens like you were doing for the rest of the page, then wrap\nthe targeted section in the Theme component to assign a new theme.\n\n#### Theme component\n\nThe theme component allows you to specify the theme for a page, or a portion of\na page. It is most often used to implement inline theming in order to specify\nwhat theme a section of the page should render with.\n\nFor more guidance on the theme component, go to the\n[Storybook](https://react.carbondesignsystem.com/?path=/docs/components-theme--default#theme).\n\n```css Theme component\n<Theme theme=\"g100\">\n  <ChildComponent />\n</Theme>\n```\n\n### Designing for inline theming\n\nWhen designing for inline theming, you'll need to pull assets that you want in\nyour frame from other theme library files in Figma. Assets will have the same\ntoken names across libraries but will show different values. Specify in the\ndesign deliverables which sections of the page will be using an inline theme.\n\n<Row>\n<Column colLg={12}>\n\n![Example of inline themes](images/color-implementation-inline-2.png)\n\n</Column>\n</Row>\n\n## Light or dark mode\n\nLight or dark mode is a theme setting that allows the end user to choose either\nan UI that is predominately light or dark in color. The UI will automatically\nswitch from using light colors backgrounds with dark color text to using dark\ncolor backgrounds with light color text.\n\n<Row>\n<Column colLg={8}>\n\n![Example of inline themes](images/color-light-dark.png)\n\n</Column>\n</Row>\n\n### When to use modes\n\nAdding the ability to change between a light or dark mode in your product is not\nrequired as an IBM product but is highly encouraged. Attention to detail,\ncustomization, and being at the forefront of innovation separates IBM over our\ncompetitors.\n\n#### Respecting our users preferences\n\nMost operating system nowadays (ex: MacOS, iOS, Windows, Android and\nLinux/GNOME 3) support dark and light modes, offering APIs so that websites and\napplication can automatically match users preferred mode. Many users prefer\nworking on dark themed IDEs and using dark mode in their machines.\n\n#### Creating optimal user conditions\n\nFor some users, choosing light versus dark mode is more than an aesthetic\nchoice. While some [research](https://www.nngroup.com/articles/dark-mode/) shows\nthat unimpaired sighted user preform better in light mode, it also shows that\ndark mode is better for people with cataract and related disorders. Dark mode\nemits less light and can therefor reduces eyes strain and help prevent headaches\nand migraine.\n\n### How modes works\n\nThe themes use color tokens to interpret which values are needed for each theme.\nIt is the color tokens that allows a UI to so easily switch from one mode to the\nnext. You cannot implement light or dark mode without using color tokens\neverywhere in your product. Hard coded values will not change when the mode is\nswitched.\n\n<Tabs>\n\n<Tab label=\"Light mode\">\n\n![Dashboard in light mode](images/color-implementation-mode-light.png)\n\n</Tab>\n\n<Tab label=\"Dark mode\">\n\n![Dashboard in dark mode](images/color-implementation-mode-dark.png)\n\n</Tab>\n\n</Tabs>\n\n### Designing for modes\n\nYou can build a light or dark mode by using the Carbon themes and color tokens.\nYour product will need to choose a light Carbon theme (White or Gray 10) and a\ndark Carbon theme (Gray 100 or Gray 90).  All color in your designs and\ncomponents whether Carbon, PAL or custom made should be redlined using the\nCarbon color tokens (it would also be to your advantage to use the color token\nlayer styles from the Carbon design asset libraries when designing).\n\nRedlining a design in one theme should be enough and not require duplicate\ndesigns. However, products teams may want to have design comps in multiple\nthemes. In Figma, we recommend that you duplicate your files, then swap your\ncurrent theme library for another. This replaces local instances with matching\ninstances from the other library. For step-by-step instructions, visit this\n[Figma tutorial](https://help.figma.com/hc/en-us/articles/4404856784663-Swap-style-and-component-libraries).\n\n#### Creating a mode control\n\nSince this is a user preference, you'll need to add a control somewhere in your\nproduct for the user to make a theme mode selection. This is commonly done in a\ndisplay setting, user profile, or account area. At the moment, the placement and\ndesign of this control is up to product teams, further guidance and designs for\na mode control in IBM products may be offered in the future.\n\n<Row>\n<Column colLg={12}>\n\n![Example of a color mode control](images/color-modes-control.png)\n\n</Column>\n</Row>\n\n<Caption>\n  In IBM Cloud (beta), the theme control can be accessed through the user\n  profile panel in the header (left). The \"Change theme\" link triggers a model\n  where the user can save their theme preference (right).\n</Caption>\n\n#### Inline themes with modes\n\nMixing themes inline is still allowed with light or dark mode. Mixing inline\ntheme contrast between elements in different modes is also allowed. It is very\ncommon for products to have side panels or UI shell elements be high contrast in\nlight mode but low contrast in dark mode. These relationships can be mapped in\ncode using the the\n[theme component](https://react.carbondesignsystem.com/?path=/docs/components-theme--default).\nNote that smaller components built with an inverse tokens (like tooltip) should\nremain high contrast when switching modes.\n\n<Row>\n<Column colLg={8}>\n\n![Example of a color mode control](images/color-light-dark-inline.png)\n\n</Column>\n</Row>\n\n<Caption>\n  Light mode with an inline theme Gray 100 panel (left) and the dark mode\n  without an inline theme (right)\n</Caption>\n\n#### Consider illustrations \n\nYou'll need to account for illustrations and other imagery like pictograms\nchanging color between modes. Otherwise you may end up having very high contrast\nimages in one mode vs the other. Whenever possible, switch out assets entirely\nbettwen modes to reflect the theme either by using tokens in the svg code or\nmanually swapping out a png. When not possible, a low effort way to design\nimages for modes is to use transparent backgrounds.\n\n<InlineNotification>\n\n**Additional guidance:** Checkout some helpful PAL guidance around how to\nproperly treat illustrations, images, and pictograms in light or dark mode on\n[IBM Cloud PAL](https://pages.github.ibm.com/ibmcloud/pal/dark-mode-guidelines/designers/#illustrations-in-dark-mode),\n_for IBMers only_.\n\n</InlineNotification>\n\n<DoDontRow>\n  <DoDont\n    type=\"do\"\n    colLg={6}\n    caption=\"Use light colored assets, tones, and backgrounds for illustrations in the light themes (the best solution)\">\n\n![A light UI featuring a light themed illustration](./images/light-dark-mode-do-1.png)\n\n  </DoDont>\n  <DoDont\n    type=\"do\"\n    colLg={6}\n    caption=\"Use dark colored assets, tones, and backgrounds for illustrations in the dark themes (the best solution)\">\n\n![A dark UI featuring a dark themed illustration](./images/light-dark-mode-do-2.png)\n\n  </DoDont>\n</DoDontRow>\n\n<DoDontRow>\n <DoDont type=\"dont\" colLg={6} caption=\"Don’t use images with colored backgrounds when switching between modes because they will appear broken and in high contrast in the opposite mode\">\n\n![A dark UI featuring a light illustration with a white background](images/light-dark-mode-dont-1.png)\n\n  </DoDont>\n  <DoDont\n    type=\"do\"\n    colLg={6}\n    caption=\"If only one image is available between modes, use an image with a transparent background and swap the container color background to match the mode (acceptable solution)\">\n\n![A dark UI featuring a light themed illustration with a dark background](images/light-dark-mode-do-3.png)\n\n  </DoDont>\n</DoDontRow>\n","fileAbsolutePath":"/home/runner/work/carbon-website/carbon-website/src/pages/guidelines/color/usage.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}